
ILI9488_Library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003380  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003578  08003578  00013578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003590  08003590  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003590  08003590  00013590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003598  08003598  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003598  08003598  00013598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800359c  0800359c  0001359c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  080035ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  080035ac  00020110  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f5b1  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021be  00000000  00000000  0002f5eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a68  00000000  00000000  000317b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000970  00000000  00000000  00032218  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b2dc  00000000  00000000  00032b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a30f  00000000  00000000  0005de64  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f61d1  00000000  00000000  00068173  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015e344  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029cc  00000000  00000000  0015e3c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003560 	.word	0x08003560

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08003560 	.word	0x08003560

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <_ZN7ILI9488C1EP9PortmapIOS1_S1_S1_S1_>:
	_dc=DC;
	_rst = RST;
	_spi=spi;

}
ILI9488::ILI9488(PortmapIO *CS, PortmapIO *DC, PortmapIO *RST,PortmapIO *SCK, PortmapIO *MOSI)
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
 8000544:	603b      	str	r3, [r7, #0]
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	4618      	mov	r0, r3
 800054a:	f000 fb21 	bl	8000b90 <_ZN9PortmapIOC1Ev>
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	3308      	adds	r3, #8
 8000552:	4618      	mov	r0, r3
 8000554:	f000 fb64 	bl	8000c20 <_ZN10PortmapSPIC1Ev>
{
	_cs=CS;
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	68ba      	ldr	r2, [r7, #8]
 800055c:	611a      	str	r2, [r3, #16]
	_dc=DC;
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	615a      	str	r2, [r3, #20]
	_rst=RST;
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	683a      	ldr	r2, [r7, #0]
 8000568:	619a      	str	r2, [r3, #24]
	_sck=SCK;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	69ba      	ldr	r2, [r7, #24]
 800056e:	621a      	str	r2, [r3, #32]
	_mosi=MOSI;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	69fa      	ldr	r2, [r7, #28]
 8000574:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	4618      	mov	r0, r3
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <_ZN7ILI94885beginEv>:
void ILI9488::begin(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	_rst->setLow();
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4618      	mov	r0, r3
 800058e:	f000 fb21 	bl	8000bd4 <_ZN9PortmapIO6setLowEv>
	HAL_Delay(10);
 8000592:	200a      	movs	r0, #10
 8000594:	f000 feee 	bl	8001374 <HAL_Delay>
	_rst ->setHigh();
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	4618      	mov	r0, r3
 800059e:	f000 fb2c 	bl	8000bfa <_ZN9PortmapIO7setHighEv>
	_width=ILI9488_TFTWIDTH;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80005a8:	859a      	strh	r2, [r3, #44]	; 0x2c
	_height=ILI9488_TFTHEIGHT;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80005b0:	85da      	strh	r2, [r3, #46]	; 0x2e

	writecommand(0xE0);
 80005b2:	21e0      	movs	r1, #224	; 0xe0
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f000 fa21 	bl	80009fc <_ZN7ILI948812writecommandEh>
	writedata(0x00);
 80005ba:	2100      	movs	r1, #0
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f000 fa97 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x03);
 80005c2:	2103      	movs	r1, #3
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f000 fa93 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x09);
 80005ca:	2109      	movs	r1, #9
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f000 fa8f 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x08);
 80005d2:	2108      	movs	r1, #8
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f000 fa8b 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x16);
 80005da:	2116      	movs	r1, #22
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f000 fa87 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x0A);
 80005e2:	210a      	movs	r1, #10
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f000 fa83 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x3F);
 80005ea:	213f      	movs	r1, #63	; 0x3f
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f000 fa7f 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x78);
 80005f2:	2178      	movs	r1, #120	; 0x78
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f000 fa7b 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x4C);
 80005fa:	214c      	movs	r1, #76	; 0x4c
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f000 fa77 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x09);
 8000602:	2109      	movs	r1, #9
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f000 fa73 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x0A);
 800060a:	210a      	movs	r1, #10
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f000 fa6f 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x08);
 8000612:	2108      	movs	r1, #8
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f000 fa6b 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x16);
 800061a:	2116      	movs	r1, #22
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f000 fa67 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x1A);
 8000622:	211a      	movs	r1, #26
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f000 fa63 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x0F);
 800062a:	210f      	movs	r1, #15
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f000 fa5f 	bl	8000af0 <_ZN7ILI94889writedataEh>

	writecommand(0XE1);
 8000632:	21e1      	movs	r1, #225	; 0xe1
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f000 f9e1 	bl	80009fc <_ZN7ILI948812writecommandEh>
	writedata(0x00);
 800063a:	2100      	movs	r1, #0
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f000 fa57 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x16);
 8000642:	2116      	movs	r1, #22
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f000 fa53 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x19);
 800064a:	2119      	movs	r1, #25
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f000 fa4f 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x03);
 8000652:	2103      	movs	r1, #3
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f000 fa4b 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x0F);
 800065a:	210f      	movs	r1, #15
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f000 fa47 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x05);
 8000662:	2105      	movs	r1, #5
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f000 fa43 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x32);
 800066a:	2132      	movs	r1, #50	; 0x32
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f000 fa3f 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x45);
 8000672:	2145      	movs	r1, #69	; 0x45
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f000 fa3b 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x46);
 800067a:	2146      	movs	r1, #70	; 0x46
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f000 fa37 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x04);
 8000682:	2104      	movs	r1, #4
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f000 fa33 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x0E);
 800068a:	210e      	movs	r1, #14
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f000 fa2f 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x0D);
 8000692:	210d      	movs	r1, #13
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f000 fa2b 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x35);
 800069a:	2135      	movs	r1, #53	; 0x35
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f000 fa27 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x37);
 80006a2:	2137      	movs	r1, #55	; 0x37
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f000 fa23 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x0F);
 80006aa:	210f      	movs	r1, #15
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f000 fa1f 	bl	8000af0 <_ZN7ILI94889writedataEh>

	writecommand(0XC0);      //Power Control 1
 80006b2:	21c0      	movs	r1, #192	; 0xc0
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f000 f9a1 	bl	80009fc <_ZN7ILI948812writecommandEh>
	writedata(0x17);    //Vreg1out
 80006ba:	2117      	movs	r1, #23
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f000 fa17 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x15);    //Verg2out
 80006c2:	2115      	movs	r1, #21
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f000 fa13 	bl	8000af0 <_ZN7ILI94889writedataEh>

	writecommand(0xC1);      //Power Control 2
 80006ca:	21c1      	movs	r1, #193	; 0xc1
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f000 f995 	bl	80009fc <_ZN7ILI948812writecommandEh>
	writedata(0x41);    //VGH,VGL
 80006d2:	2141      	movs	r1, #65	; 0x41
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f000 fa0b 	bl	8000af0 <_ZN7ILI94889writedataEh>

	writecommand(0xC5);      //Power Control 3
 80006da:	21c5      	movs	r1, #197	; 0xc5
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f000 f98d 	bl	80009fc <_ZN7ILI948812writecommandEh>
	writedata(0x00);
 80006e2:	2100      	movs	r1, #0
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f000 fa03 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x12);    //Vcom
 80006ea:	2112      	movs	r1, #18
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f000 f9ff 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x80);
 80006f2:	2180      	movs	r1, #128	; 0x80
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f000 f9fb 	bl	8000af0 <_ZN7ILI94889writedataEh>

	writecommand(0x36);      //Memory Access
 80006fa:	2136      	movs	r1, #54	; 0x36
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f000 f97d 	bl	80009fc <_ZN7ILI948812writecommandEh>
	writedata(0x48);
 8000702:	2148      	movs	r1, #72	; 0x48
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f000 f9f3 	bl	8000af0 <_ZN7ILI94889writedataEh>

	writecommand(0x3A);      // Interface Pixel Format
 800070a:	213a      	movs	r1, #58	; 0x3a
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f000 f975 	bl	80009fc <_ZN7ILI948812writecommandEh>
	writedata(0x66); 	  //18 bit
 8000712:	2166      	movs	r1, #102	; 0x66
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f000 f9eb 	bl	8000af0 <_ZN7ILI94889writedataEh>

	writecommand(0XB0);      // Interface Mode Control
 800071a:	21b0      	movs	r1, #176	; 0xb0
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f000 f96d 	bl	80009fc <_ZN7ILI948812writecommandEh>
	writedata(0x80);     			 //SDO NOT USE
 8000722:	2180      	movs	r1, #128	; 0x80
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f000 f9e3 	bl	8000af0 <_ZN7ILI94889writedataEh>

	writecommand(0xB1);      //Frame rate
 800072a:	21b1      	movs	r1, #177	; 0xb1
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f000 f965 	bl	80009fc <_ZN7ILI948812writecommandEh>
	writedata(0xA0);    //60Hz
 8000732:	21a0      	movs	r1, #160	; 0xa0
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f000 f9db 	bl	8000af0 <_ZN7ILI94889writedataEh>

	writecommand(0xB4);      //Display Inversion Control
 800073a:	21b4      	movs	r1, #180	; 0xb4
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f000 f95d 	bl	80009fc <_ZN7ILI948812writecommandEh>
	writedata(0x02);    //2-dot
 8000742:	2102      	movs	r1, #2
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f000 f9d3 	bl	8000af0 <_ZN7ILI94889writedataEh>

	writecommand(0XB6); //Display Function Control  RGB/MCU Interface Control
 800074a:	21b6      	movs	r1, #182	; 0xb6
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f000 f955 	bl	80009fc <_ZN7ILI948812writecommandEh>

	writedata(0x02);    //MCU
 8000752:	2102      	movs	r1, #2
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f000 f9cb 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x02);    //Source,Gate scan dieection
 800075a:	2102      	movs	r1, #2
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f000 f9c7 	bl	8000af0 <_ZN7ILI94889writedataEh>

	writecommand(0XE9);      // Set Image Functio
 8000762:	21e9      	movs	r1, #233	; 0xe9
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f000 f949 	bl	80009fc <_ZN7ILI948812writecommandEh>
	writedata(0x00);    // Disable 24 bit data
 800076a:	2100      	movs	r1, #0
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f000 f9bf 	bl	8000af0 <_ZN7ILI94889writedataEh>

	writecommand(0xF7);      // Adjust Control
 8000772:	21f7      	movs	r1, #247	; 0xf7
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f000 f941 	bl	80009fc <_ZN7ILI948812writecommandEh>
	writedata(0xA9);
 800077a:	21a9      	movs	r1, #169	; 0xa9
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f000 f9b7 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x51);
 8000782:	2151      	movs	r1, #81	; 0x51
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f000 f9b3 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x2C);
 800078a:	212c      	movs	r1, #44	; 0x2c
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f000 f9af 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(0x82);    // D7 stream, loose
 8000792:	2182      	movs	r1, #130	; 0x82
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 f9ab 	bl	8000af0 <_ZN7ILI94889writedataEh>

	writecommand(ILI9488_SLPOUT);    //Exit Sleep
 800079a:	2111      	movs	r1, #17
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f000 f92d 	bl	80009fc <_ZN7ILI948812writecommandEh>

	HAL_Delay(120);
 80007a2:	2078      	movs	r0, #120	; 0x78
 80007a4:	f000 fde6 	bl	8001374 <HAL_Delay>

	writecommand(ILI9488_DISPON);    //Display on
 80007a8:	2129      	movs	r1, #41	; 0x29
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f000 f926 	bl	80009fc <_ZN7ILI948812writecommandEh>


}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <_ZN7ILI948813setAddrWindowEtttt>:

void ILI9488::setAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	4608      	mov	r0, r1
 80007c2:	4611      	mov	r1, r2
 80007c4:	461a      	mov	r2, r3
 80007c6:	4603      	mov	r3, r0
 80007c8:	817b      	strh	r3, [r7, #10]
 80007ca:	460b      	mov	r3, r1
 80007cc:	813b      	strh	r3, [r7, #8]
 80007ce:	4613      	mov	r3, r2
 80007d0:	80fb      	strh	r3, [r7, #6]
	writecommand(ILI9488_CASET); // Column addr set
 80007d2:	212a      	movs	r1, #42	; 0x2a
 80007d4:	68f8      	ldr	r0, [r7, #12]
 80007d6:	f000 f911 	bl	80009fc <_ZN7ILI948812writecommandEh>
	writedata(x0 >> 8);
 80007da:	897b      	ldrh	r3, [r7, #10]
 80007dc:	121b      	asrs	r3, r3, #8
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	4619      	mov	r1, r3
 80007e2:	68f8      	ldr	r0, [r7, #12]
 80007e4:	f000 f984 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(x0 & 0xFF);     // XSTART
 80007e8:	897b      	ldrh	r3, [r7, #10]
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	4619      	mov	r1, r3
 80007ee:	68f8      	ldr	r0, [r7, #12]
 80007f0:	f000 f97e 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(x1 >> 8);
 80007f4:	88fb      	ldrh	r3, [r7, #6]
 80007f6:	121b      	asrs	r3, r3, #8
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	4619      	mov	r1, r3
 80007fc:	68f8      	ldr	r0, [r7, #12]
 80007fe:	f000 f977 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(x1 & 0xFF);     // XEND
 8000802:	88fb      	ldrh	r3, [r7, #6]
 8000804:	b2db      	uxtb	r3, r3
 8000806:	4619      	mov	r1, r3
 8000808:	68f8      	ldr	r0, [r7, #12]
 800080a:	f000 f971 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writecommand(ILI9488_PASET); // Row addr set
 800080e:	212b      	movs	r1, #43	; 0x2b
 8000810:	68f8      	ldr	r0, [r7, #12]
 8000812:	f000 f8f3 	bl	80009fc <_ZN7ILI948812writecommandEh>
	writedata(y0 >> 8);
 8000816:	893b      	ldrh	r3, [r7, #8]
 8000818:	121b      	asrs	r3, r3, #8
 800081a:	b2db      	uxtb	r3, r3
 800081c:	4619      	mov	r1, r3
 800081e:	68f8      	ldr	r0, [r7, #12]
 8000820:	f000 f966 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(y0 & 0xff);     // YSTART
 8000824:	893b      	ldrh	r3, [r7, #8]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	4619      	mov	r1, r3
 800082a:	68f8      	ldr	r0, [r7, #12]
 800082c:	f000 f960 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(y1 >> 8);
 8000830:	8b3b      	ldrh	r3, [r7, #24]
 8000832:	121b      	asrs	r3, r3, #8
 8000834:	b2db      	uxtb	r3, r3
 8000836:	4619      	mov	r1, r3
 8000838:	68f8      	ldr	r0, [r7, #12]
 800083a:	f000 f959 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writedata(y1 & 0xff);     // YEND
 800083e:	8b3b      	ldrh	r3, [r7, #24]
 8000840:	b2db      	uxtb	r3, r3
 8000842:	4619      	mov	r1, r3
 8000844:	68f8      	ldr	r0, [r7, #12]
 8000846:	f000 f953 	bl	8000af0 <_ZN7ILI94889writedataEh>
	writecommand(ILI9488_RAMWR); // write to RAM
 800084a:	212c      	movs	r1, #44	; 0x2c
 800084c:	68f8      	ldr	r0, [r7, #12]
 800084e:	f000 f8d5 	bl	80009fc <_ZN7ILI948812writecommandEh>
}
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <_ZN7ILI948810fillScreenEt>:
	}

	_cs->setHigh();
}
void ILI9488::fillScreen(uint16_t color)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b084      	sub	sp, #16
 800085e:	af02      	add	r7, sp, #8
 8000860:	6078      	str	r0, [r7, #4]
 8000862:	460b      	mov	r3, r1
 8000864:	807b      	strh	r3, [r7, #2]
	fillRect(0, 0,  _width, _height, color);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	f9b3 102c 	ldrsh.w	r1, [r3, #44]	; 0x2c
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8000872:	887a      	ldrh	r2, [r7, #2]
 8000874:	9201      	str	r2, [sp, #4]
 8000876:	9300      	str	r3, [sp, #0]
 8000878:	460b      	mov	r3, r1
 800087a:	2200      	movs	r2, #0
 800087c:	2100      	movs	r1, #0
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f000 f804 	bl	800088c <_ZN7ILI94888fillRectEsssst>
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <_ZN7ILI94888fillRectEsssst>:
      err += dx;
    }
  }
}
void ILI9488::fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b087      	sub	sp, #28
 8000890:	af02      	add	r7, sp, #8
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	4608      	mov	r0, r1
 8000896:	4611      	mov	r1, r2
 8000898:	461a      	mov	r2, r3
 800089a:	4603      	mov	r3, r0
 800089c:	817b      	strh	r3, [r7, #10]
 800089e:	460b      	mov	r3, r1
 80008a0:	813b      	strh	r3, [r7, #8]
 80008a2:	4613      	mov	r3, r2
 80008a4:	80fb      	strh	r3, [r7, #6]
	if ((x >= _width) || (y >= _height))
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80008ac:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	f280 809f 	bge.w	80009f4 <_ZN7ILI94888fillRectEsssst+0x168>
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80008bc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	f280 8097 	bge.w	80009f4 <_ZN7ILI94888fillRectEsssst+0x168>
		return;
	if ((x + w - 1) >= _width)
 80008c6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80008ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008ce:	4413      	add	r3, r2
 80008d0:	3b01      	subs	r3, #1
 80008d2:	68fa      	ldr	r2, [r7, #12]
 80008d4:	f9b2 202c 	ldrsh.w	r2, [r2, #44]	; 0x2c
 80008d8:	4293      	cmp	r3, r2
 80008da:	db07      	blt.n	80008ec <_ZN7ILI94888fillRectEsssst+0x60>
		w = _width - x;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	897b      	ldrh	r3, [r7, #10]
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	80fb      	strh	r3, [r7, #6]
	if ((y + h - 1) >= _height)
 80008ec:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80008f0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80008f4:	4413      	add	r3, r2
 80008f6:	3b01      	subs	r3, #1
 80008f8:	68fa      	ldr	r2, [r7, #12]
 80008fa:	f9b2 202e 	ldrsh.w	r2, [r2, #46]	; 0x2e
 80008fe:	4293      	cmp	r3, r2
 8000900:	db07      	blt.n	8000912 <_ZN7ILI94888fillRectEsssst+0x86>
		h = _height - y;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8000908:	b29a      	uxth	r2, r3
 800090a:	893b      	ldrh	r3, [r7, #8]
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	b29b      	uxth	r3, r3
 8000910:	843b      	strh	r3, [r7, #32]

	setAddrWindow(x, y, x + w - 1, y + h - 1);
 8000912:	8979      	ldrh	r1, [r7, #10]
 8000914:	8938      	ldrh	r0, [r7, #8]
 8000916:	897a      	ldrh	r2, [r7, #10]
 8000918:	88fb      	ldrh	r3, [r7, #6]
 800091a:	4413      	add	r3, r2
 800091c:	b29b      	uxth	r3, r3
 800091e:	3b01      	subs	r3, #1
 8000920:	b29c      	uxth	r4, r3
 8000922:	893a      	ldrh	r2, [r7, #8]
 8000924:	8c3b      	ldrh	r3, [r7, #32]
 8000926:	4413      	add	r3, r2
 8000928:	b29b      	uxth	r3, r3
 800092a:	3b01      	subs	r3, #1
 800092c:	b29b      	uxth	r3, r3
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	4623      	mov	r3, r4
 8000932:	4602      	mov	r2, r0
 8000934:	68f8      	ldr	r0, [r7, #12]
 8000936:	f7ff ff3f 	bl	80007b8 <_ZN7ILI948813setAddrWindowEtttt>

	_dc->setHigh();
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	4618      	mov	r0, r3
 8000940:	f000 f95b 	bl	8000bfa <_ZN9PortmapIO7setHighEv>
	_cs->setLow();
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	691b      	ldr	r3, [r3, #16]
 8000948:	4618      	mov	r0, r3
 800094a:	f000 f943 	bl	8000bd4 <_ZN9PortmapIO6setLowEv>

	for (y = h; y > 0; y--) {
 800094e:	8c3b      	ldrh	r3, [r7, #32]
 8000950:	813b      	strh	r3, [r7, #8]
 8000952:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000956:	2b00      	cmp	r3, #0
 8000958:	dd18      	ble.n	800098c <_ZN7ILI94888fillRectEsssst+0x100>
		for (x = w; x > 0; x--) {
 800095a:	88fb      	ldrh	r3, [r7, #6]
 800095c:	817b      	strh	r3, [r7, #10]
 800095e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000962:	2b00      	cmp	r3, #0
 8000964:	dd0b      	ble.n	800097e <_ZN7ILI94888fillRectEsssst+0xf2>

			write16BitColor(color);
 8000966:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000968:	4619      	mov	r1, r3
 800096a:	68f8      	ldr	r0, [r7, #12]
 800096c:	f000 f866 	bl	8000a3c <_ZN7ILI948815write16BitColorEt>
		for (x = w; x > 0; x--) {
 8000970:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000974:	b29b      	uxth	r3, r3
 8000976:	3b01      	subs	r3, #1
 8000978:	b29b      	uxth	r3, r3
 800097a:	817b      	strh	r3, [r7, #10]
 800097c:	e7ef      	b.n	800095e <_ZN7ILI94888fillRectEsssst+0xd2>
	for (y = h; y > 0; y--) {
 800097e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000982:	b29b      	uxth	r3, r3
 8000984:	3b01      	subs	r3, #1
 8000986:	b29b      	uxth	r3, r3
 8000988:	813b      	strh	r3, [r7, #8]
 800098a:	e7e2      	b.n	8000952 <_ZN7ILI94888fillRectEsssst+0xc6>
		}
	}

	_cs->setHigh();
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	691b      	ldr	r3, [r3, #16]
 8000990:	4618      	mov	r0, r3
 8000992:	f000 f932 	bl	8000bfa <_ZN9PortmapIO7setHighEv>

	_dc->setHigh();
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	4618      	mov	r0, r3
 800099c:	f000 f92d 	bl	8000bfa <_ZN9PortmapIO7setHighEv>
		_cs->setLow();
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	691b      	ldr	r3, [r3, #16]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 f915 	bl	8000bd4 <_ZN9PortmapIO6setLowEv>

		for (y = h; y > 0; y--) {
 80009aa:	8c3b      	ldrh	r3, [r7, #32]
 80009ac:	813b      	strh	r3, [r7, #8]
 80009ae:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	dd18      	ble.n	80009e8 <_ZN7ILI94888fillRectEsssst+0x15c>
			for (x = w; x > 0; x--) {
 80009b6:	88fb      	ldrh	r3, [r7, #6]
 80009b8:	817b      	strh	r3, [r7, #10]
 80009ba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	dd0b      	ble.n	80009da <_ZN7ILI94888fillRectEsssst+0x14e>

				write16BitColor(ILI9488_DARKGREY);
 80009c2:	f647 31ef 	movw	r1, #31727	; 0x7bef
 80009c6:	68f8      	ldr	r0, [r7, #12]
 80009c8:	f000 f838 	bl	8000a3c <_ZN7ILI948815write16BitColorEt>
			for (x = w; x > 0; x--) {
 80009cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	3b01      	subs	r3, #1
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	817b      	strh	r3, [r7, #10]
 80009d8:	e7ef      	b.n	80009ba <_ZN7ILI94888fillRectEsssst+0x12e>
		for (y = h; y > 0; y--) {
 80009da:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80009de:	b29b      	uxth	r3, r3
 80009e0:	3b01      	subs	r3, #1
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	813b      	strh	r3, [r7, #8]
 80009e6:	e7e2      	b.n	80009ae <_ZN7ILI94888fillRectEsssst+0x122>
			}
		}

		_cs->setHigh();
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	691b      	ldr	r3, [r3, #16]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 f904 	bl	8000bfa <_ZN9PortmapIO7setHighEv>
 80009f2:	e000      	b.n	80009f6 <_ZN7ILI94888fillRectEsssst+0x16a>
		return;
 80009f4:	bf00      	nop

}
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd90      	pop	{r4, r7, pc}

080009fc <_ZN7ILI948812writecommandEh>:
	uint8_t d=data;
	_spi->send(&d);

}
void ILI9488::writecommand(uint8_t c)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	460b      	mov	r3, r1
 8000a06:	70fb      	strb	r3, [r7, #3]
	uint8_t d=c;
 8000a08:	78fb      	ldrb	r3, [r7, #3]
 8000a0a:	73fb      	strb	r3, [r7, #15]
	_dc->setLow();
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	695b      	ldr	r3, [r3, #20]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 f8df 	bl	8000bd4 <_ZN9PortmapIO6setLowEv>

	//  digitalWrite(_sclk, LOW);
	_cs->setLow();
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	691b      	ldr	r3, [r3, #16]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 f8da 	bl	8000bd4 <_ZN9PortmapIO6setLowEv>
	if(SINGLE_IO_MODE)
		sendasIO(c);
 8000a20:	78fb      	ldrb	r3, [r7, #3]
 8000a22:	4619      	mov	r1, r3
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f000 f883 	bl	8000b30 <_ZN7ILI94888sendasIOEh>
	else
		_spi->send(&d);
	//HAL_SPI_Transmit(_spi.getHandler(), &d,1,100);

	_cs->setHigh();
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	691b      	ldr	r3, [r3, #16]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 f8e3 	bl	8000bfa <_ZN9PortmapIO7setHighEv>

}
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <_ZN7ILI948815write16BitColorEt>:
void ILI9488::write16BitColor(uint16_t color)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	460b      	mov	r3, r1
 8000a46:	807b      	strh	r3, [r7, #2]

	  uint8_t r = (color & 0xF800) >> 11;
 8000a48:	887b      	ldrh	r3, [r7, #2]
 8000a4a:	0adb      	lsrs	r3, r3, #11
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	73fb      	strb	r3, [r7, #15]
	  uint8_t g = (color & 0x07E0) >> 5;
 8000a52:	887b      	ldrh	r3, [r7, #2]
 8000a54:	115b      	asrs	r3, r3, #5
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	73bb      	strb	r3, [r7, #14]
	  uint8_t b = color & 0x001F;
 8000a60:	887b      	ldrh	r3, [r7, #2]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	f003 031f 	and.w	r3, r3, #31
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	737b      	strb	r3, [r7, #13]

	  r = (r * 255) / 31;
 8000a6c:	7bfb      	ldrb	r3, [r7, #15]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	4613      	mov	r3, r2
 8000a72:	021b      	lsls	r3, r3, #8
 8000a74:	1a9b      	subs	r3, r3, r2
 8000a76:	4a1c      	ldr	r2, [pc, #112]	; (8000ae8 <_ZN7ILI948815write16BitColorEt+0xac>)
 8000a78:	fb82 1203 	smull	r1, r2, r2, r3
 8000a7c:	441a      	add	r2, r3
 8000a7e:	1112      	asrs	r2, r2, #4
 8000a80:	17db      	asrs	r3, r3, #31
 8000a82:	1ad3      	subs	r3, r2, r3
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	73fb      	strb	r3, [r7, #15]
	  g = (g * 255) / 63;
 8000a88:	7bbb      	ldrb	r3, [r7, #14]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	021b      	lsls	r3, r3, #8
 8000a90:	1a9b      	subs	r3, r3, r2
 8000a92:	4a16      	ldr	r2, [pc, #88]	; (8000aec <_ZN7ILI948815write16BitColorEt+0xb0>)
 8000a94:	fb82 1203 	smull	r1, r2, r2, r3
 8000a98:	441a      	add	r2, r3
 8000a9a:	1152      	asrs	r2, r2, #5
 8000a9c:	17db      	asrs	r3, r3, #31
 8000a9e:	1ad3      	subs	r3, r2, r3
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	73bb      	strb	r3, [r7, #14]
	  b = (b * 255) / 31;
 8000aa4:	7b7b      	ldrb	r3, [r7, #13]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	021b      	lsls	r3, r3, #8
 8000aac:	1a9b      	subs	r3, r3, r2
 8000aae:	4a0e      	ldr	r2, [pc, #56]	; (8000ae8 <_ZN7ILI948815write16BitColorEt+0xac>)
 8000ab0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ab4:	441a      	add	r2, r3
 8000ab6:	1112      	asrs	r2, r2, #4
 8000ab8:	17db      	asrs	r3, r3, #31
 8000aba:	1ad3      	subs	r3, r2, r3
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	737b      	strb	r3, [r7, #13]
	  if(SINGLE_IO_MODE)
	  {
		  sendasIO(r);
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f000 f833 	bl	8000b30 <_ZN7ILI94888sendasIOEh>
		  sendasIO(g);
 8000aca:	7bbb      	ldrb	r3, [r7, #14]
 8000acc:	4619      	mov	r1, r3
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f000 f82e 	bl	8000b30 <_ZN7ILI94888sendasIOEh>
		  sendasIO(b);
 8000ad4:	7b7b      	ldrb	r3, [r7, #13]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f000 f829 	bl	8000b30 <_ZN7ILI94888sendasIOEh>
	  _spi->send(&r);
	  _spi->send(&g);
	  _spi->send(&b);
	  }

}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	84210843 	.word	0x84210843
 8000aec:	82082083 	.word	0x82082083

08000af0 <_ZN7ILI94889writedataEh>:
void ILI9488::writedata(uint8_t d)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	460b      	mov	r3, r1
 8000afa:	70fb      	strb	r3, [r7, #3]

	uint8_t tmp=d;
 8000afc:	78fb      	ldrb	r3, [r7, #3]
 8000afe:	73fb      	strb	r3, [r7, #15]
	_dc->setHigh();
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	695b      	ldr	r3, [r3, #20]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 f878 	bl	8000bfa <_ZN9PortmapIO7setHighEv>
	_cs->setLow();
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	691b      	ldr	r3, [r3, #16]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 f860 	bl	8000bd4 <_ZN9PortmapIO6setLowEv>
	if(SINGLE_IO_MODE)
		sendasIO(d);
 8000b14:	78fb      	ldrb	r3, [r7, #3]
 8000b16:	4619      	mov	r1, r3
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f000 f809 	bl	8000b30 <_ZN7ILI94888sendasIOEh>
	else
	_spi->send(&tmp);
	//HAL_SPI_Transmit(_spi.getHandler(), &tmp,1,100);
	_cs->setHigh();
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	691b      	ldr	r3, [r3, #16]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 f869 	bl	8000bfa <_ZN9PortmapIO7setHighEv>

}
 8000b28:	bf00      	nop
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <_ZN7ILI94888sendasIOEh>:
	x2 = 0;
	for (y2 = 0; y2 < h; y2 += 6)
		drawLine(x1, y1, x2, y2, color);
}
void ILI9488::sendasIO(uint8_t d)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	70fb      	strb	r3, [r7, #3]
	for (uint8_t bit = 0x80; bit; bit >>= 1) {
 8000b3c:	2380      	movs	r3, #128	; 0x80
 8000b3e:	73fb      	strb	r3, [r7, #15]
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d01e      	beq.n	8000b84 <_ZN7ILI94888sendasIOEh+0x54>

		if (d & bit) {
 8000b46:	78fa      	ldrb	r2, [r7, #3]
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d005      	beq.n	8000b5e <_ZN7ILI94888sendasIOEh+0x2e>
			//_mosi->setHigh();
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000b52:	2201      	movs	r2, #1
 8000b54:	2180      	movs	r1, #128	; 0x80
 8000b56:	480d      	ldr	r0, [pc, #52]	; (8000b8c <_ZN7ILI94888sendasIOEh+0x5c>)
 8000b58:	f000 febe 	bl	80018d8 <HAL_GPIO_WritePin>
 8000b5c:	e004      	b.n	8000b68 <_ZN7ILI94888sendasIOEh+0x38>
		} else {
			//_mosi->setLow();
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2180      	movs	r1, #128	; 0x80
 8000b62:	480a      	ldr	r0, [pc, #40]	; (8000b8c <_ZN7ILI94888sendasIOEh+0x5c>)
 8000b64:	f000 feb8 	bl	80018d8 <HAL_GPIO_WritePin>
		}
		//_sck->setHigh();
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2120      	movs	r1, #32
 8000b6c:	4807      	ldr	r0, [pc, #28]	; (8000b8c <_ZN7ILI94888sendasIOEh+0x5c>)
 8000b6e:	f000 feb3 	bl	80018d8 <HAL_GPIO_WritePin>
		//HAL_Delay(4);
		//__ASM volatile ("NOP");

		//_sck->setLow();
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2120      	movs	r1, #32
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <_ZN7ILI94888sendasIOEh+0x5c>)
 8000b78:	f000 feae 	bl	80018d8 <HAL_GPIO_WritePin>
	for (uint8_t bit = 0x80; bit; bit >>= 1) {
 8000b7c:	7bfb      	ldrb	r3, [r7, #15]
 8000b7e:	105b      	asrs	r3, r3, #1
 8000b80:	73fb      	strb	r3, [r7, #15]
 8000b82:	e7dd      	b.n	8000b40 <_ZN7ILI94888sendasIOEh+0x10>
	}
}
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40020000 	.word	0x40020000

08000b90 <_ZN9PortmapIOC1Ev>:
 *      Author: hydra
 */

#include "PortmapIO.h"

PortmapIO::PortmapIO()
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
{

}
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_ZN9PortmapIOC1EP12GPIO_TypeDeft>:
PortmapIO::PortmapIO (GPIO_TypeDef * port, uint16_t pin) {
 8000ba6:	b480      	push	{r7}
 8000ba8:	b085      	sub	sp, #20
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	60f8      	str	r0, [r7, #12]
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	80fb      	strh	r3, [r7, #6]
	_port = port;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	601a      	str	r2, [r3, #0]
	_pin=pin;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	88fa      	ldrh	r2, [r7, #6]
 8000bbe:	809a      	strh	r2, [r3, #4]
	_status=0;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	719a      	strb	r2, [r3, #6]
}
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <_ZN9PortmapIO6setLowEv>:

	HAL_GPIO_TogglePin(_port,_pin);
	_status=!_status;
}
void PortmapIO::setLow()
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_port,_pin,GPIO_PIN_RESET);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6818      	ldr	r0, [r3, #0]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	889b      	ldrh	r3, [r3, #4]
 8000be4:	2200      	movs	r2, #0
 8000be6:	4619      	mov	r1, r3
 8000be8:	f000 fe76 	bl	80018d8 <HAL_GPIO_WritePin>
	_status=0;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	719a      	strb	r2, [r3, #6]
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <_ZN9PortmapIO7setHighEv>:
void PortmapIO::setHigh()
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_port,_pin,GPIO_PIN_SET);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6818      	ldr	r0, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	889b      	ldrh	r3, [r3, #4]
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f000 fe63 	bl	80018d8 <HAL_GPIO_WritePin>
	_status=1;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2201      	movs	r2, #1
 8000c16:	719a      	strb	r2, [r3, #6]
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <_ZN10PortmapSPIC1Ev>:
 *      Author: hydra
 */

#include "PortmapSPI.h"

PortmapSPI::PortmapSPI()
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
{

}
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
	...

08000c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b09d      	sub	sp, #116	; 0x74
 8000c3c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c3e:	f000 fb3c 	bl	80012ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c42:	f000 f84d 	bl	8000ce0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c46:	f000 f969 	bl	8000f1c <_ZL12MX_GPIO_Initv>
  MX_USART3_UART_Init();
 8000c4a:	f000 f931 	bl	8000eb0 <_ZL19MX_USART3_UART_Initv>
  MX_SPI4_Init();
 8000c4e:	f000 f8ed 	bl	8000e2c <_ZL12MX_SPI4_Initv>
  /* USER CODE BEGIN 2 */
//  PortmapSPI lcd_spi =PortmapSPI(&hspi1);
PortmapIO lcd_dc = PortmapIO(GPIOG,GPIO_PIN_3);
 8000c52:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000c56:	2208      	movs	r2, #8
 8000c58:	491e      	ldr	r1, [pc, #120]	; (8000cd4 <main+0x9c>)
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ffa3 	bl	8000ba6 <_ZN9PortmapIOC1EP12GPIO_TypeDeft>
PortmapIO lcd_cs = PortmapIO(GPIOG,GPIO_PIN_2);
 8000c60:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c64:	2204      	movs	r2, #4
 8000c66:	491b      	ldr	r1, [pc, #108]	; (8000cd4 <main+0x9c>)
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ff9c 	bl	8000ba6 <_ZN9PortmapIOC1EP12GPIO_TypeDeft>
PortmapIO lcd_rst = PortmapIO(GPIOF,GPIO_PIN_12);
 8000c6e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c76:	4918      	ldr	r1, [pc, #96]	; (8000cd8 <main+0xa0>)
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff94 	bl	8000ba6 <_ZN9PortmapIOC1EP12GPIO_TypeDeft>
PortmapIO lcd_sck = PortmapIO(GPIOA,GPIO_PIN_5);
 8000c7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c82:	2220      	movs	r2, #32
 8000c84:	4915      	ldr	r1, [pc, #84]	; (8000cdc <main+0xa4>)
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff ff8d 	bl	8000ba6 <_ZN9PortmapIOC1EP12GPIO_TypeDeft>
PortmapIO lcd_mosi = PortmapIO(GPIOA,GPIO_PIN_7);
 8000c8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c90:	2280      	movs	r2, #128	; 0x80
 8000c92:	4912      	ldr	r1, [pc, #72]	; (8000cdc <main+0xa4>)
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff86 	bl	8000ba6 <_ZN9PortmapIOC1EP12GPIO_TypeDeft>

     //ILI9488 rpi_lcd = ILI9488(&lcd_cs,&lcd_dc, &lcd_rst, &lcd_spi);
	ILI9488 rpi_lcd = ILI9488(&lcd_cs,&lcd_dc, &lcd_rst, &lcd_sck,&lcd_mosi);
 8000c9a:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000c9e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000ca2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000ca6:	1d38      	adds	r0, r7, #4
 8000ca8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cac:	9301      	str	r3, [sp, #4]
 8000cae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	4623      	mov	r3, r4
 8000cb6:	f7ff fc3f 	bl	8000538 <_ZN7ILI9488C1EP9PortmapIOS1_S1_S1_S1_>
     rpi_lcd.begin();
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fc5f 	bl	8000580 <_ZN7ILI94885beginEv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
     while (1)
     {
   	  rpi_lcd.fillScreen(ILI9488_BLACK);
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fdc7 	bl	800085a <_ZN7ILI948810fillScreenEt>
   	//  rpi_lcd.fillScreen(ILI9488_RED);
   	//   rpi_lcd.fillScreen(ILI9488_GREEN);
   	//   rpi_lcd.fillScreen(ILI9488_BLUE);
   	//   rpi_lcd.fillScreen(ILI9488_BLACK);
   	  HAL_Delay(50);
 8000ccc:	2032      	movs	r0, #50	; 0x32
 8000cce:	f000 fb51 	bl	8001374 <HAL_Delay>
   	  rpi_lcd.fillScreen(ILI9488_BLACK);
 8000cd2:	e7f6      	b.n	8000cc2 <main+0x8a>
 8000cd4:	40021800 	.word	0x40021800
 8000cd8:	40021400 	.word	0x40021400
 8000cdc:	40020000 	.word	0x40020000

08000ce0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b0b8      	sub	sp, #224	; 0xe0
 8000ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cea:	2234      	movs	r2, #52	; 0x34
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f002 fc2e 	bl	8003550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d04:	f107 0308 	add.w	r3, r7, #8
 8000d08:	2290      	movs	r2, #144	; 0x90
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f002 fc1f 	bl	8003550 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d12:	4b44      	ldr	r3, [pc, #272]	; (8000e24 <_Z18SystemClock_Configv+0x144>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	4a43      	ldr	r2, [pc, #268]	; (8000e24 <_Z18SystemClock_Configv+0x144>)
 8000d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1e:	4b41      	ldr	r3, [pc, #260]	; (8000e24 <_Z18SystemClock_Configv+0x144>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d2a:	4b3f      	ldr	r3, [pc, #252]	; (8000e28 <_Z18SystemClock_Configv+0x148>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d32:	4a3d      	ldr	r2, [pc, #244]	; (8000e28 <_Z18SystemClock_Configv+0x148>)
 8000d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d38:	6013      	str	r3, [r2, #0]
 8000d3a:	4b3b      	ldr	r3, [pc, #236]	; (8000e28 <_Z18SystemClock_Configv+0x148>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d46:	2302      	movs	r3, #2
 8000d48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d52:	2310      	movs	r3, #16
 8000d54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d64:	2308      	movs	r3, #8
 8000d66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000d6a:	2364      	movs	r3, #100	; 0x64
 8000d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d70:	2302      	movs	r3, #2
 8000d72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d76:	2302      	movs	r3, #2
 8000d78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d7c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d80:	4618      	mov	r0, r3
 8000d82:	f000 fe13 	bl	80019ac <HAL_RCC_OscConfig>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	bf14      	ite	ne
 8000d8c:	2301      	movne	r3, #1
 8000d8e:	2300      	moveq	r3, #0
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8000d96:	f000 f977 	bl	8001088 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d9a:	f000 fdb7 	bl	800190c <HAL_PWREx_EnableOverDrive>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	bf14      	ite	ne
 8000da4:	2301      	movne	r3, #1
 8000da6:	2300      	moveq	r3, #0
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 8000dae:	f000 f96b 	bl	8001088 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db2:	230f      	movs	r3, #15
 8000db4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db8:	2302      	movs	r3, #2
 8000dba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000dd4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000dd8:	2103      	movs	r1, #3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f001 f894 	bl	8001f08 <HAL_RCC_ClockConfig>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	bf14      	ite	ne
 8000de6:	2301      	movne	r3, #1
 8000de8:	2300      	moveq	r3, #0
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <_Z18SystemClock_Configv+0x114>
  {
    Error_Handler();
 8000df0:	f000 f94a 	bl	8001088 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000df4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000df8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dfe:	f107 0308 	add.w	r3, r7, #8
 8000e02:	4618      	mov	r0, r3
 8000e04:	f001 fa52 	bl	80022ac <HAL_RCCEx_PeriphCLKConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	bf14      	ite	ne
 8000e0e:	2301      	movne	r3, #1
 8000e10:	2300      	moveq	r3, #0
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <_Z18SystemClock_Configv+0x13c>
  {
    Error_Handler();
 8000e18:	f000 f936 	bl	8001088 <Error_Handler>
  }
}
 8000e1c:	bf00      	nop
 8000e1e:	37e0      	adds	r7, #224	; 0xe0
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40007000 	.word	0x40007000

08000e2c <_ZL12MX_SPI4_Initv>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000e30:	4b1d      	ldr	r3, [pc, #116]	; (8000ea8 <_ZL12MX_SPI4_Initv+0x7c>)
 8000e32:	4a1e      	ldr	r2, [pc, #120]	; (8000eac <_ZL12MX_SPI4_Initv+0x80>)
 8000e34:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000e36:	4b1c      	ldr	r3, [pc, #112]	; (8000ea8 <_ZL12MX_SPI4_Initv+0x7c>)
 8000e38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e3c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <_ZL12MX_SPI4_Initv+0x7c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e44:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <_ZL12MX_SPI4_Initv+0x7c>)
 8000e46:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e4a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e4c:	4b16      	ldr	r3, [pc, #88]	; (8000ea8 <_ZL12MX_SPI4_Initv+0x7c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <_ZL12MX_SPI4_Initv+0x7c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000e58:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <_ZL12MX_SPI4_Initv+0x7c>)
 8000e5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e5e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <_ZL12MX_SPI4_Initv+0x7c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <_ZL12MX_SPI4_Initv+0x7c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <_ZL12MX_SPI4_Initv+0x7c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e72:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <_ZL12MX_SPI4_Initv+0x7c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000e78:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <_ZL12MX_SPI4_Initv+0x7c>)
 8000e7a:	2207      	movs	r2, #7
 8000e7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <_ZL12MX_SPI4_Initv+0x7c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <_ZL12MX_SPI4_Initv+0x7c>)
 8000e86:	2208      	movs	r2, #8
 8000e88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000e8a:	4807      	ldr	r0, [pc, #28]	; (8000ea8 <_ZL12MX_SPI4_Initv+0x7c>)
 8000e8c:	f001 fe34 	bl	8002af8 <HAL_SPI_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	bf14      	ite	ne
 8000e96:	2301      	movne	r3, #1
 8000e98:	2300      	moveq	r3, #0
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <_ZL12MX_SPI4_Initv+0x78>
  {
    Error_Handler();
 8000ea0:	f000 f8f2 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000028 	.word	0x20000028
 8000eac:	40013400 	.word	0x40013400

08000eb0 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000eb4:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <_ZL19MX_USART3_UART_Initv+0x64>)
 8000eb6:	4a18      	ldr	r2, [pc, #96]	; (8000f18 <_ZL19MX_USART3_UART_Initv+0x68>)
 8000eb8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000eba:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <_ZL19MX_USART3_UART_Initv+0x64>)
 8000ebc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ec0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ec2:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <_ZL19MX_USART3_UART_Initv+0x64>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <_ZL19MX_USART3_UART_Initv+0x64>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <_ZL19MX_USART3_UART_Initv+0x64>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <_ZL19MX_USART3_UART_Initv+0x64>)
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <_ZL19MX_USART3_UART_Initv+0x64>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <_ZL19MX_USART3_UART_Initv+0x64>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <_ZL19MX_USART3_UART_Initv+0x64>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <_ZL19MX_USART3_UART_Initv+0x64>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4807      	ldr	r0, [pc, #28]	; (8000f14 <_ZL19MX_USART3_UART_Initv+0x64>)
 8000ef8:	f001 fe90 	bl	8002c1c <HAL_MultiProcessor_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	bf14      	ite	ne
 8000f02:	2301      	movne	r3, #1
 8000f04:	2300      	moveq	r3, #0
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <_ZL19MX_USART3_UART_Initv+0x60>
  {
    Error_Handler();
 8000f0c:	f000 f8bc 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	2000008c 	.word	0x2000008c
 8000f18:	40004800 	.word	0x40004800

08000f1c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08c      	sub	sp, #48	; 0x30
 8000f20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f32:	4b50      	ldr	r3, [pc, #320]	; (8001074 <_ZL12MX_GPIO_Initv+0x158>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a4f      	ldr	r2, [pc, #316]	; (8001074 <_ZL12MX_GPIO_Initv+0x158>)
 8000f38:	f043 0310 	orr.w	r3, r3, #16
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b4d      	ldr	r3, [pc, #308]	; (8001074 <_ZL12MX_GPIO_Initv+0x158>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0310 	and.w	r3, r3, #16
 8000f46:	61bb      	str	r3, [r7, #24]
 8000f48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	4b4a      	ldr	r3, [pc, #296]	; (8001074 <_ZL12MX_GPIO_Initv+0x158>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a49      	ldr	r2, [pc, #292]	; (8001074 <_ZL12MX_GPIO_Initv+0x158>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b47      	ldr	r3, [pc, #284]	; (8001074 <_ZL12MX_GPIO_Initv+0x158>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f62:	4b44      	ldr	r3, [pc, #272]	; (8001074 <_ZL12MX_GPIO_Initv+0x158>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a43      	ldr	r2, [pc, #268]	; (8001074 <_ZL12MX_GPIO_Initv+0x158>)
 8000f68:	f043 0320 	orr.w	r3, r3, #32
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b41      	ldr	r3, [pc, #260]	; (8001074 <_ZL12MX_GPIO_Initv+0x158>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0320 	and.w	r3, r3, #32
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	4b3e      	ldr	r3, [pc, #248]	; (8001074 <_ZL12MX_GPIO_Initv+0x158>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a3d      	ldr	r2, [pc, #244]	; (8001074 <_ZL12MX_GPIO_Initv+0x158>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b3b      	ldr	r3, [pc, #236]	; (8001074 <_ZL12MX_GPIO_Initv+0x158>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f92:	4b38      	ldr	r3, [pc, #224]	; (8001074 <_ZL12MX_GPIO_Initv+0x158>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a37      	ldr	r2, [pc, #220]	; (8001074 <_ZL12MX_GPIO_Initv+0x158>)
 8000f98:	f043 0308 	orr.w	r3, r3, #8
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b35      	ldr	r3, [pc, #212]	; (8001074 <_ZL12MX_GPIO_Initv+0x158>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0308 	and.w	r3, r3, #8
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000faa:	4b32      	ldr	r3, [pc, #200]	; (8001074 <_ZL12MX_GPIO_Initv+0x158>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a31      	ldr	r2, [pc, #196]	; (8001074 <_ZL12MX_GPIO_Initv+0x158>)
 8000fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b2f      	ldr	r3, [pc, #188]	; (8001074 <_ZL12MX_GPIO_Initv+0x158>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	21a0      	movs	r1, #160	; 0xa0
 8000fc6:	482c      	ldr	r0, [pc, #176]	; (8001078 <_ZL12MX_GPIO_Initv+0x15c>)
 8000fc8:	f000 fc86 	bl	80018d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fd2:	482a      	ldr	r0, [pc, #168]	; (800107c <_ZL12MX_GPIO_Initv+0x160>)
 8000fd4:	f000 fc80 	bl	80018d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000fde:	4828      	ldr	r0, [pc, #160]	; (8001080 <_ZL12MX_GPIO_Initv+0x164>)
 8000fe0:	f000 fc7a 	bl	80018d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2104      	movs	r1, #4
 8000fe8:	4826      	ldr	r0, [pc, #152]	; (8001084 <_ZL12MX_GPIO_Initv+0x168>)
 8000fea:	f000 fc75 	bl	80018d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2108      	movs	r1, #8
 8000ff2:	4824      	ldr	r0, [pc, #144]	; (8001084 <_ZL12MX_GPIO_Initv+0x168>)
 8000ff4:	f000 fc70 	bl	80018d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ff8:	23a0      	movs	r3, #160	; 0xa0
 8000ffa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001004:	2303      	movs	r3, #3
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	4619      	mov	r1, r3
 800100e:	481a      	ldr	r0, [pc, #104]	; (8001078 <_ZL12MX_GPIO_Initv+0x15c>)
 8001010:	f000 fab8 	bl	8001584 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8001014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101a:	2301      	movs	r3, #1
 800101c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001022:	2303      	movs	r3, #3
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	4619      	mov	r1, r3
 800102c:	4813      	ldr	r0, [pc, #76]	; (800107c <_ZL12MX_GPIO_Initv+0x160>)
 800102e:	f000 faa9 	bl	8001584 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin BLUE_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|BLUE_LED_Pin;
 8001032:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001036:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001038:	2301      	movs	r3, #1
 800103a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001040:	2300      	movs	r3, #0
 8001042:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001044:	f107 031c 	add.w	r3, r7, #28
 8001048:	4619      	mov	r1, r3
 800104a:	480d      	ldr	r0, [pc, #52]	; (8001080 <_ZL12MX_GPIO_Initv+0x164>)
 800104c:	f000 fa9a 	bl	8001584 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin;
 8001050:	230c      	movs	r3, #12
 8001052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001054:	2301      	movs	r3, #1
 8001056:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001060:	f107 031c 	add.w	r3, r7, #28
 8001064:	4619      	mov	r1, r3
 8001066:	4807      	ldr	r0, [pc, #28]	; (8001084 <_ZL12MX_GPIO_Initv+0x168>)
 8001068:	f000 fa8c 	bl	8001584 <HAL_GPIO_Init>

}
 800106c:	bf00      	nop
 800106e:	3730      	adds	r7, #48	; 0x30
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40023800 	.word	0x40023800
 8001078:	40020000 	.word	0x40020000
 800107c:	40021400 	.word	0x40021400
 8001080:	40020400 	.word	0x40020400
 8001084:	40021800 	.word	0x40021800

08001088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800108c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800108e:	e7fe      	b.n	800108e <Error_Handler+0x6>

08001090 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001096:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <HAL_MspInit+0x44>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	4a0e      	ldr	r2, [pc, #56]	; (80010d4 <HAL_MspInit+0x44>)
 800109c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a0:	6413      	str	r3, [r2, #64]	; 0x40
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <HAL_MspInit+0x44>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <HAL_MspInit+0x44>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <HAL_MspInit+0x44>)
 80010b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_MspInit+0x44>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800

080010d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a17      	ldr	r2, [pc, #92]	; (8001154 <HAL_SPI_MspInit+0x7c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d127      	bne.n	800114a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80010fa:	4b17      	ldr	r3, [pc, #92]	; (8001158 <HAL_SPI_MspInit+0x80>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	4a16      	ldr	r2, [pc, #88]	; (8001158 <HAL_SPI_MspInit+0x80>)
 8001100:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001104:	6453      	str	r3, [r2, #68]	; 0x44
 8001106:	4b14      	ldr	r3, [pc, #80]	; (8001158 <HAL_SPI_MspInit+0x80>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <HAL_SPI_MspInit+0x80>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a10      	ldr	r2, [pc, #64]	; (8001158 <HAL_SPI_MspInit+0x80>)
 8001118:	f043 0310 	orr.w	r3, r3, #16
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <HAL_SPI_MspInit+0x80>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0310 	and.w	r3, r3, #16
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 800112a:	2344      	movs	r3, #68	; 0x44
 800112c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001136:	2303      	movs	r3, #3
 8001138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800113a:	2305      	movs	r3, #5
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	4619      	mov	r1, r3
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <HAL_SPI_MspInit+0x84>)
 8001146:	f000 fa1d 	bl	8001584 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800114a:	bf00      	nop
 800114c:	3728      	adds	r7, #40	; 0x28
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40013400 	.word	0x40013400
 8001158:	40023800 	.word	0x40023800
 800115c:	40021000 	.word	0x40021000

08001160 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a17      	ldr	r2, [pc, #92]	; (80011dc <HAL_UART_MspInit+0x7c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d128      	bne.n	80011d4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001182:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <HAL_UART_MspInit+0x80>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	4a16      	ldr	r2, [pc, #88]	; (80011e0 <HAL_UART_MspInit+0x80>)
 8001188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800118c:	6413      	str	r3, [r2, #64]	; 0x40
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <HAL_UART_MspInit+0x80>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <HAL_UART_MspInit+0x80>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a10      	ldr	r2, [pc, #64]	; (80011e0 <HAL_UART_MspInit+0x80>)
 80011a0:	f043 0308 	orr.w	r3, r3, #8
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <HAL_UART_MspInit+0x80>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011b8:	2312      	movs	r3, #18
 80011ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011c4:	2307      	movs	r3, #7
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4619      	mov	r1, r3
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <HAL_UART_MspInit+0x84>)
 80011d0:	f000 f9d8 	bl	8001584 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011d4:	bf00      	nop
 80011d6:	3728      	adds	r7, #40	; 0x28
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40004800 	.word	0x40004800
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40020c00 	.word	0x40020c00

080011e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <NMI_Handler+0x4>

080011ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f2:	e7fe      	b.n	80011f2 <HardFault_Handler+0x4>

080011f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <MemManage_Handler+0x4>

080011fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <BusFault_Handler+0x4>

08001200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <UsageFault_Handler+0x4>

08001206 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001234:	f000 f87e 	bl	8001334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}

0800123c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <SystemInit+0x28>)
 8001242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001246:	4a07      	ldr	r2, [pc, #28]	; (8001264 <SystemInit+0x28>)
 8001248:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800124c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <SystemInit+0x28>)
 8001252:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001256:	609a      	str	r2, [r3, #8]
#endif
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001268:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800126c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800126e:	e003      	b.n	8001278 <LoopCopyDataInit>

08001270 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001272:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001274:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001276:	3104      	adds	r1, #4

08001278 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001278:	480b      	ldr	r0, [pc, #44]	; (80012a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800127c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800127e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001280:	d3f6      	bcc.n	8001270 <CopyDataInit>
  ldr  r2, =_sbss
 8001282:	4a0b      	ldr	r2, [pc, #44]	; (80012b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001284:	e002      	b.n	800128c <LoopFillZerobss>

08001286 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001286:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001288:	f842 3b04 	str.w	r3, [r2], #4

0800128c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800128e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001290:	d3f9      	bcc.n	8001286 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001292:	f7ff ffd3 	bl	800123c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001296:	f002 f937 	bl	8003508 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800129a:	f7ff fccd 	bl	8000c38 <main>
  bx  lr    
 800129e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012a0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80012a4:	080035a0 	.word	0x080035a0
  ldr  r0, =_sdata
 80012a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012ac:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80012b0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80012b4:	20000110 	.word	0x20000110

080012b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012b8:	e7fe      	b.n	80012b8 <ADC_IRQHandler>

080012ba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012be:	2003      	movs	r0, #3
 80012c0:	f000 f92c 	bl	800151c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012c4:	2000      	movs	r0, #0
 80012c6:	f000 f805 	bl	80012d4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80012ca:	f7ff fee1 	bl	8001090 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HAL_InitTick+0x54>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_InitTick+0x58>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	4619      	mov	r1, r3
 80012e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f939 	bl	800156a <HAL_SYSTICK_Config>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e00e      	b.n	8001320 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b0f      	cmp	r3, #15
 8001306:	d80a      	bhi.n	800131e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001308:	2200      	movs	r2, #0
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f000 f90f 	bl	8001532 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001314:	4a06      	ldr	r2, [pc, #24]	; (8001330 <HAL_InitTick+0x5c>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	e000      	b.n	8001320 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
}
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000000 	.word	0x20000000
 800132c:	20000008 	.word	0x20000008
 8001330:	20000004 	.word	0x20000004

08001334 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_IncTick+0x20>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_IncTick+0x24>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4413      	add	r3, r2
 8001344:	4a04      	ldr	r2, [pc, #16]	; (8001358 <HAL_IncTick+0x24>)
 8001346:	6013      	str	r3, [r2, #0]
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	20000008 	.word	0x20000008
 8001358:	2000010c 	.word	0x2000010c

0800135c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return uwTick;
 8001360:	4b03      	ldr	r3, [pc, #12]	; (8001370 <HAL_GetTick+0x14>)
 8001362:	681b      	ldr	r3, [r3, #0]
}
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	2000010c 	.word	0x2000010c

08001374 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800137c:	f7ff ffee 	bl	800135c <HAL_GetTick>
 8001380:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800138c:	d005      	beq.n	800139a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <HAL_Delay+0x40>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4413      	add	r3, r2
 8001398:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800139a:	bf00      	nop
 800139c:	f7ff ffde 	bl	800135c <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d8f7      	bhi.n	800139c <HAL_Delay+0x28>
  {
  }
}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000008 	.word	0x20000008

080013b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <__NVIC_SetPriorityGrouping+0x40>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d4:	4013      	ands	r3, r2
 80013d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <__NVIC_SetPriorityGrouping+0x44>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e6:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <__NVIC_SetPriorityGrouping+0x40>)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	60d3      	str	r3, [r2, #12]
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000ed00 	.word	0xe000ed00
 80013fc:	05fa0000 	.word	0x05fa0000

08001400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <__NVIC_GetPriorityGrouping+0x18>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	0a1b      	lsrs	r3, r3, #8
 800140a:	f003 0307 	and.w	r3, r3, #7
}
 800140e:	4618      	mov	r0, r3
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	6039      	str	r1, [r7, #0]
 8001426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142c:	2b00      	cmp	r3, #0
 800142e:	db0a      	blt.n	8001446 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	b2da      	uxtb	r2, r3
 8001434:	490c      	ldr	r1, [pc, #48]	; (8001468 <__NVIC_SetPriority+0x4c>)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	0112      	lsls	r2, r2, #4
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	440b      	add	r3, r1
 8001440:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001444:	e00a      	b.n	800145c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4908      	ldr	r1, [pc, #32]	; (800146c <__NVIC_SetPriority+0x50>)
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	3b04      	subs	r3, #4
 8001454:	0112      	lsls	r2, r2, #4
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	440b      	add	r3, r1
 800145a:	761a      	strb	r2, [r3, #24]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000e100 	.word	0xe000e100
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001470:	b480      	push	{r7}
 8001472:	b089      	sub	sp, #36	; 0x24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f1c3 0307 	rsb	r3, r3, #7
 800148a:	2b04      	cmp	r3, #4
 800148c:	bf28      	it	cs
 800148e:	2304      	movcs	r3, #4
 8001490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3304      	adds	r3, #4
 8001496:	2b06      	cmp	r3, #6
 8001498:	d902      	bls.n	80014a0 <NVIC_EncodePriority+0x30>
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3b03      	subs	r3, #3
 800149e:	e000      	b.n	80014a2 <NVIC_EncodePriority+0x32>
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a4:	f04f 32ff 	mov.w	r2, #4294967295
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43da      	mvns	r2, r3
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	401a      	ands	r2, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b8:	f04f 31ff 	mov.w	r1, #4294967295
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	fa01 f303 	lsl.w	r3, r1, r3
 80014c2:	43d9      	mvns	r1, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	4313      	orrs	r3, r2
         );
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3724      	adds	r7, #36	; 0x24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014e8:	d301      	bcc.n	80014ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00f      	b.n	800150e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ee:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <SysTick_Config+0x40>)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014f6:	210f      	movs	r1, #15
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295
 80014fc:	f7ff ff8e 	bl	800141c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <SysTick_Config+0x40>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001506:	4b04      	ldr	r3, [pc, #16]	; (8001518 <SysTick_Config+0x40>)
 8001508:	2207      	movs	r2, #7
 800150a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	e000e010 	.word	0xe000e010

0800151c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff ff47 	bl	80013b8 <__NVIC_SetPriorityGrouping>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001532:	b580      	push	{r7, lr}
 8001534:	b086      	sub	sp, #24
 8001536:	af00      	add	r7, sp, #0
 8001538:	4603      	mov	r3, r0
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
 800153e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001544:	f7ff ff5c 	bl	8001400 <__NVIC_GetPriorityGrouping>
 8001548:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	6978      	ldr	r0, [r7, #20]
 8001550:	f7ff ff8e 	bl	8001470 <NVIC_EncodePriority>
 8001554:	4602      	mov	r2, r0
 8001556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155a:	4611      	mov	r1, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff5d 	bl	800141c <__NVIC_SetPriority>
}
 8001562:	bf00      	nop
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff ffb0 	bl	80014d8 <SysTick_Config>
 8001578:	4603      	mov	r3, r0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001584:	b480      	push	{r7}
 8001586:	b089      	sub	sp, #36	; 0x24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
 80015a2:	e175      	b.n	8001890 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80015a4:	2201      	movs	r2, #1
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	4013      	ands	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	429a      	cmp	r2, r3
 80015be:	f040 8164 	bne.w	800188a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d00b      	beq.n	80015e2 <HAL_GPIO_Init+0x5e>
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d007      	beq.n	80015e2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015d6:	2b11      	cmp	r3, #17
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b12      	cmp	r3, #18
 80015e0:	d130      	bne.n	8001644 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	2203      	movs	r2, #3
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4013      	ands	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	68da      	ldr	r2, [r3, #12]
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4313      	orrs	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001618:	2201      	movs	r2, #1
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	091b      	lsrs	r3, r3, #4
 800162e:	f003 0201 	and.w	r2, r3, #1
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	2203      	movs	r2, #3
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d003      	beq.n	8001684 <HAL_GPIO_Init+0x100>
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b12      	cmp	r3, #18
 8001682:	d123      	bne.n	80016cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	08da      	lsrs	r2, r3, #3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3208      	adds	r2, #8
 800168c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	f003 0307 	and.w	r3, r3, #7
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	220f      	movs	r2, #15
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	691a      	ldr	r2, [r3, #16]
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	08da      	lsrs	r2, r3, #3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	3208      	adds	r2, #8
 80016c6:	69b9      	ldr	r1, [r7, #24]
 80016c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	2203      	movs	r2, #3
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 0203 	and.w	r2, r3, #3
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	f000 80be 	beq.w	800188a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170e:	4b65      	ldr	r3, [pc, #404]	; (80018a4 <HAL_GPIO_Init+0x320>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	4a64      	ldr	r2, [pc, #400]	; (80018a4 <HAL_GPIO_Init+0x320>)
 8001714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001718:	6453      	str	r3, [r2, #68]	; 0x44
 800171a:	4b62      	ldr	r3, [pc, #392]	; (80018a4 <HAL_GPIO_Init+0x320>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001726:	4a60      	ldr	r2, [pc, #384]	; (80018a8 <HAL_GPIO_Init+0x324>)
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	089b      	lsrs	r3, r3, #2
 800172c:	3302      	adds	r3, #2
 800172e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f003 0303 	and.w	r3, r3, #3
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	220f      	movs	r2, #15
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4013      	ands	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a57      	ldr	r2, [pc, #348]	; (80018ac <HAL_GPIO_Init+0x328>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d037      	beq.n	80017c2 <HAL_GPIO_Init+0x23e>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a56      	ldr	r2, [pc, #344]	; (80018b0 <HAL_GPIO_Init+0x32c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d031      	beq.n	80017be <HAL_GPIO_Init+0x23a>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a55      	ldr	r2, [pc, #340]	; (80018b4 <HAL_GPIO_Init+0x330>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d02b      	beq.n	80017ba <HAL_GPIO_Init+0x236>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a54      	ldr	r2, [pc, #336]	; (80018b8 <HAL_GPIO_Init+0x334>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d025      	beq.n	80017b6 <HAL_GPIO_Init+0x232>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a53      	ldr	r2, [pc, #332]	; (80018bc <HAL_GPIO_Init+0x338>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d01f      	beq.n	80017b2 <HAL_GPIO_Init+0x22e>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a52      	ldr	r2, [pc, #328]	; (80018c0 <HAL_GPIO_Init+0x33c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d019      	beq.n	80017ae <HAL_GPIO_Init+0x22a>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a51      	ldr	r2, [pc, #324]	; (80018c4 <HAL_GPIO_Init+0x340>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d013      	beq.n	80017aa <HAL_GPIO_Init+0x226>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a50      	ldr	r2, [pc, #320]	; (80018c8 <HAL_GPIO_Init+0x344>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d00d      	beq.n	80017a6 <HAL_GPIO_Init+0x222>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a4f      	ldr	r2, [pc, #316]	; (80018cc <HAL_GPIO_Init+0x348>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d007      	beq.n	80017a2 <HAL_GPIO_Init+0x21e>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a4e      	ldr	r2, [pc, #312]	; (80018d0 <HAL_GPIO_Init+0x34c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d101      	bne.n	800179e <HAL_GPIO_Init+0x21a>
 800179a:	2309      	movs	r3, #9
 800179c:	e012      	b.n	80017c4 <HAL_GPIO_Init+0x240>
 800179e:	230a      	movs	r3, #10
 80017a0:	e010      	b.n	80017c4 <HAL_GPIO_Init+0x240>
 80017a2:	2308      	movs	r3, #8
 80017a4:	e00e      	b.n	80017c4 <HAL_GPIO_Init+0x240>
 80017a6:	2307      	movs	r3, #7
 80017a8:	e00c      	b.n	80017c4 <HAL_GPIO_Init+0x240>
 80017aa:	2306      	movs	r3, #6
 80017ac:	e00a      	b.n	80017c4 <HAL_GPIO_Init+0x240>
 80017ae:	2305      	movs	r3, #5
 80017b0:	e008      	b.n	80017c4 <HAL_GPIO_Init+0x240>
 80017b2:	2304      	movs	r3, #4
 80017b4:	e006      	b.n	80017c4 <HAL_GPIO_Init+0x240>
 80017b6:	2303      	movs	r3, #3
 80017b8:	e004      	b.n	80017c4 <HAL_GPIO_Init+0x240>
 80017ba:	2302      	movs	r3, #2
 80017bc:	e002      	b.n	80017c4 <HAL_GPIO_Init+0x240>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <HAL_GPIO_Init+0x240>
 80017c2:	2300      	movs	r3, #0
 80017c4:	69fa      	ldr	r2, [r7, #28]
 80017c6:	f002 0203 	and.w	r2, r2, #3
 80017ca:	0092      	lsls	r2, r2, #2
 80017cc:	4093      	lsls	r3, r2
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80017d4:	4934      	ldr	r1, [pc, #208]	; (80018a8 <HAL_GPIO_Init+0x324>)
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	089b      	lsrs	r3, r3, #2
 80017da:	3302      	adds	r3, #2
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017e2:	4b3c      	ldr	r3, [pc, #240]	; (80018d4 <HAL_GPIO_Init+0x350>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	43db      	mvns	r3, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4013      	ands	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001806:	4a33      	ldr	r2, [pc, #204]	; (80018d4 <HAL_GPIO_Init+0x350>)
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800180c:	4b31      	ldr	r3, [pc, #196]	; (80018d4 <HAL_GPIO_Init+0x350>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001830:	4a28      	ldr	r2, [pc, #160]	; (80018d4 <HAL_GPIO_Init+0x350>)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001836:	4b27      	ldr	r3, [pc, #156]	; (80018d4 <HAL_GPIO_Init+0x350>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	43db      	mvns	r3, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4013      	ands	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	4313      	orrs	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800185a:	4a1e      	ldr	r2, [pc, #120]	; (80018d4 <HAL_GPIO_Init+0x350>)
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001860:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <HAL_GPIO_Init+0x350>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d003      	beq.n	8001884 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001884:	4a13      	ldr	r2, [pc, #76]	; (80018d4 <HAL_GPIO_Init+0x350>)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3301      	adds	r3, #1
 800188e:	61fb      	str	r3, [r7, #28]
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	2b0f      	cmp	r3, #15
 8001894:	f67f ae86 	bls.w	80015a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001898:	bf00      	nop
 800189a:	3724      	adds	r7, #36	; 0x24
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40013800 	.word	0x40013800
 80018ac:	40020000 	.word	0x40020000
 80018b0:	40020400 	.word	0x40020400
 80018b4:	40020800 	.word	0x40020800
 80018b8:	40020c00 	.word	0x40020c00
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40021400 	.word	0x40021400
 80018c4:	40021800 	.word	0x40021800
 80018c8:	40021c00 	.word	0x40021c00
 80018cc:	40022000 	.word	0x40022000
 80018d0:	40022400 	.word	0x40022400
 80018d4:	40013c00 	.word	0x40013c00

080018d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	807b      	strh	r3, [r7, #2]
 80018e4:	4613      	mov	r3, r2
 80018e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018e8:	787b      	ldrb	r3, [r7, #1]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ee:	887a      	ldrh	r2, [r7, #2]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80018f4:	e003      	b.n	80018fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80018f6:	887b      	ldrh	r3, [r7, #2]
 80018f8:	041a      	lsls	r2, r3, #16
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	619a      	str	r2, [r3, #24]
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
	...

0800190c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001916:	4b23      	ldr	r3, [pc, #140]	; (80019a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	4a22      	ldr	r2, [pc, #136]	; (80019a4 <HAL_PWREx_EnableOverDrive+0x98>)
 800191c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001920:	6413      	str	r3, [r2, #64]	; 0x40
 8001922:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192a:	603b      	str	r3, [r7, #0]
 800192c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800192e:	4b1e      	ldr	r3, [pc, #120]	; (80019a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a1d      	ldr	r2, [pc, #116]	; (80019a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001938:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800193a:	f7ff fd0f 	bl	800135c <HAL_GetTick>
 800193e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001940:	e009      	b.n	8001956 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001942:	f7ff fd0b 	bl	800135c <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001950:	d901      	bls.n	8001956 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e022      	b.n	800199c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001956:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800195e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001962:	d1ee      	bne.n	8001942 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001964:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0f      	ldr	r2, [pc, #60]	; (80019a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800196a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800196e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001970:	f7ff fcf4 	bl	800135c <HAL_GetTick>
 8001974:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001976:	e009      	b.n	800198c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001978:	f7ff fcf0 	bl	800135c <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001986:	d901      	bls.n	800198c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e007      	b.n	800199c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001994:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001998:	d1ee      	bne.n	8001978 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40007000 	.word	0x40007000

080019ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80019b4:	2300      	movs	r3, #0
 80019b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e29b      	b.n	8001efa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 8087 	beq.w	8001ade <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019d0:	4b96      	ldr	r3, [pc, #600]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 030c 	and.w	r3, r3, #12
 80019d8:	2b04      	cmp	r3, #4
 80019da:	d00c      	beq.n	80019f6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019dc:	4b93      	ldr	r3, [pc, #588]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 030c 	and.w	r3, r3, #12
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	d112      	bne.n	8001a0e <HAL_RCC_OscConfig+0x62>
 80019e8:	4b90      	ldr	r3, [pc, #576]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019f4:	d10b      	bne.n	8001a0e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f6:	4b8d      	ldr	r3, [pc, #564]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d06c      	beq.n	8001adc <HAL_RCC_OscConfig+0x130>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d168      	bne.n	8001adc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e275      	b.n	8001efa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a16:	d106      	bne.n	8001a26 <HAL_RCC_OscConfig+0x7a>
 8001a18:	4b84      	ldr	r3, [pc, #528]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a83      	ldr	r2, [pc, #524]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	e02e      	b.n	8001a84 <HAL_RCC_OscConfig+0xd8>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10c      	bne.n	8001a48 <HAL_RCC_OscConfig+0x9c>
 8001a2e:	4b7f      	ldr	r3, [pc, #508]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a7e      	ldr	r2, [pc, #504]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001a34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	4b7c      	ldr	r3, [pc, #496]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a7b      	ldr	r2, [pc, #492]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001a40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	e01d      	b.n	8001a84 <HAL_RCC_OscConfig+0xd8>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a50:	d10c      	bne.n	8001a6c <HAL_RCC_OscConfig+0xc0>
 8001a52:	4b76      	ldr	r3, [pc, #472]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a75      	ldr	r2, [pc, #468]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	4b73      	ldr	r3, [pc, #460]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a72      	ldr	r2, [pc, #456]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	e00b      	b.n	8001a84 <HAL_RCC_OscConfig+0xd8>
 8001a6c:	4b6f      	ldr	r3, [pc, #444]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a6e      	ldr	r2, [pc, #440]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	4b6c      	ldr	r3, [pc, #432]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a6b      	ldr	r2, [pc, #428]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d013      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8c:	f7ff fc66 	bl	800135c <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a94:	f7ff fc62 	bl	800135c <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b64      	cmp	r3, #100	; 0x64
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e229      	b.n	8001efa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa6:	4b61      	ldr	r3, [pc, #388]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0xe8>
 8001ab2:	e014      	b.n	8001ade <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab4:	f7ff fc52 	bl	800135c <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001abc:	f7ff fc4e 	bl	800135c <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b64      	cmp	r3, #100	; 0x64
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e215      	b.n	8001efa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ace:	4b57      	ldr	r3, [pc, #348]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x110>
 8001ada:	e000      	b.n	8001ade <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d069      	beq.n	8001bbe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aea:	4b50      	ldr	r3, [pc, #320]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00b      	beq.n	8001b0e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001af6:	4b4d      	ldr	r3, [pc, #308]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 030c 	and.w	r3, r3, #12
 8001afe:	2b08      	cmp	r3, #8
 8001b00:	d11c      	bne.n	8001b3c <HAL_RCC_OscConfig+0x190>
 8001b02:	4b4a      	ldr	r3, [pc, #296]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d116      	bne.n	8001b3c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b0e:	4b47      	ldr	r3, [pc, #284]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d005      	beq.n	8001b26 <HAL_RCC_OscConfig+0x17a>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d001      	beq.n	8001b26 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e1e9      	b.n	8001efa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b26:	4b41      	ldr	r3, [pc, #260]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	493d      	ldr	r1, [pc, #244]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3a:	e040      	b.n	8001bbe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d023      	beq.n	8001b8c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b44:	4b39      	ldr	r3, [pc, #228]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a38      	ldr	r2, [pc, #224]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b50:	f7ff fc04 	bl	800135c <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b58:	f7ff fc00 	bl	800135c <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e1c7      	b.n	8001efa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6a:	4b30      	ldr	r3, [pc, #192]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b76:	4b2d      	ldr	r3, [pc, #180]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	4929      	ldr	r1, [pc, #164]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]
 8001b8a:	e018      	b.n	8001bbe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b8c:	4b27      	ldr	r3, [pc, #156]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a26      	ldr	r2, [pc, #152]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001b92:	f023 0301 	bic.w	r3, r3, #1
 8001b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b98:	f7ff fbe0 	bl	800135c <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba0:	f7ff fbdc 	bl	800135c <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e1a3      	b.n	8001efa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb2:	4b1e      	ldr	r3, [pc, #120]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d038      	beq.n	8001c3c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d019      	beq.n	8001c06 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bd2:	4b16      	ldr	r3, [pc, #88]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bd6:	4a15      	ldr	r2, [pc, #84]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bde:	f7ff fbbd 	bl	800135c <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be6:	f7ff fbb9 	bl	800135c <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e180      	b.n	8001efa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0f0      	beq.n	8001be6 <HAL_RCC_OscConfig+0x23a>
 8001c04:	e01a      	b.n	8001c3c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c06:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c0a:	4a08      	ldr	r2, [pc, #32]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001c0c:	f023 0301 	bic.w	r3, r3, #1
 8001c10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c12:	f7ff fba3 	bl	800135c <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c18:	e00a      	b.n	8001c30 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c1a:	f7ff fb9f 	bl	800135c <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d903      	bls.n	8001c30 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e166      	b.n	8001efa <HAL_RCC_OscConfig+0x54e>
 8001c2c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c30:	4b92      	ldr	r3, [pc, #584]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1ee      	bne.n	8001c1a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f000 80a4 	beq.w	8001d92 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c4a:	4b8c      	ldr	r3, [pc, #560]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10d      	bne.n	8001c72 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c56:	4b89      	ldr	r3, [pc, #548]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	4a88      	ldr	r2, [pc, #544]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c60:	6413      	str	r3, [r2, #64]	; 0x40
 8001c62:	4b86      	ldr	r3, [pc, #536]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c72:	4b83      	ldr	r3, [pc, #524]	; (8001e80 <HAL_RCC_OscConfig+0x4d4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d118      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001c7e:	4b80      	ldr	r3, [pc, #512]	; (8001e80 <HAL_RCC_OscConfig+0x4d4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a7f      	ldr	r2, [pc, #508]	; (8001e80 <HAL_RCC_OscConfig+0x4d4>)
 8001c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c8a:	f7ff fb67 	bl	800135c <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c92:	f7ff fb63 	bl	800135c <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b64      	cmp	r3, #100	; 0x64
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e12a      	b.n	8001efa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ca4:	4b76      	ldr	r3, [pc, #472]	; (8001e80 <HAL_RCC_OscConfig+0x4d4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0f0      	beq.n	8001c92 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d106      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x31a>
 8001cb8:	4b70      	ldr	r3, [pc, #448]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbc:	4a6f      	ldr	r2, [pc, #444]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc4:	e02d      	b.n	8001d22 <HAL_RCC_OscConfig+0x376>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x33c>
 8001cce:	4b6b      	ldr	r3, [pc, #428]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd2:	4a6a      	ldr	r2, [pc, #424]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001cd4:	f023 0301 	bic.w	r3, r3, #1
 8001cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cda:	4b68      	ldr	r3, [pc, #416]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cde:	4a67      	ldr	r2, [pc, #412]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001ce0:	f023 0304 	bic.w	r3, r3, #4
 8001ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce6:	e01c      	b.n	8001d22 <HAL_RCC_OscConfig+0x376>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	2b05      	cmp	r3, #5
 8001cee:	d10c      	bne.n	8001d0a <HAL_RCC_OscConfig+0x35e>
 8001cf0:	4b62      	ldr	r3, [pc, #392]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf4:	4a61      	ldr	r2, [pc, #388]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001cf6:	f043 0304 	orr.w	r3, r3, #4
 8001cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8001cfc:	4b5f      	ldr	r3, [pc, #380]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d00:	4a5e      	ldr	r2, [pc, #376]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	6713      	str	r3, [r2, #112]	; 0x70
 8001d08:	e00b      	b.n	8001d22 <HAL_RCC_OscConfig+0x376>
 8001d0a:	4b5c      	ldr	r3, [pc, #368]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0e:	4a5b      	ldr	r2, [pc, #364]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001d10:	f023 0301 	bic.w	r3, r3, #1
 8001d14:	6713      	str	r3, [r2, #112]	; 0x70
 8001d16:	4b59      	ldr	r3, [pc, #356]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1a:	4a58      	ldr	r2, [pc, #352]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001d1c:	f023 0304 	bic.w	r3, r3, #4
 8001d20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d015      	beq.n	8001d56 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2a:	f7ff fb17 	bl	800135c <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d30:	e00a      	b.n	8001d48 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d32:	f7ff fb13 	bl	800135c <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e0d8      	b.n	8001efa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d48:	4b4c      	ldr	r3, [pc, #304]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0ee      	beq.n	8001d32 <HAL_RCC_OscConfig+0x386>
 8001d54:	e014      	b.n	8001d80 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d56:	f7ff fb01 	bl	800135c <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d5c:	e00a      	b.n	8001d74 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5e:	f7ff fafd 	bl	800135c <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e0c2      	b.n	8001efa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d74:	4b41      	ldr	r3, [pc, #260]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1ee      	bne.n	8001d5e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d80:	7dfb      	ldrb	r3, [r7, #23]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d105      	bne.n	8001d92 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d86:	4b3d      	ldr	r3, [pc, #244]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	4a3c      	ldr	r2, [pc, #240]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 80ae 	beq.w	8001ef8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d9c:	4b37      	ldr	r3, [pc, #220]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 030c 	and.w	r3, r3, #12
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d06d      	beq.n	8001e84 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d14b      	bne.n	8001e48 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db0:	4b32      	ldr	r3, [pc, #200]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a31      	ldr	r2, [pc, #196]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001db6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbc:	f7ff face 	bl	800135c <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc4:	f7ff faca 	bl	800135c <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e091      	b.n	8001efa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd6:	4b29      	ldr	r3, [pc, #164]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69da      	ldr	r2, [r3, #28]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	019b      	lsls	r3, r3, #6
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df8:	085b      	lsrs	r3, r3, #1
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	041b      	lsls	r3, r3, #16
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	061b      	lsls	r3, r3, #24
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	071b      	lsls	r3, r3, #28
 8001e0e:	491b      	ldr	r1, [pc, #108]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e14:	4b19      	ldr	r3, [pc, #100]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a18      	ldr	r2, [pc, #96]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001e1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e20:	f7ff fa9c 	bl	800135c <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e28:	f7ff fa98 	bl	800135c <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e05f      	b.n	8001efa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e3a:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f0      	beq.n	8001e28 <HAL_RCC_OscConfig+0x47c>
 8001e46:	e057      	b.n	8001ef8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e48:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a0b      	ldr	r2, [pc, #44]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001e4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e54:	f7ff fa82 	bl	800135c <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5c:	f7ff fa7e 	bl	800135c <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e045      	b.n	8001efa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e6e:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <HAL_RCC_OscConfig+0x4d0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_OscConfig+0x4b0>
 8001e7a:	e03d      	b.n	8001ef8 <HAL_RCC_OscConfig+0x54c>
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001e84:	4b1f      	ldr	r3, [pc, #124]	; (8001f04 <HAL_RCC_OscConfig+0x558>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d030      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d129      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d122      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001eba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d119      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eca:	085b      	lsrs	r3, r3, #1
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d10f      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ede:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d107      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d001      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800

08001f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0d0      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f20:	4b6a      	ldr	r3, [pc, #424]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 030f 	and.w	r3, r3, #15
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d910      	bls.n	8001f50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2e:	4b67      	ldr	r3, [pc, #412]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 020f 	bic.w	r2, r3, #15
 8001f36:	4965      	ldr	r1, [pc, #404]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3e:	4b63      	ldr	r3, [pc, #396]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0b8      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d020      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f68:	4b59      	ldr	r3, [pc, #356]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	4a58      	ldr	r2, [pc, #352]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0308 	and.w	r3, r3, #8
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f80:	4b53      	ldr	r3, [pc, #332]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	4a52      	ldr	r2, [pc, #328]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f8c:	4b50      	ldr	r3, [pc, #320]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	494d      	ldr	r1, [pc, #308]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d040      	beq.n	800202c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d107      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb2:	4b47      	ldr	r3, [pc, #284]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d115      	bne.n	8001fea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e07f      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d107      	bne.n	8001fda <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fca:	4b41      	ldr	r3, [pc, #260]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d109      	bne.n	8001fea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e073      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fda:	4b3d      	ldr	r3, [pc, #244]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e06b      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fea:	4b39      	ldr	r3, [pc, #228]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f023 0203 	bic.w	r2, r3, #3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	4936      	ldr	r1, [pc, #216]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ffc:	f7ff f9ae 	bl	800135c <HAL_GetTick>
 8002000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002002:	e00a      	b.n	800201a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002004:	f7ff f9aa 	bl	800135c <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002012:	4293      	cmp	r3, r2
 8002014:	d901      	bls.n	800201a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e053      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201a:	4b2d      	ldr	r3, [pc, #180]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 020c 	and.w	r2, r3, #12
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	429a      	cmp	r2, r3
 800202a:	d1eb      	bne.n	8002004 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800202c:	4b27      	ldr	r3, [pc, #156]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 030f 	and.w	r3, r3, #15
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d210      	bcs.n	800205c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203a:	4b24      	ldr	r3, [pc, #144]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 020f 	bic.w	r2, r3, #15
 8002042:	4922      	ldr	r1, [pc, #136]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800204a:	4b20      	ldr	r3, [pc, #128]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d001      	beq.n	800205c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e032      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	d008      	beq.n	800207a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002068:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	4916      	ldr	r1, [pc, #88]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002076:	4313      	orrs	r3, r2
 8002078:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d009      	beq.n	800209a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002086:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	490e      	ldr	r1, [pc, #56]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002096:	4313      	orrs	r3, r2
 8002098:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800209a:	f000 f821 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 800209e:	4601      	mov	r1, r0
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	091b      	lsrs	r3, r3, #4
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	4a0a      	ldr	r2, [pc, #40]	; (80020d4 <HAL_RCC_ClockConfig+0x1cc>)
 80020ac:	5cd3      	ldrb	r3, [r2, r3]
 80020ae:	fa21 f303 	lsr.w	r3, r1, r3
 80020b2:	4a09      	ldr	r2, [pc, #36]	; (80020d8 <HAL_RCC_ClockConfig+0x1d0>)
 80020b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020b6:	4b09      	ldr	r3, [pc, #36]	; (80020dc <HAL_RCC_ClockConfig+0x1d4>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff f90a 	bl	80012d4 <HAL_InitTick>

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40023c00 	.word	0x40023c00
 80020d0:	40023800 	.word	0x40023800
 80020d4:	08003578 	.word	0x08003578
 80020d8:	20000000 	.word	0x20000000
 80020dc:	20000004 	.word	0x20000004

080020e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	607b      	str	r3, [r7, #4]
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	2300      	movs	r3, #0
 80020f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020f6:	4b50      	ldr	r3, [pc, #320]	; (8002238 <HAL_RCC_GetSysClockFreq+0x158>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d007      	beq.n	8002112 <HAL_RCC_GetSysClockFreq+0x32>
 8002102:	2b08      	cmp	r3, #8
 8002104:	d008      	beq.n	8002118 <HAL_RCC_GetSysClockFreq+0x38>
 8002106:	2b00      	cmp	r3, #0
 8002108:	f040 808d 	bne.w	8002226 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800210c:	4b4b      	ldr	r3, [pc, #300]	; (800223c <HAL_RCC_GetSysClockFreq+0x15c>)
 800210e:	60bb      	str	r3, [r7, #8]
      break;
 8002110:	e08c      	b.n	800222c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002112:	4b4b      	ldr	r3, [pc, #300]	; (8002240 <HAL_RCC_GetSysClockFreq+0x160>)
 8002114:	60bb      	str	r3, [r7, #8]
      break;
 8002116:	e089      	b.n	800222c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002118:	4b47      	ldr	r3, [pc, #284]	; (8002238 <HAL_RCC_GetSysClockFreq+0x158>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002120:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002122:	4b45      	ldr	r3, [pc, #276]	; (8002238 <HAL_RCC_GetSysClockFreq+0x158>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d023      	beq.n	8002176 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800212e:	4b42      	ldr	r3, [pc, #264]	; (8002238 <HAL_RCC_GetSysClockFreq+0x158>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	099b      	lsrs	r3, r3, #6
 8002134:	f04f 0400 	mov.w	r4, #0
 8002138:	f240 11ff 	movw	r1, #511	; 0x1ff
 800213c:	f04f 0200 	mov.w	r2, #0
 8002140:	ea03 0501 	and.w	r5, r3, r1
 8002144:	ea04 0602 	and.w	r6, r4, r2
 8002148:	4a3d      	ldr	r2, [pc, #244]	; (8002240 <HAL_RCC_GetSysClockFreq+0x160>)
 800214a:	fb02 f106 	mul.w	r1, r2, r6
 800214e:	2200      	movs	r2, #0
 8002150:	fb02 f205 	mul.w	r2, r2, r5
 8002154:	440a      	add	r2, r1
 8002156:	493a      	ldr	r1, [pc, #232]	; (8002240 <HAL_RCC_GetSysClockFreq+0x160>)
 8002158:	fba5 0101 	umull	r0, r1, r5, r1
 800215c:	1853      	adds	r3, r2, r1
 800215e:	4619      	mov	r1, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f04f 0400 	mov.w	r4, #0
 8002166:	461a      	mov	r2, r3
 8002168:	4623      	mov	r3, r4
 800216a:	f7fe f865 	bl	8000238 <__aeabi_uldivmod>
 800216e:	4603      	mov	r3, r0
 8002170:	460c      	mov	r4, r1
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	e049      	b.n	800220a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002176:	4b30      	ldr	r3, [pc, #192]	; (8002238 <HAL_RCC_GetSysClockFreq+0x158>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	099b      	lsrs	r3, r3, #6
 800217c:	f04f 0400 	mov.w	r4, #0
 8002180:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	ea03 0501 	and.w	r5, r3, r1
 800218c:	ea04 0602 	and.w	r6, r4, r2
 8002190:	4629      	mov	r1, r5
 8002192:	4632      	mov	r2, r6
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	f04f 0400 	mov.w	r4, #0
 800219c:	0154      	lsls	r4, r2, #5
 800219e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021a2:	014b      	lsls	r3, r1, #5
 80021a4:	4619      	mov	r1, r3
 80021a6:	4622      	mov	r2, r4
 80021a8:	1b49      	subs	r1, r1, r5
 80021aa:	eb62 0206 	sbc.w	r2, r2, r6
 80021ae:	f04f 0300 	mov.w	r3, #0
 80021b2:	f04f 0400 	mov.w	r4, #0
 80021b6:	0194      	lsls	r4, r2, #6
 80021b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021bc:	018b      	lsls	r3, r1, #6
 80021be:	1a5b      	subs	r3, r3, r1
 80021c0:	eb64 0402 	sbc.w	r4, r4, r2
 80021c4:	f04f 0100 	mov.w	r1, #0
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	00e2      	lsls	r2, r4, #3
 80021ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80021d2:	00d9      	lsls	r1, r3, #3
 80021d4:	460b      	mov	r3, r1
 80021d6:	4614      	mov	r4, r2
 80021d8:	195b      	adds	r3, r3, r5
 80021da:	eb44 0406 	adc.w	r4, r4, r6
 80021de:	f04f 0100 	mov.w	r1, #0
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	02a2      	lsls	r2, r4, #10
 80021e8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80021ec:	0299      	lsls	r1, r3, #10
 80021ee:	460b      	mov	r3, r1
 80021f0:	4614      	mov	r4, r2
 80021f2:	4618      	mov	r0, r3
 80021f4:	4621      	mov	r1, r4
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f04f 0400 	mov.w	r4, #0
 80021fc:	461a      	mov	r2, r3
 80021fe:	4623      	mov	r3, r4
 8002200:	f7fe f81a 	bl	8000238 <__aeabi_uldivmod>
 8002204:	4603      	mov	r3, r0
 8002206:	460c      	mov	r4, r1
 8002208:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800220a:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <HAL_RCC_GetSysClockFreq+0x158>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	0c1b      	lsrs	r3, r3, #16
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	3301      	adds	r3, #1
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002222:	60bb      	str	r3, [r7, #8]
      break;
 8002224:	e002      	b.n	800222c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002226:	4b05      	ldr	r3, [pc, #20]	; (800223c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002228:	60bb      	str	r3, [r7, #8]
      break;
 800222a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800222c:	68bb      	ldr	r3, [r7, #8]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002236:	bf00      	nop
 8002238:	40023800 	.word	0x40023800
 800223c:	00f42400 	.word	0x00f42400
 8002240:	017d7840 	.word	0x017d7840

08002244 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002248:	4b03      	ldr	r3, [pc, #12]	; (8002258 <HAL_RCC_GetHCLKFreq+0x14>)
 800224a:	681b      	ldr	r3, [r3, #0]
}
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	20000000 	.word	0x20000000

0800225c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002260:	f7ff fff0 	bl	8002244 <HAL_RCC_GetHCLKFreq>
 8002264:	4601      	mov	r1, r0
 8002266:	4b05      	ldr	r3, [pc, #20]	; (800227c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	0a9b      	lsrs	r3, r3, #10
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	4a03      	ldr	r2, [pc, #12]	; (8002280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002272:	5cd3      	ldrb	r3, [r2, r3]
 8002274:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002278:	4618      	mov	r0, r3
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40023800 	.word	0x40023800
 8002280:	08003588 	.word	0x08003588

08002284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002288:	f7ff ffdc 	bl	8002244 <HAL_RCC_GetHCLKFreq>
 800228c:	4601      	mov	r1, r0
 800228e:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	0b5b      	lsrs	r3, r3, #13
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	4a03      	ldr	r2, [pc, #12]	; (80022a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800229a:	5cd3      	ldrb	r3, [r2, r3]
 800229c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40023800 	.word	0x40023800
 80022a8:	08003588 	.word	0x08003588

080022ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d012      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022d4:	4b69      	ldr	r3, [pc, #420]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	4a68      	ldr	r2, [pc, #416]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022de:	6093      	str	r3, [r2, #8]
 80022e0:	4b66      	ldr	r3, [pc, #408]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e8:	4964      	ldr	r1, [pc, #400]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80022f6:	2301      	movs	r3, #1
 80022f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d017      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002306:	4b5d      	ldr	r3, [pc, #372]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800230c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002314:	4959      	ldr	r1, [pc, #356]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002316:	4313      	orrs	r3, r2
 8002318:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002320:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002324:	d101      	bne.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002326:	2301      	movs	r3, #1
 8002328:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002332:	2301      	movs	r3, #1
 8002334:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d017      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002342:	4b4e      	ldr	r3, [pc, #312]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002348:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002350:	494a      	ldr	r1, [pc, #296]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002360:	d101      	bne.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002362:	2301      	movs	r3, #1
 8002364:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800236e:	2301      	movs	r3, #1
 8002370:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800237e:	2301      	movs	r3, #1
 8002380:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0320 	and.w	r3, r3, #32
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 808b 	beq.w	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002390:	4b3a      	ldr	r3, [pc, #232]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	4a39      	ldr	r2, [pc, #228]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800239a:	6413      	str	r3, [r2, #64]	; 0x40
 800239c:	4b37      	ldr	r3, [pc, #220]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80023a8:	4b35      	ldr	r3, [pc, #212]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a34      	ldr	r2, [pc, #208]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023b4:	f7fe ffd2 	bl	800135c <HAL_GetTick>
 80023b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023bc:	f7fe ffce 	bl	800135c <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b64      	cmp	r3, #100	; 0x64
 80023c8:	d901      	bls.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e38d      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023ce:	4b2c      	ldr	r3, [pc, #176]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023da:	4b28      	ldr	r3, [pc, #160]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d035      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d02e      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023f8:	4b20      	ldr	r3, [pc, #128]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002400:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002402:	4b1e      	ldr	r3, [pc, #120]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002406:	4a1d      	ldr	r2, [pc, #116]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800240e:	4b1b      	ldr	r3, [pc, #108]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002412:	4a1a      	ldr	r2, [pc, #104]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002418:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800241a:	4a18      	ldr	r2, [pc, #96]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002420:	4b16      	ldr	r3, [pc, #88]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b01      	cmp	r3, #1
 800242a:	d114      	bne.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242c:	f7fe ff96 	bl	800135c <HAL_GetTick>
 8002430:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002432:	e00a      	b.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002434:	f7fe ff92 	bl	800135c <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002442:	4293      	cmp	r3, r2
 8002444:	d901      	bls.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e34f      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244a:	4b0c      	ldr	r3, [pc, #48]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800244c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0ee      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800245e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002462:	d111      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002464:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002470:	4b04      	ldr	r3, [pc, #16]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002472:	400b      	ands	r3, r1
 8002474:	4901      	ldr	r1, [pc, #4]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002476:	4313      	orrs	r3, r2
 8002478:	608b      	str	r3, [r1, #8]
 800247a:	e00b      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800247c:	40023800 	.word	0x40023800
 8002480:	40007000 	.word	0x40007000
 8002484:	0ffffcff 	.word	0x0ffffcff
 8002488:	4bb3      	ldr	r3, [pc, #716]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	4ab2      	ldr	r2, [pc, #712]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800248e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002492:	6093      	str	r3, [r2, #8]
 8002494:	4bb0      	ldr	r3, [pc, #704]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002496:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a0:	49ad      	ldr	r1, [pc, #692]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0310 	and.w	r3, r3, #16
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d010      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80024b2:	4ba9      	ldr	r3, [pc, #676]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024b8:	4aa7      	ldr	r2, [pc, #668]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80024c2:	4ba5      	ldr	r3, [pc, #660]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024cc:	49a2      	ldr	r1, [pc, #648]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00a      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024e0:	4b9d      	ldr	r3, [pc, #628]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024ee:	499a      	ldr	r1, [pc, #616]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00a      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002502:	4b95      	ldr	r3, [pc, #596]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002508:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002510:	4991      	ldr	r1, [pc, #580]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002512:	4313      	orrs	r3, r2
 8002514:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00a      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002524:	4b8c      	ldr	r3, [pc, #560]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002532:	4989      	ldr	r1, [pc, #548]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00a      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002546:	4b84      	ldr	r3, [pc, #528]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002554:	4980      	ldr	r1, [pc, #512]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002556:	4313      	orrs	r3, r2
 8002558:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00a      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002568:	4b7b      	ldr	r3, [pc, #492]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800256a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256e:	f023 0203 	bic.w	r2, r3, #3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002576:	4978      	ldr	r1, [pc, #480]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002578:	4313      	orrs	r3, r2
 800257a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00a      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800258a:	4b73      	ldr	r3, [pc, #460]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800258c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002590:	f023 020c 	bic.w	r2, r3, #12
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002598:	496f      	ldr	r1, [pc, #444]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800259a:	4313      	orrs	r3, r2
 800259c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00a      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025ac:	4b6a      	ldr	r3, [pc, #424]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ba:	4967      	ldr	r1, [pc, #412]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00a      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025ce:	4b62      	ldr	r3, [pc, #392]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025dc:	495e      	ldr	r1, [pc, #376]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00a      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025f0:	4b59      	ldr	r3, [pc, #356]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fe:	4956      	ldr	r1, [pc, #344]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002600:	4313      	orrs	r3, r2
 8002602:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00a      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002612:	4b51      	ldr	r3, [pc, #324]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002618:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002620:	494d      	ldr	r1, [pc, #308]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002622:	4313      	orrs	r3, r2
 8002624:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00a      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002634:	4b48      	ldr	r3, [pc, #288]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002642:	4945      	ldr	r1, [pc, #276]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00a      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002656:	4b40      	ldr	r3, [pc, #256]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002664:	493c      	ldr	r1, [pc, #240]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002666:	4313      	orrs	r3, r2
 8002668:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00a      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002678:	4b37      	ldr	r3, [pc, #220]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800267a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002686:	4934      	ldr	r1, [pc, #208]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002688:	4313      	orrs	r3, r2
 800268a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d011      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800269a:	4b2f      	ldr	r3, [pc, #188]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800269c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026a8:	492b      	ldr	r1, [pc, #172]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026b8:	d101      	bne.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80026ba:	2301      	movs	r3, #1
 80026bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80026ca:	2301      	movs	r3, #1
 80026cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00a      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026da:	4b1f      	ldr	r3, [pc, #124]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e8:	491b      	ldr	r1, [pc, #108]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00b      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026fc:	4b16      	ldr	r3, [pc, #88]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002702:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800270c:	4912      	ldr	r1, [pc, #72]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800270e:	4313      	orrs	r3, r2
 8002710:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00b      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002720:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002726:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002730:	4909      	ldr	r1, [pc, #36]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002732:	4313      	orrs	r3, r2
 8002734:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00f      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002744:	4b04      	ldr	r3, [pc, #16]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002746:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800274a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002754:	e002      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002756:	bf00      	nop
 8002758:	40023800 	.word	0x40023800
 800275c:	4985      	ldr	r1, [pc, #532]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800275e:	4313      	orrs	r3, r2
 8002760:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00b      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002770:	4b80      	ldr	r3, [pc, #512]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002776:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002780:	497c      	ldr	r1, [pc, #496]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002782:	4313      	orrs	r3, r2
 8002784:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d005      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002796:	f040 80d6 	bne.w	8002946 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800279a:	4b76      	ldr	r3, [pc, #472]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a75      	ldr	r2, [pc, #468]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027a6:	f7fe fdd9 	bl	800135c <HAL_GetTick>
 80027aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027ac:	e008      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80027ae:	f7fe fdd5 	bl	800135c <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b64      	cmp	r3, #100	; 0x64
 80027ba:	d901      	bls.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e194      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027c0:	4b6c      	ldr	r3, [pc, #432]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1f0      	bne.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d021      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x570>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d11d      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80027e0:	4b64      	ldr	r3, [pc, #400]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027e6:	0c1b      	lsrs	r3, r3, #16
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80027ee:	4b61      	ldr	r3, [pc, #388]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027f4:	0e1b      	lsrs	r3, r3, #24
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	019a      	lsls	r2, r3, #6
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	041b      	lsls	r3, r3, #16
 8002806:	431a      	orrs	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	061b      	lsls	r3, r3, #24
 800280c:	431a      	orrs	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	071b      	lsls	r3, r3, #28
 8002814:	4957      	ldr	r1, [pc, #348]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d004      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002830:	d00a      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800283a:	2b00      	cmp	r3, #0
 800283c:	d02e      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002846:	d129      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002848:	4b4a      	ldr	r3, [pc, #296]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800284a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800284e:	0c1b      	lsrs	r3, r3, #16
 8002850:	f003 0303 	and.w	r3, r3, #3
 8002854:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002856:	4b47      	ldr	r3, [pc, #284]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800285c:	0f1b      	lsrs	r3, r3, #28
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	019a      	lsls	r2, r3, #6
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	041b      	lsls	r3, r3, #16
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	061b      	lsls	r3, r3, #24
 8002876:	431a      	orrs	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	071b      	lsls	r3, r3, #28
 800287c:	493d      	ldr	r1, [pc, #244]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800287e:	4313      	orrs	r3, r2
 8002880:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002884:	4b3b      	ldr	r3, [pc, #236]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002886:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800288a:	f023 021f 	bic.w	r2, r3, #31
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	3b01      	subs	r3, #1
 8002894:	4937      	ldr	r1, [pc, #220]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002896:	4313      	orrs	r3, r2
 8002898:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d01d      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80028a8:	4b32      	ldr	r3, [pc, #200]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80028aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ae:	0e1b      	lsrs	r3, r3, #24
 80028b0:	f003 030f 	and.w	r3, r3, #15
 80028b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80028b6:	4b2f      	ldr	r3, [pc, #188]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80028b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028bc:	0f1b      	lsrs	r3, r3, #28
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	019a      	lsls	r2, r3, #6
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	041b      	lsls	r3, r3, #16
 80028d0:	431a      	orrs	r2, r3
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	061b      	lsls	r3, r3, #24
 80028d6:	431a      	orrs	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	071b      	lsls	r3, r3, #28
 80028dc:	4925      	ldr	r1, [pc, #148]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d011      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	019a      	lsls	r2, r3, #6
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	041b      	lsls	r3, r3, #16
 80028fc:	431a      	orrs	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	061b      	lsls	r3, r3, #24
 8002904:	431a      	orrs	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	071b      	lsls	r3, r3, #28
 800290c:	4919      	ldr	r1, [pc, #100]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800290e:	4313      	orrs	r3, r2
 8002910:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002914:	4b17      	ldr	r3, [pc, #92]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a16      	ldr	r2, [pc, #88]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800291a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800291e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002920:	f7fe fd1c 	bl	800135c <HAL_GetTick>
 8002924:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002926:	e008      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002928:	f7fe fd18 	bl	800135c <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b64      	cmp	r3, #100	; 0x64
 8002934:	d901      	bls.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e0d7      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800293a:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	2b01      	cmp	r3, #1
 800294a:	f040 80cd 	bne.w	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800294e:	4b09      	ldr	r3, [pc, #36]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a08      	ldr	r2, [pc, #32]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002954:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002958:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800295a:	f7fe fcff 	bl	800135c <HAL_GetTick>
 800295e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002960:	e00a      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002962:	f7fe fcfb 	bl	800135c <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b64      	cmp	r3, #100	; 0x64
 800296e:	d903      	bls.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e0ba      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002974:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002978:	4b5e      	ldr	r3, [pc, #376]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002984:	d0ed      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d02e      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d12a      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80029ae:	4b51      	ldr	r3, [pc, #324]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80029b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b4:	0c1b      	lsrs	r3, r3, #16
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80029bc:	4b4d      	ldr	r3, [pc, #308]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c2:	0f1b      	lsrs	r3, r3, #28
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	019a      	lsls	r2, r3, #6
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	041b      	lsls	r3, r3, #16
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	061b      	lsls	r3, r3, #24
 80029dc:	431a      	orrs	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	071b      	lsls	r3, r3, #28
 80029e2:	4944      	ldr	r1, [pc, #272]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80029ea:	4b42      	ldr	r3, [pc, #264]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80029ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f8:	3b01      	subs	r3, #1
 80029fa:	021b      	lsls	r3, r3, #8
 80029fc:	493d      	ldr	r1, [pc, #244]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d022      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a18:	d11d      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a1a:	4b36      	ldr	r3, [pc, #216]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a20:	0e1b      	lsrs	r3, r3, #24
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a28:	4b32      	ldr	r3, [pc, #200]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2e:	0f1b      	lsrs	r3, r3, #28
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	019a      	lsls	r2, r3, #6
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	041b      	lsls	r3, r3, #16
 8002a42:	431a      	orrs	r2, r3
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	061b      	lsls	r3, r3, #24
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	071b      	lsls	r3, r3, #28
 8002a4e:	4929      	ldr	r1, [pc, #164]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d028      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a62:	4b24      	ldr	r3, [pc, #144]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a68:	0e1b      	lsrs	r3, r3, #24
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a70:	4b20      	ldr	r3, [pc, #128]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a76:	0c1b      	lsrs	r3, r3, #16
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	019a      	lsls	r2, r3, #6
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	041b      	lsls	r3, r3, #16
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	061b      	lsls	r3, r3, #24
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	071b      	lsls	r3, r3, #28
 8002a96:	4917      	ldr	r1, [pc, #92]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002a9e:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aa4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aac:	4911      	ldr	r1, [pc, #68]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ab4:	4b0f      	ldr	r3, [pc, #60]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a0e      	ldr	r2, [pc, #56]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002abe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ac0:	f7fe fc4c 	bl	800135c <HAL_GetTick>
 8002ac4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ac8:	f7fe fc48 	bl	800135c <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b64      	cmp	r3, #100	; 0x64
 8002ad4:	d901      	bls.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e007      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ada:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ae2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ae6:	d1ef      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3720      	adds	r7, #32
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40023800 	.word	0x40023800

08002af8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e084      	b.n	8002c14 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d106      	bne.n	8002b2a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7fe fad7 	bl	80010d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b40:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b4a:	d902      	bls.n	8002b52 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	e002      	b.n	8002b58 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b56:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002b60:	d007      	beq.n	8002b72 <HAL_SPI_Init+0x7a>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b6a:	d002      	beq.n	8002b72 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10b      	bne.n	8002b92 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b82:	d903      	bls.n	8002b8c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	631a      	str	r2, [r3, #48]	; 0x30
 8002b8a:	e002      	b.n	8002b92 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	ea42 0103 	orr.w	r1, r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	0c1b      	lsrs	r3, r3, #16
 8002bd2:	f003 0204 	and.w	r2, r3, #4
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be0:	431a      	orrs	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	ea42 0103 	orr.w	r1, r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	69da      	ldr	r2, [r3, #28]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c02:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_MultiProcessor_Init>:
  *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
  *        HAL_MultiProcessor_Init().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	460b      	mov	r3, r1
 8002c26:	607a      	str	r2, [r7, #4]
 8002c28:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e059      	b.n	8002ce8 <HAL_MultiProcessor_Init+0xcc>
  }

  /* Check the wake up method parameter */
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d106      	bne.n	8002c4a <HAL_MultiProcessor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f7fe fa8b 	bl	8001160 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2224      	movs	r2, #36	; 0x24
 8002c4e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0201 	bic.w	r2, r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 f845 	bl	8002cf0 <UART_SetConfig>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <HAL_MultiProcessor_Init+0x54>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e03b      	b.n	8002ce8 <HAL_MultiProcessor_Init+0xcc>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d002      	beq.n	8002c7e <HAL_MultiProcessor_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f000 fae3 	bl	8003244 <UART_AdvFeatureConfig>
  }

  /* In multiprocessor mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c8c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c9c:	609a      	str	r2, [r3, #8]

  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ca4:	d10a      	bne.n	8002cbc <HAL_MultiProcessor_Init+0xa0>
  {
    /* If address mark wake up method is chosen, set the USART address node */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8002cb0:	7afb      	ldrb	r3, [r7, #11]
 8002cb2:	061a      	lsls	r2, r3, #24
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	605a      	str	r2, [r3, #4]
  }

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	601a      	str	r2, [r3, #0]

  __HAL_UART_ENABLE(huart);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0201 	orr.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 fb51 	bl	8003388 <UART_CheckIdleState>
 8002ce6:	4603      	mov	r3, r0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b088      	sub	sp, #32
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	4bb1      	ldr	r3, [pc, #708]	; (8002fe4 <UART_SetConfig+0x2f4>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6812      	ldr	r2, [r2, #0]
 8002d26:	6939      	ldr	r1, [r7, #16]
 8002d28:	430b      	orrs	r3, r1
 8002d2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a9f      	ldr	r2, [pc, #636]	; (8002fe8 <UART_SetConfig+0x2f8>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d121      	bne.n	8002db4 <UART_SetConfig+0xc4>
 8002d70:	4b9e      	ldr	r3, [pc, #632]	; (8002fec <UART_SetConfig+0x2fc>)
 8002d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	2b03      	cmp	r3, #3
 8002d7c:	d816      	bhi.n	8002dac <UART_SetConfig+0xbc>
 8002d7e:	a201      	add	r2, pc, #4	; (adr r2, 8002d84 <UART_SetConfig+0x94>)
 8002d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d84:	08002d95 	.word	0x08002d95
 8002d88:	08002da1 	.word	0x08002da1
 8002d8c:	08002d9b 	.word	0x08002d9b
 8002d90:	08002da7 	.word	0x08002da7
 8002d94:	2301      	movs	r3, #1
 8002d96:	77fb      	strb	r3, [r7, #31]
 8002d98:	e151      	b.n	800303e <UART_SetConfig+0x34e>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	77fb      	strb	r3, [r7, #31]
 8002d9e:	e14e      	b.n	800303e <UART_SetConfig+0x34e>
 8002da0:	2304      	movs	r3, #4
 8002da2:	77fb      	strb	r3, [r7, #31]
 8002da4:	e14b      	b.n	800303e <UART_SetConfig+0x34e>
 8002da6:	2308      	movs	r3, #8
 8002da8:	77fb      	strb	r3, [r7, #31]
 8002daa:	e148      	b.n	800303e <UART_SetConfig+0x34e>
 8002dac:	2310      	movs	r3, #16
 8002dae:	77fb      	strb	r3, [r7, #31]
 8002db0:	bf00      	nop
 8002db2:	e144      	b.n	800303e <UART_SetConfig+0x34e>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a8d      	ldr	r2, [pc, #564]	; (8002ff0 <UART_SetConfig+0x300>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d134      	bne.n	8002e28 <UART_SetConfig+0x138>
 8002dbe:	4b8b      	ldr	r3, [pc, #556]	; (8002fec <UART_SetConfig+0x2fc>)
 8002dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc4:	f003 030c 	and.w	r3, r3, #12
 8002dc8:	2b0c      	cmp	r3, #12
 8002dca:	d829      	bhi.n	8002e20 <UART_SetConfig+0x130>
 8002dcc:	a201      	add	r2, pc, #4	; (adr r2, 8002dd4 <UART_SetConfig+0xe4>)
 8002dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd2:	bf00      	nop
 8002dd4:	08002e09 	.word	0x08002e09
 8002dd8:	08002e21 	.word	0x08002e21
 8002ddc:	08002e21 	.word	0x08002e21
 8002de0:	08002e21 	.word	0x08002e21
 8002de4:	08002e15 	.word	0x08002e15
 8002de8:	08002e21 	.word	0x08002e21
 8002dec:	08002e21 	.word	0x08002e21
 8002df0:	08002e21 	.word	0x08002e21
 8002df4:	08002e0f 	.word	0x08002e0f
 8002df8:	08002e21 	.word	0x08002e21
 8002dfc:	08002e21 	.word	0x08002e21
 8002e00:	08002e21 	.word	0x08002e21
 8002e04:	08002e1b 	.word	0x08002e1b
 8002e08:	2300      	movs	r3, #0
 8002e0a:	77fb      	strb	r3, [r7, #31]
 8002e0c:	e117      	b.n	800303e <UART_SetConfig+0x34e>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	77fb      	strb	r3, [r7, #31]
 8002e12:	e114      	b.n	800303e <UART_SetConfig+0x34e>
 8002e14:	2304      	movs	r3, #4
 8002e16:	77fb      	strb	r3, [r7, #31]
 8002e18:	e111      	b.n	800303e <UART_SetConfig+0x34e>
 8002e1a:	2308      	movs	r3, #8
 8002e1c:	77fb      	strb	r3, [r7, #31]
 8002e1e:	e10e      	b.n	800303e <UART_SetConfig+0x34e>
 8002e20:	2310      	movs	r3, #16
 8002e22:	77fb      	strb	r3, [r7, #31]
 8002e24:	bf00      	nop
 8002e26:	e10a      	b.n	800303e <UART_SetConfig+0x34e>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a71      	ldr	r2, [pc, #452]	; (8002ff4 <UART_SetConfig+0x304>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d120      	bne.n	8002e74 <UART_SetConfig+0x184>
 8002e32:	4b6e      	ldr	r3, [pc, #440]	; (8002fec <UART_SetConfig+0x2fc>)
 8002e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e38:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e3c:	2b10      	cmp	r3, #16
 8002e3e:	d00f      	beq.n	8002e60 <UART_SetConfig+0x170>
 8002e40:	2b10      	cmp	r3, #16
 8002e42:	d802      	bhi.n	8002e4a <UART_SetConfig+0x15a>
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d005      	beq.n	8002e54 <UART_SetConfig+0x164>
 8002e48:	e010      	b.n	8002e6c <UART_SetConfig+0x17c>
 8002e4a:	2b20      	cmp	r3, #32
 8002e4c:	d005      	beq.n	8002e5a <UART_SetConfig+0x16a>
 8002e4e:	2b30      	cmp	r3, #48	; 0x30
 8002e50:	d009      	beq.n	8002e66 <UART_SetConfig+0x176>
 8002e52:	e00b      	b.n	8002e6c <UART_SetConfig+0x17c>
 8002e54:	2300      	movs	r3, #0
 8002e56:	77fb      	strb	r3, [r7, #31]
 8002e58:	e0f1      	b.n	800303e <UART_SetConfig+0x34e>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	77fb      	strb	r3, [r7, #31]
 8002e5e:	e0ee      	b.n	800303e <UART_SetConfig+0x34e>
 8002e60:	2304      	movs	r3, #4
 8002e62:	77fb      	strb	r3, [r7, #31]
 8002e64:	e0eb      	b.n	800303e <UART_SetConfig+0x34e>
 8002e66:	2308      	movs	r3, #8
 8002e68:	77fb      	strb	r3, [r7, #31]
 8002e6a:	e0e8      	b.n	800303e <UART_SetConfig+0x34e>
 8002e6c:	2310      	movs	r3, #16
 8002e6e:	77fb      	strb	r3, [r7, #31]
 8002e70:	bf00      	nop
 8002e72:	e0e4      	b.n	800303e <UART_SetConfig+0x34e>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a5f      	ldr	r2, [pc, #380]	; (8002ff8 <UART_SetConfig+0x308>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d120      	bne.n	8002ec0 <UART_SetConfig+0x1d0>
 8002e7e:	4b5b      	ldr	r3, [pc, #364]	; (8002fec <UART_SetConfig+0x2fc>)
 8002e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e84:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e88:	2b40      	cmp	r3, #64	; 0x40
 8002e8a:	d00f      	beq.n	8002eac <UART_SetConfig+0x1bc>
 8002e8c:	2b40      	cmp	r3, #64	; 0x40
 8002e8e:	d802      	bhi.n	8002e96 <UART_SetConfig+0x1a6>
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d005      	beq.n	8002ea0 <UART_SetConfig+0x1b0>
 8002e94:	e010      	b.n	8002eb8 <UART_SetConfig+0x1c8>
 8002e96:	2b80      	cmp	r3, #128	; 0x80
 8002e98:	d005      	beq.n	8002ea6 <UART_SetConfig+0x1b6>
 8002e9a:	2bc0      	cmp	r3, #192	; 0xc0
 8002e9c:	d009      	beq.n	8002eb2 <UART_SetConfig+0x1c2>
 8002e9e:	e00b      	b.n	8002eb8 <UART_SetConfig+0x1c8>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	77fb      	strb	r3, [r7, #31]
 8002ea4:	e0cb      	b.n	800303e <UART_SetConfig+0x34e>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	77fb      	strb	r3, [r7, #31]
 8002eaa:	e0c8      	b.n	800303e <UART_SetConfig+0x34e>
 8002eac:	2304      	movs	r3, #4
 8002eae:	77fb      	strb	r3, [r7, #31]
 8002eb0:	e0c5      	b.n	800303e <UART_SetConfig+0x34e>
 8002eb2:	2308      	movs	r3, #8
 8002eb4:	77fb      	strb	r3, [r7, #31]
 8002eb6:	e0c2      	b.n	800303e <UART_SetConfig+0x34e>
 8002eb8:	2310      	movs	r3, #16
 8002eba:	77fb      	strb	r3, [r7, #31]
 8002ebc:	bf00      	nop
 8002ebe:	e0be      	b.n	800303e <UART_SetConfig+0x34e>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a4d      	ldr	r2, [pc, #308]	; (8002ffc <UART_SetConfig+0x30c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d124      	bne.n	8002f14 <UART_SetConfig+0x224>
 8002eca:	4b48      	ldr	r3, [pc, #288]	; (8002fec <UART_SetConfig+0x2fc>)
 8002ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ed8:	d012      	beq.n	8002f00 <UART_SetConfig+0x210>
 8002eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ede:	d802      	bhi.n	8002ee6 <UART_SetConfig+0x1f6>
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d007      	beq.n	8002ef4 <UART_SetConfig+0x204>
 8002ee4:	e012      	b.n	8002f0c <UART_SetConfig+0x21c>
 8002ee6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eea:	d006      	beq.n	8002efa <UART_SetConfig+0x20a>
 8002eec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ef0:	d009      	beq.n	8002f06 <UART_SetConfig+0x216>
 8002ef2:	e00b      	b.n	8002f0c <UART_SetConfig+0x21c>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	77fb      	strb	r3, [r7, #31]
 8002ef8:	e0a1      	b.n	800303e <UART_SetConfig+0x34e>
 8002efa:	2302      	movs	r3, #2
 8002efc:	77fb      	strb	r3, [r7, #31]
 8002efe:	e09e      	b.n	800303e <UART_SetConfig+0x34e>
 8002f00:	2304      	movs	r3, #4
 8002f02:	77fb      	strb	r3, [r7, #31]
 8002f04:	e09b      	b.n	800303e <UART_SetConfig+0x34e>
 8002f06:	2308      	movs	r3, #8
 8002f08:	77fb      	strb	r3, [r7, #31]
 8002f0a:	e098      	b.n	800303e <UART_SetConfig+0x34e>
 8002f0c:	2310      	movs	r3, #16
 8002f0e:	77fb      	strb	r3, [r7, #31]
 8002f10:	bf00      	nop
 8002f12:	e094      	b.n	800303e <UART_SetConfig+0x34e>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a39      	ldr	r2, [pc, #228]	; (8003000 <UART_SetConfig+0x310>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d124      	bne.n	8002f68 <UART_SetConfig+0x278>
 8002f1e:	4b33      	ldr	r3, [pc, #204]	; (8002fec <UART_SetConfig+0x2fc>)
 8002f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f2c:	d012      	beq.n	8002f54 <UART_SetConfig+0x264>
 8002f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f32:	d802      	bhi.n	8002f3a <UART_SetConfig+0x24a>
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d007      	beq.n	8002f48 <UART_SetConfig+0x258>
 8002f38:	e012      	b.n	8002f60 <UART_SetConfig+0x270>
 8002f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f3e:	d006      	beq.n	8002f4e <UART_SetConfig+0x25e>
 8002f40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f44:	d009      	beq.n	8002f5a <UART_SetConfig+0x26a>
 8002f46:	e00b      	b.n	8002f60 <UART_SetConfig+0x270>
 8002f48:	2301      	movs	r3, #1
 8002f4a:	77fb      	strb	r3, [r7, #31]
 8002f4c:	e077      	b.n	800303e <UART_SetConfig+0x34e>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	77fb      	strb	r3, [r7, #31]
 8002f52:	e074      	b.n	800303e <UART_SetConfig+0x34e>
 8002f54:	2304      	movs	r3, #4
 8002f56:	77fb      	strb	r3, [r7, #31]
 8002f58:	e071      	b.n	800303e <UART_SetConfig+0x34e>
 8002f5a:	2308      	movs	r3, #8
 8002f5c:	77fb      	strb	r3, [r7, #31]
 8002f5e:	e06e      	b.n	800303e <UART_SetConfig+0x34e>
 8002f60:	2310      	movs	r3, #16
 8002f62:	77fb      	strb	r3, [r7, #31]
 8002f64:	bf00      	nop
 8002f66:	e06a      	b.n	800303e <UART_SetConfig+0x34e>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a25      	ldr	r2, [pc, #148]	; (8003004 <UART_SetConfig+0x314>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d124      	bne.n	8002fbc <UART_SetConfig+0x2cc>
 8002f72:	4b1e      	ldr	r3, [pc, #120]	; (8002fec <UART_SetConfig+0x2fc>)
 8002f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f78:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f80:	d012      	beq.n	8002fa8 <UART_SetConfig+0x2b8>
 8002f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f86:	d802      	bhi.n	8002f8e <UART_SetConfig+0x29e>
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d007      	beq.n	8002f9c <UART_SetConfig+0x2ac>
 8002f8c:	e012      	b.n	8002fb4 <UART_SetConfig+0x2c4>
 8002f8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f92:	d006      	beq.n	8002fa2 <UART_SetConfig+0x2b2>
 8002f94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f98:	d009      	beq.n	8002fae <UART_SetConfig+0x2be>
 8002f9a:	e00b      	b.n	8002fb4 <UART_SetConfig+0x2c4>
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	77fb      	strb	r3, [r7, #31]
 8002fa0:	e04d      	b.n	800303e <UART_SetConfig+0x34e>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	77fb      	strb	r3, [r7, #31]
 8002fa6:	e04a      	b.n	800303e <UART_SetConfig+0x34e>
 8002fa8:	2304      	movs	r3, #4
 8002faa:	77fb      	strb	r3, [r7, #31]
 8002fac:	e047      	b.n	800303e <UART_SetConfig+0x34e>
 8002fae:	2308      	movs	r3, #8
 8002fb0:	77fb      	strb	r3, [r7, #31]
 8002fb2:	e044      	b.n	800303e <UART_SetConfig+0x34e>
 8002fb4:	2310      	movs	r3, #16
 8002fb6:	77fb      	strb	r3, [r7, #31]
 8002fb8:	bf00      	nop
 8002fba:	e040      	b.n	800303e <UART_SetConfig+0x34e>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a11      	ldr	r2, [pc, #68]	; (8003008 <UART_SetConfig+0x318>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d139      	bne.n	800303a <UART_SetConfig+0x34a>
 8002fc6:	4b09      	ldr	r3, [pc, #36]	; (8002fec <UART_SetConfig+0x2fc>)
 8002fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fcc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002fd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fd4:	d027      	beq.n	8003026 <UART_SetConfig+0x336>
 8002fd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fda:	d817      	bhi.n	800300c <UART_SetConfig+0x31c>
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d01c      	beq.n	800301a <UART_SetConfig+0x32a>
 8002fe0:	e027      	b.n	8003032 <UART_SetConfig+0x342>
 8002fe2:	bf00      	nop
 8002fe4:	efff69f3 	.word	0xefff69f3
 8002fe8:	40011000 	.word	0x40011000
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	40004400 	.word	0x40004400
 8002ff4:	40004800 	.word	0x40004800
 8002ff8:	40004c00 	.word	0x40004c00
 8002ffc:	40005000 	.word	0x40005000
 8003000:	40011400 	.word	0x40011400
 8003004:	40007800 	.word	0x40007800
 8003008:	40007c00 	.word	0x40007c00
 800300c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003010:	d006      	beq.n	8003020 <UART_SetConfig+0x330>
 8003012:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003016:	d009      	beq.n	800302c <UART_SetConfig+0x33c>
 8003018:	e00b      	b.n	8003032 <UART_SetConfig+0x342>
 800301a:	2300      	movs	r3, #0
 800301c:	77fb      	strb	r3, [r7, #31]
 800301e:	e00e      	b.n	800303e <UART_SetConfig+0x34e>
 8003020:	2302      	movs	r3, #2
 8003022:	77fb      	strb	r3, [r7, #31]
 8003024:	e00b      	b.n	800303e <UART_SetConfig+0x34e>
 8003026:	2304      	movs	r3, #4
 8003028:	77fb      	strb	r3, [r7, #31]
 800302a:	e008      	b.n	800303e <UART_SetConfig+0x34e>
 800302c:	2308      	movs	r3, #8
 800302e:	77fb      	strb	r3, [r7, #31]
 8003030:	e005      	b.n	800303e <UART_SetConfig+0x34e>
 8003032:	2310      	movs	r3, #16
 8003034:	77fb      	strb	r3, [r7, #31]
 8003036:	bf00      	nop
 8003038:	e001      	b.n	800303e <UART_SetConfig+0x34e>
 800303a:	2310      	movs	r3, #16
 800303c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003046:	d17f      	bne.n	8003148 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8003048:	7ffb      	ldrb	r3, [r7, #31]
 800304a:	2b08      	cmp	r3, #8
 800304c:	d85c      	bhi.n	8003108 <UART_SetConfig+0x418>
 800304e:	a201      	add	r2, pc, #4	; (adr r2, 8003054 <UART_SetConfig+0x364>)
 8003050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003054:	08003079 	.word	0x08003079
 8003058:	08003099 	.word	0x08003099
 800305c:	080030b9 	.word	0x080030b9
 8003060:	08003109 	.word	0x08003109
 8003064:	080030d1 	.word	0x080030d1
 8003068:	08003109 	.word	0x08003109
 800306c:	08003109 	.word	0x08003109
 8003070:	08003109 	.word	0x08003109
 8003074:	080030f1 	.word	0x080030f1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003078:	f7ff f8f0 	bl	800225c <HAL_RCC_GetPCLK1Freq>
 800307c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	005a      	lsls	r2, r3, #1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	085b      	lsrs	r3, r3, #1
 8003088:	441a      	add	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003092:	b29b      	uxth	r3, r3
 8003094:	61bb      	str	r3, [r7, #24]
        break;
 8003096:	e03a      	b.n	800310e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003098:	f7ff f8f4 	bl	8002284 <HAL_RCC_GetPCLK2Freq>
 800309c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	005a      	lsls	r2, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	085b      	lsrs	r3, r3, #1
 80030a8:	441a      	add	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	61bb      	str	r3, [r7, #24]
        break;
 80030b6:	e02a      	b.n	800310e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	085a      	lsrs	r2, r3, #1
 80030be:	4b5f      	ldr	r3, [pc, #380]	; (800323c <UART_SetConfig+0x54c>)
 80030c0:	4413      	add	r3, r2
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6852      	ldr	r2, [r2, #4]
 80030c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	61bb      	str	r3, [r7, #24]
        break;
 80030ce:	e01e      	b.n	800310e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030d0:	f7ff f806 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 80030d4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	005a      	lsls	r2, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	085b      	lsrs	r3, r3, #1
 80030e0:	441a      	add	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	61bb      	str	r3, [r7, #24]
        break;
 80030ee:	e00e      	b.n	800310e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	085b      	lsrs	r3, r3, #1
 80030f6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003102:	b29b      	uxth	r3, r3
 8003104:	61bb      	str	r3, [r7, #24]
        break;
 8003106:	e002      	b.n	800310e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	75fb      	strb	r3, [r7, #23]
        break;
 800310c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	2b0f      	cmp	r3, #15
 8003112:	d916      	bls.n	8003142 <UART_SetConfig+0x452>
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800311a:	d212      	bcs.n	8003142 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	b29b      	uxth	r3, r3
 8003120:	f023 030f 	bic.w	r3, r3, #15
 8003124:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	085b      	lsrs	r3, r3, #1
 800312a:	b29b      	uxth	r3, r3
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	b29a      	uxth	r2, r3
 8003132:	897b      	ldrh	r3, [r7, #10]
 8003134:	4313      	orrs	r3, r2
 8003136:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	897a      	ldrh	r2, [r7, #10]
 800313e:	60da      	str	r2, [r3, #12]
 8003140:	e070      	b.n	8003224 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	75fb      	strb	r3, [r7, #23]
 8003146:	e06d      	b.n	8003224 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8003148:	7ffb      	ldrb	r3, [r7, #31]
 800314a:	2b08      	cmp	r3, #8
 800314c:	d859      	bhi.n	8003202 <UART_SetConfig+0x512>
 800314e:	a201      	add	r2, pc, #4	; (adr r2, 8003154 <UART_SetConfig+0x464>)
 8003150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003154:	08003179 	.word	0x08003179
 8003158:	08003197 	.word	0x08003197
 800315c:	080031b5 	.word	0x080031b5
 8003160:	08003203 	.word	0x08003203
 8003164:	080031cd 	.word	0x080031cd
 8003168:	08003203 	.word	0x08003203
 800316c:	08003203 	.word	0x08003203
 8003170:	08003203 	.word	0x08003203
 8003174:	080031eb 	.word	0x080031eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003178:	f7ff f870 	bl	800225c <HAL_RCC_GetPCLK1Freq>
 800317c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	085a      	lsrs	r2, r3, #1
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	441a      	add	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003190:	b29b      	uxth	r3, r3
 8003192:	61bb      	str	r3, [r7, #24]
        break;
 8003194:	e038      	b.n	8003208 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003196:	f7ff f875 	bl	8002284 <HAL_RCC_GetPCLK2Freq>
 800319a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	085a      	lsrs	r2, r3, #1
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	441a      	add	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	61bb      	str	r3, [r7, #24]
        break;
 80031b2:	e029      	b.n	8003208 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	085a      	lsrs	r2, r3, #1
 80031ba:	4b21      	ldr	r3, [pc, #132]	; (8003240 <UART_SetConfig+0x550>)
 80031bc:	4413      	add	r3, r2
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6852      	ldr	r2, [r2, #4]
 80031c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	61bb      	str	r3, [r7, #24]
        break;
 80031ca:	e01d      	b.n	8003208 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031cc:	f7fe ff88 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 80031d0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	085a      	lsrs	r2, r3, #1
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	441a      	add	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	61bb      	str	r3, [r7, #24]
        break;
 80031e8:	e00e      	b.n	8003208 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	085b      	lsrs	r3, r3, #1
 80031f0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	61bb      	str	r3, [r7, #24]
        break;
 8003200:	e002      	b.n	8003208 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	75fb      	strb	r3, [r7, #23]
        break;
 8003206:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	2b0f      	cmp	r3, #15
 800320c:	d908      	bls.n	8003220 <UART_SetConfig+0x530>
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003214:	d204      	bcs.n	8003220 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	60da      	str	r2, [r3, #12]
 800321e:	e001      	b.n	8003224 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003230:	7dfb      	ldrb	r3, [r7, #23]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3720      	adds	r7, #32
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	01e84800 	.word	0x01e84800
 8003240:	00f42400 	.word	0x00f42400

08003244 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00a      	beq.n	800326e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00a      	beq.n	80032b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00a      	beq.n	80032d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	f003 0310 	and.w	r3, r3, #16
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00a      	beq.n	80032f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	f003 0320 	and.w	r3, r3, #32
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00a      	beq.n	8003318 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003320:	2b00      	cmp	r3, #0
 8003322:	d01a      	beq.n	800335a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003342:	d10a      	bne.n	800335a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00a      	beq.n	800337c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	605a      	str	r2, [r3, #4]
  }
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af02      	add	r7, sp, #8
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003396:	f7fd ffe1 	bl	800135c <HAL_GetTick>
 800339a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b08      	cmp	r3, #8
 80033a8:	d10e      	bne.n	80033c8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f82a 	bl	8003412 <UART_WaitOnFlagUntilTimeout>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e020      	b.n	800340a <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d10e      	bne.n	80033f4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f814 	bl	8003412 <UART_WaitOnFlagUntilTimeout>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e00a      	b.n	800340a <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2220      	movs	r2, #32
 80033f8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2220      	movs	r2, #32
 80033fe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b084      	sub	sp, #16
 8003416:	af00      	add	r7, sp, #0
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	603b      	str	r3, [r7, #0]
 800341e:	4613      	mov	r3, r2
 8003420:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003422:	e05d      	b.n	80034e0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800342a:	d059      	beq.n	80034e0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800342c:	f7fd ff96 	bl	800135c <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	429a      	cmp	r2, r3
 800343a:	d302      	bcc.n	8003442 <UART_WaitOnFlagUntilTimeout+0x30>
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d11b      	bne.n	800347a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003450:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 0201 	bic.w	r2, r2, #1
 8003460:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2220      	movs	r2, #32
 8003466:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2220      	movs	r2, #32
 800346c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e042      	b.n	8003500 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b00      	cmp	r3, #0
 8003486:	d02b      	beq.n	80034e0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003492:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003496:	d123      	bne.n	80034e0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034a0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034b0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0201 	bic.w	r2, r2, #1
 80034c0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2220      	movs	r2, #32
 80034c6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2220      	movs	r2, #32
 80034cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2220      	movs	r2, #32
 80034d2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e00f      	b.n	8003500 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	69da      	ldr	r2, [r3, #28]
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	4013      	ands	r3, r2
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	bf0c      	ite	eq
 80034f0:	2301      	moveq	r3, #1
 80034f2:	2300      	movne	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	461a      	mov	r2, r3
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d092      	beq.n	8003424 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <__libc_init_array>:
 8003508:	b570      	push	{r4, r5, r6, lr}
 800350a:	4e0d      	ldr	r6, [pc, #52]	; (8003540 <__libc_init_array+0x38>)
 800350c:	4c0d      	ldr	r4, [pc, #52]	; (8003544 <__libc_init_array+0x3c>)
 800350e:	1ba4      	subs	r4, r4, r6
 8003510:	10a4      	asrs	r4, r4, #2
 8003512:	2500      	movs	r5, #0
 8003514:	42a5      	cmp	r5, r4
 8003516:	d109      	bne.n	800352c <__libc_init_array+0x24>
 8003518:	4e0b      	ldr	r6, [pc, #44]	; (8003548 <__libc_init_array+0x40>)
 800351a:	4c0c      	ldr	r4, [pc, #48]	; (800354c <__libc_init_array+0x44>)
 800351c:	f000 f820 	bl	8003560 <_init>
 8003520:	1ba4      	subs	r4, r4, r6
 8003522:	10a4      	asrs	r4, r4, #2
 8003524:	2500      	movs	r5, #0
 8003526:	42a5      	cmp	r5, r4
 8003528:	d105      	bne.n	8003536 <__libc_init_array+0x2e>
 800352a:	bd70      	pop	{r4, r5, r6, pc}
 800352c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003530:	4798      	blx	r3
 8003532:	3501      	adds	r5, #1
 8003534:	e7ee      	b.n	8003514 <__libc_init_array+0xc>
 8003536:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800353a:	4798      	blx	r3
 800353c:	3501      	adds	r5, #1
 800353e:	e7f2      	b.n	8003526 <__libc_init_array+0x1e>
 8003540:	08003598 	.word	0x08003598
 8003544:	08003598 	.word	0x08003598
 8003548:	08003598 	.word	0x08003598
 800354c:	0800359c 	.word	0x0800359c

08003550 <memset>:
 8003550:	4402      	add	r2, r0
 8003552:	4603      	mov	r3, r0
 8003554:	4293      	cmp	r3, r2
 8003556:	d100      	bne.n	800355a <memset+0xa>
 8003558:	4770      	bx	lr
 800355a:	f803 1b01 	strb.w	r1, [r3], #1
 800355e:	e7f9      	b.n	8003554 <memset+0x4>

08003560 <_init>:
 8003560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003562:	bf00      	nop
 8003564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003566:	bc08      	pop	{r3}
 8003568:	469e      	mov	lr, r3
 800356a:	4770      	bx	lr

0800356c <_fini>:
 800356c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356e:	bf00      	nop
 8003570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003572:	bc08      	pop	{r3}
 8003574:	469e      	mov	lr, r3
 8003576:	4770      	bx	lr
