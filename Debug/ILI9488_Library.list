
ILI9488_Library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000456c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004764  08004764  00014764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004784  08004784  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004784  08004784  00014784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800478c  0800478c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800478c  0800478c  0001478c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004790  08004790  00014790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  2000000c  080047a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  080047a0  00020170  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102a4  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002445  00000000  00000000  000302de  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000af8  00000000  00000000  00032728  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009f0  00000000  00000000  00033220  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b4c0  00000000  00000000  00033c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000acbc  00000000  00000000  0005f0d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f649b  00000000  00000000  00069d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00160227  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c10  00000000  00000000  001602a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800474c 	.word	0x0800474c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	0800474c 	.word	0x0800474c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <_ZN7ILI9488C1EP9PortmapIOS1_S1_P10PortmapSPI>:
	_rst = RST;
	_spi=spi;
	_uart=uart;

}*/
ILI9488::ILI9488(PortmapIO *CS, PortmapIO *DC, PortmapIO *RST, PortmapSPI *spi)
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
 8000544:	603b      	str	r3, [r7, #0]
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	4618      	mov	r0, r3
 800054a:	f000 fe08 	bl	800115e <_ZN9PortmapIOC1Ev>
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	3308      	adds	r3, #8
 8000552:	4618      	mov	r0, r3
 8000554:	f000 fe4b 	bl	80011ee <_ZN10PortmapSPIC1Ev>
{
	_cs=CS;
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	68ba      	ldr	r2, [r7, #8]
 800055c:	611a      	str	r2, [r3, #16]
	_dc=DC;
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	615a      	str	r2, [r3, #20]
	_rst = RST;
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	683a      	ldr	r2, [r7, #0]
 8000568:	619a      	str	r2, [r3, #24]
	_spi=spi;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	69ba      	ldr	r2, [r7, #24]
 800056e:	61da      	str	r2, [r3, #28]

}
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	4618      	mov	r0, r3
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <_ZN7ILI94885beginEv>:
void ILI9488::begin(void)
{
 800057a:	b580      	push	{r7, lr}
 800057c:	b082      	sub	sp, #8
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
	_rst->setLow();
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	699b      	ldr	r3, [r3, #24]
 8000586:	4618      	mov	r0, r3
 8000588:	f000 fe0b 	bl	80011a2 <_ZN9PortmapIO6setLowEv>
	HAL_Delay(10);
 800058c:	200a      	movs	r0, #10
 800058e:	f001 fa4f 	bl	8001a30 <HAL_Delay>
	_rst ->setHigh();
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	699b      	ldr	r3, [r3, #24]
 8000596:	4618      	mov	r0, r3
 8000598:	f000 fe16 	bl	80011c8 <_ZN9PortmapIO7setHighEv>
	_width=ILI9488_TFTWIDTH;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80005a2:	849a      	strh	r2, [r3, #36]	; 0x24
	_height=ILI9488_TFTHEIGHT;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80005aa:	84da      	strh	r2, [r3, #38]	; 0x26

	writecommand(0xE0);
 80005ac:	21e0      	movs	r1, #224	; 0xe0
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f000 fc0a 	bl	8000dc8 <_ZN7ILI948812writecommandEh>
	writedata(0x00);
 80005b4:	2100      	movs	r1, #0
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	f000 fc8c 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x03);
 80005bc:	2103      	movs	r1, #3
 80005be:	6878      	ldr	r0, [r7, #4]
 80005c0:	f000 fc88 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x09);
 80005c4:	2109      	movs	r1, #9
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f000 fc84 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x08);
 80005cc:	2108      	movs	r1, #8
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f000 fc80 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x16);
 80005d4:	2116      	movs	r1, #22
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f000 fc7c 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x0A);
 80005dc:	210a      	movs	r1, #10
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f000 fc78 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x3F);
 80005e4:	213f      	movs	r1, #63	; 0x3f
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f000 fc74 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x78);
 80005ec:	2178      	movs	r1, #120	; 0x78
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f000 fc70 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x4C);
 80005f4:	214c      	movs	r1, #76	; 0x4c
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f000 fc6c 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x09);
 80005fc:	2109      	movs	r1, #9
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f000 fc68 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x0A);
 8000604:	210a      	movs	r1, #10
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f000 fc64 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x08);
 800060c:	2108      	movs	r1, #8
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f000 fc60 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x16);
 8000614:	2116      	movs	r1, #22
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f000 fc5c 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x1A);
 800061c:	211a      	movs	r1, #26
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f000 fc58 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x0F);
 8000624:	210f      	movs	r1, #15
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f000 fc54 	bl	8000ed4 <_ZN7ILI94889writedataEh>

	writecommand(0XE1);
 800062c:	21e1      	movs	r1, #225	; 0xe1
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f000 fbca 	bl	8000dc8 <_ZN7ILI948812writecommandEh>
	writedata(0x00);
 8000634:	2100      	movs	r1, #0
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f000 fc4c 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x16);
 800063c:	2116      	movs	r1, #22
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f000 fc48 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x19);
 8000644:	2119      	movs	r1, #25
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f000 fc44 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x03);
 800064c:	2103      	movs	r1, #3
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f000 fc40 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x0F);
 8000654:	210f      	movs	r1, #15
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f000 fc3c 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x05);
 800065c:	2105      	movs	r1, #5
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f000 fc38 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x32);
 8000664:	2132      	movs	r1, #50	; 0x32
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f000 fc34 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x45);
 800066c:	2145      	movs	r1, #69	; 0x45
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f000 fc30 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x46);
 8000674:	2146      	movs	r1, #70	; 0x46
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f000 fc2c 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x04);
 800067c:	2104      	movs	r1, #4
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f000 fc28 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x0E);
 8000684:	210e      	movs	r1, #14
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f000 fc24 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x0D);
 800068c:	210d      	movs	r1, #13
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f000 fc20 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x35);
 8000694:	2135      	movs	r1, #53	; 0x35
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f000 fc1c 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x37);
 800069c:	2137      	movs	r1, #55	; 0x37
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f000 fc18 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x0F);
 80006a4:	210f      	movs	r1, #15
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f000 fc14 	bl	8000ed4 <_ZN7ILI94889writedataEh>

	writecommand(0XC0);      //Power Control 1
 80006ac:	21c0      	movs	r1, #192	; 0xc0
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f000 fb8a 	bl	8000dc8 <_ZN7ILI948812writecommandEh>
	writedata(0x17);    //Vreg1out
 80006b4:	2117      	movs	r1, #23
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f000 fc0c 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x15);    //Verg2out
 80006bc:	2115      	movs	r1, #21
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f000 fc08 	bl	8000ed4 <_ZN7ILI94889writedataEh>

	writecommand(0xC1);      //Power Control 2
 80006c4:	21c1      	movs	r1, #193	; 0xc1
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f000 fb7e 	bl	8000dc8 <_ZN7ILI948812writecommandEh>
	writedata(0x41);    //VGH,VGL
 80006cc:	2141      	movs	r1, #65	; 0x41
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f000 fc00 	bl	8000ed4 <_ZN7ILI94889writedataEh>

	writecommand(0xC5);      //Power Control 3
 80006d4:	21c5      	movs	r1, #197	; 0xc5
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f000 fb76 	bl	8000dc8 <_ZN7ILI948812writecommandEh>
	writedata(0x00);
 80006dc:	2100      	movs	r1, #0
 80006de:	6878      	ldr	r0, [r7, #4]
 80006e0:	f000 fbf8 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x12);    //Vcom
 80006e4:	2112      	movs	r1, #18
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f000 fbf4 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x80);
 80006ec:	2180      	movs	r1, #128	; 0x80
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f000 fbf0 	bl	8000ed4 <_ZN7ILI94889writedataEh>

	writecommand(0x36);      //Memory Access
 80006f4:	2136      	movs	r1, #54	; 0x36
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f000 fb66 	bl	8000dc8 <_ZN7ILI948812writecommandEh>
	writedata(0x48);
 80006fc:	2148      	movs	r1, #72	; 0x48
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f000 fbe8 	bl	8000ed4 <_ZN7ILI94889writedataEh>

	writecommand(0x3A);      // Interface Pixel Format
 8000704:	213a      	movs	r1, #58	; 0x3a
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f000 fb5e 	bl	8000dc8 <_ZN7ILI948812writecommandEh>
	writedata(0x66); 	  //18 bit
 800070c:	2166      	movs	r1, #102	; 0x66
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f000 fbe0 	bl	8000ed4 <_ZN7ILI94889writedataEh>

	writecommand(0XB0);      // Interface Mode Control
 8000714:	21b0      	movs	r1, #176	; 0xb0
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f000 fb56 	bl	8000dc8 <_ZN7ILI948812writecommandEh>
	writedata(0x80);     			 //SDO NOT USE
 800071c:	2180      	movs	r1, #128	; 0x80
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f000 fbd8 	bl	8000ed4 <_ZN7ILI94889writedataEh>

	writecommand(0xB1);      //Frame rate
 8000724:	21b1      	movs	r1, #177	; 0xb1
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f000 fb4e 	bl	8000dc8 <_ZN7ILI948812writecommandEh>
	writedata(0xA0);    //60Hz
 800072c:	21a0      	movs	r1, #160	; 0xa0
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f000 fbd0 	bl	8000ed4 <_ZN7ILI94889writedataEh>

	writecommand(0xB4);      //Display Inversion Control
 8000734:	21b4      	movs	r1, #180	; 0xb4
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f000 fb46 	bl	8000dc8 <_ZN7ILI948812writecommandEh>
	writedata(0x02);    //2-dot
 800073c:	2102      	movs	r1, #2
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f000 fbc8 	bl	8000ed4 <_ZN7ILI94889writedataEh>

	writecommand(0XB6); //Display Function Control  RGB/MCU Interface Control
 8000744:	21b6      	movs	r1, #182	; 0xb6
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f000 fb3e 	bl	8000dc8 <_ZN7ILI948812writecommandEh>

	writedata(0x02);    //MCU
 800074c:	2102      	movs	r1, #2
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f000 fbc0 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x02);    //Source,Gate scan dieection
 8000754:	2102      	movs	r1, #2
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f000 fbbc 	bl	8000ed4 <_ZN7ILI94889writedataEh>

	writecommand(0XE9);      // Set Image Functio
 800075c:	21e9      	movs	r1, #233	; 0xe9
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f000 fb32 	bl	8000dc8 <_ZN7ILI948812writecommandEh>
	writedata(0x00);    // Disable 24 bit data
 8000764:	2100      	movs	r1, #0
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f000 fbb4 	bl	8000ed4 <_ZN7ILI94889writedataEh>

	writecommand(0xF7);      // Adjust Control
 800076c:	21f7      	movs	r1, #247	; 0xf7
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f000 fb2a 	bl	8000dc8 <_ZN7ILI948812writecommandEh>
	writedata(0xA9);
 8000774:	21a9      	movs	r1, #169	; 0xa9
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f000 fbac 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x51);
 800077c:	2151      	movs	r1, #81	; 0x51
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f000 fba8 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x2C);
 8000784:	212c      	movs	r1, #44	; 0x2c
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f000 fba4 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(0x82);    // D7 stream, loose
 800078c:	2182      	movs	r1, #130	; 0x82
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f000 fba0 	bl	8000ed4 <_ZN7ILI94889writedataEh>

	writecommand(ILI9488_SLPOUT);    //Exit Sleep
 8000794:	2111      	movs	r1, #17
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f000 fb16 	bl	8000dc8 <_ZN7ILI948812writecommandEh>

	HAL_Delay(120);
 800079c:	2078      	movs	r0, #120	; 0x78
 800079e:	f001 f947 	bl	8001a30 <HAL_Delay>

	writecommand(ILI9488_DISPON);    //Display on
 80007a2:	2129      	movs	r1, #41	; 0x29
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f000 fb0f 	bl	8000dc8 <_ZN7ILI948812writecommandEh>


}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <_ZN7ILI948813setAddrWindowEtttt>:

void ILI9488::setAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b084      	sub	sp, #16
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	60f8      	str	r0, [r7, #12]
 80007ba:	4608      	mov	r0, r1
 80007bc:	4611      	mov	r1, r2
 80007be:	461a      	mov	r2, r3
 80007c0:	4603      	mov	r3, r0
 80007c2:	817b      	strh	r3, [r7, #10]
 80007c4:	460b      	mov	r3, r1
 80007c6:	813b      	strh	r3, [r7, #8]
 80007c8:	4613      	mov	r3, r2
 80007ca:	80fb      	strh	r3, [r7, #6]
	writecommand(ILI9488_CASET); // Column addr set
 80007cc:	212a      	movs	r1, #42	; 0x2a
 80007ce:	68f8      	ldr	r0, [r7, #12]
 80007d0:	f000 fafa 	bl	8000dc8 <_ZN7ILI948812writecommandEh>
	writedata(x0 >> 8);
 80007d4:	897b      	ldrh	r3, [r7, #10]
 80007d6:	121b      	asrs	r3, r3, #8
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	4619      	mov	r1, r3
 80007dc:	68f8      	ldr	r0, [r7, #12]
 80007de:	f000 fb79 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(x0 & 0xFF);     // XSTART
 80007e2:	897b      	ldrh	r3, [r7, #10]
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	4619      	mov	r1, r3
 80007e8:	68f8      	ldr	r0, [r7, #12]
 80007ea:	f000 fb73 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(x1 >> 8);
 80007ee:	88fb      	ldrh	r3, [r7, #6]
 80007f0:	121b      	asrs	r3, r3, #8
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	4619      	mov	r1, r3
 80007f6:	68f8      	ldr	r0, [r7, #12]
 80007f8:	f000 fb6c 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(x1 & 0xFF);     // XEND
 80007fc:	88fb      	ldrh	r3, [r7, #6]
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	4619      	mov	r1, r3
 8000802:	68f8      	ldr	r0, [r7, #12]
 8000804:	f000 fb66 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writecommand(ILI9488_PASET); // Row addr set
 8000808:	212b      	movs	r1, #43	; 0x2b
 800080a:	68f8      	ldr	r0, [r7, #12]
 800080c:	f000 fadc 	bl	8000dc8 <_ZN7ILI948812writecommandEh>
	writedata(y0 >> 8);
 8000810:	893b      	ldrh	r3, [r7, #8]
 8000812:	121b      	asrs	r3, r3, #8
 8000814:	b2db      	uxtb	r3, r3
 8000816:	4619      	mov	r1, r3
 8000818:	68f8      	ldr	r0, [r7, #12]
 800081a:	f000 fb5b 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(y0 & 0xff);     // YSTART
 800081e:	893b      	ldrh	r3, [r7, #8]
 8000820:	b2db      	uxtb	r3, r3
 8000822:	4619      	mov	r1, r3
 8000824:	68f8      	ldr	r0, [r7, #12]
 8000826:	f000 fb55 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(y1 >> 8);
 800082a:	8b3b      	ldrh	r3, [r7, #24]
 800082c:	121b      	asrs	r3, r3, #8
 800082e:	b2db      	uxtb	r3, r3
 8000830:	4619      	mov	r1, r3
 8000832:	68f8      	ldr	r0, [r7, #12]
 8000834:	f000 fb4e 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writedata(y1 & 0xff);     // YEND
 8000838:	8b3b      	ldrh	r3, [r7, #24]
 800083a:	b2db      	uxtb	r3, r3
 800083c:	4619      	mov	r1, r3
 800083e:	68f8      	ldr	r0, [r7, #12]
 8000840:	f000 fb48 	bl	8000ed4 <_ZN7ILI94889writedataEh>
	writecommand(ILI9488_RAMWR); // write to RAM
 8000844:	212c      	movs	r1, #44	; 0x2c
 8000846:	68f8      	ldr	r0, [r7, #12]
 8000848:	f000 fabe 	bl	8000dc8 <_ZN7ILI948812writecommandEh>
}
 800084c:	bf00      	nop
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <_ZN7ILI948810fillScreenEt>:
	}

	_cs->setHigh();
}
void ILI9488::fillScreen(uint16_t color)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af02      	add	r7, sp, #8
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	460b      	mov	r3, r1
 800085e:	807b      	strh	r3, [r7, #2]
	fillRect(0, 0,  _width, _height, color);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f9b3 1024 	ldrsh.w	r1, [r3, #36]	; 0x24
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800086c:	887a      	ldrh	r2, [r7, #2]
 800086e:	9201      	str	r2, [sp, #4]
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	460b      	mov	r3, r1
 8000874:	2200      	movs	r2, #0
 8000876:	2100      	movs	r1, #0
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f000 fa1d 	bl	8000cb8 <_ZN7ILI94888fillRectEsssst>
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <_ZN7ILI94889drawPixelEsst>:
void ILI9488::drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b086      	sub	sp, #24
 800088a:	af02      	add	r7, sp, #8
 800088c:	60f8      	str	r0, [r7, #12]
 800088e:	4608      	mov	r0, r1
 8000890:	4611      	mov	r1, r2
 8000892:	461a      	mov	r2, r3
 8000894:	4603      	mov	r3, r0
 8000896:	817b      	strh	r3, [r7, #10]
 8000898:	460b      	mov	r3, r1
 800089a:	813b      	strh	r3, [r7, #8]
 800089c:	4613      	mov	r3, r2
 800089e:	80fb      	strh	r3, [r7, #6]
	if ((x < 0) || (x >= _width) || (y < 0) || (y >= _height))
 80008a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	db33      	blt.n	8000910 <_ZN7ILI94889drawPixelEsst+0x8a>
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80008ae:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	da2c      	bge.n	8000910 <_ZN7ILI94889drawPixelEsst+0x8a>
 80008b6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db28      	blt.n	8000910 <_ZN7ILI94889drawPixelEsst+0x8a>
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80008c4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	da21      	bge.n	8000910 <_ZN7ILI94889drawPixelEsst+0x8a>
		return;

	setAddrWindow(x, y, x + 1, y + 1);
 80008cc:	8979      	ldrh	r1, [r7, #10]
 80008ce:	893a      	ldrh	r2, [r7, #8]
 80008d0:	897b      	ldrh	r3, [r7, #10]
 80008d2:	3301      	adds	r3, #1
 80008d4:	b298      	uxth	r0, r3
 80008d6:	893b      	ldrh	r3, [r7, #8]
 80008d8:	3301      	adds	r3, #1
 80008da:	b29b      	uxth	r3, r3
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	4603      	mov	r3, r0
 80008e0:	68f8      	ldr	r0, [r7, #12]
 80008e2:	f7ff ff66 	bl	80007b2 <_ZN7ILI948813setAddrWindowEtttt>
	_dc->setHigh();
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 fc6c 	bl	80011c8 <_ZN9PortmapIO7setHighEv>
	_cs->setLow();
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	691b      	ldr	r3, [r3, #16]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 fc54 	bl	80011a2 <_ZN9PortmapIO6setLowEv>
	write16BitColor(color);
 80008fa:	88fb      	ldrh	r3, [r7, #6]
 80008fc:	4619      	mov	r1, r3
 80008fe:	68f8      	ldr	r0, [r7, #12]
 8000900:	f000 fa86 	bl	8000e10 <_ZN7ILI948815write16BitColorEt>
	_cs->setHigh();
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	691b      	ldr	r3, [r3, #16]
 8000908:	4618      	mov	r0, r3
 800090a:	f000 fc5d 	bl	80011c8 <_ZN9PortmapIO7setHighEv>
 800090e:	e000      	b.n	8000912 <_ZN7ILI94889drawPixelEsst+0x8c>
		return;
 8000910:	bf00      	nop

}
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <_ZN7ILI948813drawFastVLineEssst>:
void ILI9488::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8000918:	b590      	push	{r4, r7, lr}
 800091a:	b087      	sub	sp, #28
 800091c:	af02      	add	r7, sp, #8
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	4608      	mov	r0, r1
 8000922:	4611      	mov	r1, r2
 8000924:	461a      	mov	r2, r3
 8000926:	4603      	mov	r3, r0
 8000928:	817b      	strh	r3, [r7, #10]
 800092a:	460b      	mov	r3, r1
 800092c:	813b      	strh	r3, [r7, #8]
 800092e:	4613      	mov	r3, r2
 8000930:	80fb      	strh	r3, [r7, #6]

	if ((x >= _width) || (y >= _height))
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8000938:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800093c:	429a      	cmp	r2, r3
 800093e:	da4b      	bge.n	80009d8 <_ZN7ILI948813drawFastVLineEssst+0xc0>
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8000946:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800094a:	429a      	cmp	r2, r3
 800094c:	da44      	bge.n	80009d8 <_ZN7ILI948813drawFastVLineEssst+0xc0>
		return;

	if ((y + h - 1) >= _height)
 800094e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000952:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000956:	4413      	add	r3, r2
 8000958:	3b01      	subs	r3, #1
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	f9b2 2026 	ldrsh.w	r2, [r2, #38]	; 0x26
 8000960:	4293      	cmp	r3, r2
 8000962:	db07      	blt.n	8000974 <_ZN7ILI948813drawFastVLineEssst+0x5c>
		h = _height - y;
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800096a:	b29a      	uxth	r2, r3
 800096c:	893b      	ldrh	r3, [r7, #8]
 800096e:	1ad3      	subs	r3, r2, r3
 8000970:	b29b      	uxth	r3, r3
 8000972:	80fb      	strh	r3, [r7, #6]

	setAddrWindow(x, y, x, y + h - 1);
 8000974:	8979      	ldrh	r1, [r7, #10]
 8000976:	8938      	ldrh	r0, [r7, #8]
 8000978:	897c      	ldrh	r4, [r7, #10]
 800097a:	893a      	ldrh	r2, [r7, #8]
 800097c:	88fb      	ldrh	r3, [r7, #6]
 800097e:	4413      	add	r3, r2
 8000980:	b29b      	uxth	r3, r3
 8000982:	3b01      	subs	r3, #1
 8000984:	b29b      	uxth	r3, r3
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	4623      	mov	r3, r4
 800098a:	4602      	mov	r2, r0
 800098c:	68f8      	ldr	r0, [r7, #12]
 800098e:	f7ff ff10 	bl	80007b2 <_ZN7ILI948813setAddrWindowEtttt>
	_dc->setHigh();
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	695b      	ldr	r3, [r3, #20]
 8000996:	4618      	mov	r0, r3
 8000998:	f000 fc16 	bl	80011c8 <_ZN9PortmapIO7setHighEv>
	_cs->setLow();
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	691b      	ldr	r3, [r3, #16]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 fbfe 	bl	80011a2 <_ZN9PortmapIO6setLowEv>

	while (h--) {
 80009a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009aa:	b29a      	uxth	r2, r3
 80009ac:	3a01      	subs	r2, #1
 80009ae:	b292      	uxth	r2, r2
 80009b0:	80fa      	strh	r2, [r7, #6]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	bf14      	ite	ne
 80009b6:	2301      	movne	r3, #1
 80009b8:	2300      	moveq	r3, #0
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d005      	beq.n	80009cc <_ZN7ILI948813drawFastVLineEssst+0xb4>
		write16BitColor(color);
 80009c0:	8c3b      	ldrh	r3, [r7, #32]
 80009c2:	4619      	mov	r1, r3
 80009c4:	68f8      	ldr	r0, [r7, #12]
 80009c6:	f000 fa23 	bl	8000e10 <_ZN7ILI948815write16BitColorEt>
	while (h--) {
 80009ca:	e7ec      	b.n	80009a6 <_ZN7ILI948813drawFastVLineEssst+0x8e>
	}
	_cs->setHigh();
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	691b      	ldr	r3, [r3, #16]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f000 fbf9 	bl	80011c8 <_ZN9PortmapIO7setHighEv>
 80009d6:	e000      	b.n	80009da <_ZN7ILI948813drawFastVLineEssst+0xc2>
		return;
 80009d8:	bf00      	nop

}
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd90      	pop	{r4, r7, pc}

080009e0 <_ZN7ILI948813drawFastHLineEssst>:
void ILI9488::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af02      	add	r7, sp, #8
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	4608      	mov	r0, r1
 80009ea:	4611      	mov	r1, r2
 80009ec:	461a      	mov	r2, r3
 80009ee:	4603      	mov	r3, r0
 80009f0:	817b      	strh	r3, [r7, #10]
 80009f2:	460b      	mov	r3, r1
 80009f4:	813b      	strh	r3, [r7, #8]
 80009f6:	4613      	mov	r3, r2
 80009f8:	80fb      	strh	r3, [r7, #6]

	if ((x >= _width) || (y >= _height))
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8000a00:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	da4b      	bge.n	8000aa0 <_ZN7ILI948813drawFastHLineEssst+0xc0>
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8000a0e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	da44      	bge.n	8000aa0 <_ZN7ILI948813drawFastHLineEssst+0xc0>
		return;
	if ((x + w - 1) >= _width)
 8000a16:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a1e:	4413      	add	r3, r2
 8000a20:	3b01      	subs	r3, #1
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	f9b2 2024 	ldrsh.w	r2, [r2, #36]	; 0x24
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	db07      	blt.n	8000a3c <_ZN7ILI948813drawFastHLineEssst+0x5c>
		w = _width - x;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	897b      	ldrh	r3, [r7, #10]
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	80fb      	strh	r3, [r7, #6]
	setAddrWindow(x, y, x + w - 1, y);
 8000a3c:	8979      	ldrh	r1, [r7, #10]
 8000a3e:	8938      	ldrh	r0, [r7, #8]
 8000a40:	897a      	ldrh	r2, [r7, #10]
 8000a42:	88fb      	ldrh	r3, [r7, #6]
 8000a44:	4413      	add	r3, r2
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	3b01      	subs	r3, #1
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	893b      	ldrh	r3, [r7, #8]
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	4613      	mov	r3, r2
 8000a52:	4602      	mov	r2, r0
 8000a54:	68f8      	ldr	r0, [r7, #12]
 8000a56:	f7ff feac 	bl	80007b2 <_ZN7ILI948813setAddrWindowEtttt>
	_dc->setHigh();
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	695b      	ldr	r3, [r3, #20]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 fbb2 	bl	80011c8 <_ZN9PortmapIO7setHighEv>
	_cs->setLow();
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	691b      	ldr	r3, [r3, #16]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 fb9a 	bl	80011a2 <_ZN9PortmapIO6setLowEv>
	while (w--)
 8000a6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	3a01      	subs	r2, #1
 8000a76:	b292      	uxth	r2, r2
 8000a78:	80fa      	strh	r2, [r7, #6]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	bf14      	ite	ne
 8000a7e:	2301      	movne	r3, #1
 8000a80:	2300      	moveq	r3, #0
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d005      	beq.n	8000a94 <_ZN7ILI948813drawFastHLineEssst+0xb4>
	{
		write16BitColor(color);
 8000a88:	8b3b      	ldrh	r3, [r7, #24]
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	68f8      	ldr	r0, [r7, #12]
 8000a8e:	f000 f9bf 	bl	8000e10 <_ZN7ILI948815write16BitColorEt>
	while (w--)
 8000a92:	e7ec      	b.n	8000a6e <_ZN7ILI948813drawFastHLineEssst+0x8e>
	}
	_cs->setHigh();
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	691b      	ldr	r3, [r3, #16]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f000 fb95 	bl	80011c8 <_ZN9PortmapIO7setHighEv>
 8000a9e:	e000      	b.n	8000aa2 <_ZN7ILI948813drawFastHLineEssst+0xc2>
		return;
 8000aa0:	bf00      	nop
}
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <_ZN7ILI94888drawLineEsssst>:
void ILI9488:: drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,uint16_t color)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af02      	add	r7, sp, #8
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	817b      	strh	r3, [r7, #10]
 8000aba:	460b      	mov	r3, r1
 8000abc:	813b      	strh	r3, [r7, #8]
 8000abe:	4613      	mov	r3, r2
 8000ac0:	80fb      	strh	r3, [r7, #6]
	 if (x0 == x1) {
 8000ac2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ac6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d11d      	bne.n	8000b0a <_ZN7ILI94888drawLineEsssst+0x62>
	    if (y0 > y1)
 8000ace:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000ad2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	dd05      	ble.n	8000ae6 <_ZN7ILI94888drawLineEsssst+0x3e>
	      _swap_int16_t(y0, y1);
 8000ada:	893b      	ldrh	r3, [r7, #8]
 8000adc:	82bb      	strh	r3, [r7, #20]
 8000ade:	8c3b      	ldrh	r3, [r7, #32]
 8000ae0:	813b      	strh	r3, [r7, #8]
 8000ae2:	8abb      	ldrh	r3, [r7, #20]
 8000ae4:	843b      	strh	r3, [r7, #32]
	    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8000ae6:	8c3a      	ldrh	r2, [r7, #32]
 8000ae8:	893b      	ldrh	r3, [r7, #8]
 8000aea:	1ad3      	subs	r3, r2, r3
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	3301      	adds	r3, #1
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	b218      	sxth	r0, r3
 8000af4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000af8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000afc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	4603      	mov	r3, r0
 8000b02:	68f8      	ldr	r0, [r7, #12]
 8000b04:	f7ff ff08 	bl	8000918 <_ZN7ILI948813drawFastVLineEssst>

	    writeLine(x0, y0, x1, y1, color);

	  }

}
 8000b08:	e032      	b.n	8000b70 <_ZN7ILI94888drawLineEsssst+0xc8>
	  } else if (y0 == y1) {
 8000b0a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000b0e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d11d      	bne.n	8000b52 <_ZN7ILI94888drawLineEsssst+0xaa>
	    if (x0 > x1)
 8000b16:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000b1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	dd05      	ble.n	8000b2e <_ZN7ILI94888drawLineEsssst+0x86>
	      _swap_int16_t(x0, x1);
 8000b22:	897b      	ldrh	r3, [r7, #10]
 8000b24:	82fb      	strh	r3, [r7, #22]
 8000b26:	88fb      	ldrh	r3, [r7, #6]
 8000b28:	817b      	strh	r3, [r7, #10]
 8000b2a:	8afb      	ldrh	r3, [r7, #22]
 8000b2c:	80fb      	strh	r3, [r7, #6]
	    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8000b2e:	88fa      	ldrh	r2, [r7, #6]
 8000b30:	897b      	ldrh	r3, [r7, #10]
 8000b32:	1ad3      	subs	r3, r2, r3
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	3301      	adds	r3, #1
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	b218      	sxth	r0, r3
 8000b3c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000b40:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000b44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	4603      	mov	r3, r0
 8000b4a:	68f8      	ldr	r0, [r7, #12]
 8000b4c:	f7ff ff48 	bl	80009e0 <_ZN7ILI948813drawFastHLineEssst>
}
 8000b50:	e00e      	b.n	8000b70 <_ZN7ILI94888drawLineEsssst+0xc8>
	    writeLine(x0, y0, x1, y1, color);
 8000b52:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000b56:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000b5a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000b5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b60:	9301      	str	r3, [sp, #4]
 8000b62:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000b66:	9300      	str	r3, [sp, #0]
 8000b68:	4603      	mov	r3, r0
 8000b6a:	68f8      	ldr	r0, [r7, #12]
 8000b6c:	f000 f804 	bl	8000b78 <_ZN7ILI94889writeLineEsssst>
}
 8000b70:	bf00      	nop
 8000b72:	3718      	adds	r7, #24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <_ZN7ILI94889writeLineEsssst>:
void ILI9488::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,uint16_t color) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	; 0x28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	4608      	mov	r0, r1
 8000b82:	4611      	mov	r1, r2
 8000b84:	461a      	mov	r2, r3
 8000b86:	4603      	mov	r3, r0
 8000b88:	817b      	strh	r3, [r7, #10]
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	813b      	strh	r3, [r7, #8]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	80fb      	strh	r3, [r7, #6]

  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8000b92:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8000b96:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000ba0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000ba4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000ba8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000bac:	1acb      	subs	r3, r1, r3
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	bfcc      	ite	gt
 8000bb8:	2301      	movgt	r3, #1
 8000bba:	2300      	movle	r3, #0
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	847b      	strh	r3, [r7, #34]	; 0x22
  if (steep) {
 8000bc0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d00b      	beq.n	8000be0 <_ZN7ILI94889writeLineEsssst+0x68>
    _swap_int16_t(x0, y0);
 8000bc8:	897b      	ldrh	r3, [r7, #10]
 8000bca:	843b      	strh	r3, [r7, #32]
 8000bcc:	893b      	ldrh	r3, [r7, #8]
 8000bce:	817b      	strh	r3, [r7, #10]
 8000bd0:	8c3b      	ldrh	r3, [r7, #32]
 8000bd2:	813b      	strh	r3, [r7, #8]
    _swap_int16_t(x1, y1);
 8000bd4:	88fb      	ldrh	r3, [r7, #6]
 8000bd6:	83fb      	strh	r3, [r7, #30]
 8000bd8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000bda:	80fb      	strh	r3, [r7, #6]
 8000bdc:	8bfb      	ldrh	r3, [r7, #30]
 8000bde:	863b      	strh	r3, [r7, #48]	; 0x30
  }

  if (x0 > x1) {
 8000be0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000be4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	dd0b      	ble.n	8000c04 <_ZN7ILI94889writeLineEsssst+0x8c>
    _swap_int16_t(x0, x1);
 8000bec:	897b      	ldrh	r3, [r7, #10]
 8000bee:	83bb      	strh	r3, [r7, #28]
 8000bf0:	88fb      	ldrh	r3, [r7, #6]
 8000bf2:	817b      	strh	r3, [r7, #10]
 8000bf4:	8bbb      	ldrh	r3, [r7, #28]
 8000bf6:	80fb      	strh	r3, [r7, #6]
    _swap_int16_t(y0, y1);
 8000bf8:	893b      	ldrh	r3, [r7, #8]
 8000bfa:	837b      	strh	r3, [r7, #26]
 8000bfc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000bfe:	813b      	strh	r3, [r7, #8]
 8000c00:	8b7b      	ldrh	r3, [r7, #26]
 8000c02:	863b      	strh	r3, [r7, #48]	; 0x30
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8000c04:	88fa      	ldrh	r2, [r7, #6]
 8000c06:	897b      	ldrh	r3, [r7, #10]
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	833b      	strh	r3, [r7, #24]
  dy = abs(y1 - y0);
 8000c0e:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8000c12:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000c16:	1ad3      	subs	r3, r2, r3
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	bfb8      	it	lt
 8000c1c:	425b      	neglt	r3, r3
 8000c1e:	82fb      	strh	r3, [r7, #22]

  int16_t err = dx / 2;
 8000c20:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	da00      	bge.n	8000c2a <_ZN7ILI94889writeLineEsssst+0xb2>
 8000c28:	3301      	adds	r3, #1
 8000c2a:	105b      	asrs	r3, r3, #1
 8000c2c:	84fb      	strh	r3, [r7, #38]	; 0x26
  int16_t ystep;

  if (y0 < y1) {
 8000c2e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000c32:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8000c36:	429a      	cmp	r2, r3
 8000c38:	da02      	bge.n	8000c40 <_ZN7ILI94889writeLineEsssst+0xc8>
    ystep = 1;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000c3e:	e002      	b.n	8000c46 <_ZN7ILI94889writeLineEsssst+0xce>
  } else {
    ystep = -1;
 8000c40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c44:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  for (; x0 <= x1; x0++) {
 8000c46:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000c4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	dc2e      	bgt.n	8000cb0 <_ZN7ILI94889writeLineEsssst+0x138>
    if (steep) {
 8000c52:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d008      	beq.n	8000c6c <_ZN7ILI94889writeLineEsssst+0xf4>
      drawPixel(y0, x0, color);
 8000c5a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000c5c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000c60:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8000c64:	68f8      	ldr	r0, [r7, #12]
 8000c66:	f7ff fe0e 	bl	8000886 <_ZN7ILI94889drawPixelEsst>
 8000c6a:	e007      	b.n	8000c7c <_ZN7ILI94889writeLineEsssst+0x104>
    } else {
      drawPixel(x0, y0, color);
 8000c6c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000c6e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000c72:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000c76:	68f8      	ldr	r0, [r7, #12]
 8000c78:	f7ff fe05 	bl	8000886 <_ZN7ILI94889drawPixelEsst>
    }
    err -= dy;
 8000c7c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000c7e:	8afb      	ldrh	r3, [r7, #22]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (err < 0) {
 8000c86:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	da09      	bge.n	8000ca2 <_ZN7ILI94889writeLineEsssst+0x12a>
      y0 += ystep;
 8000c8e:	893a      	ldrh	r2, [r7, #8]
 8000c90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c92:	4413      	add	r3, r2
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	813b      	strh	r3, [r7, #8]
      err += dx;
 8000c98:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000c9a:	8b3b      	ldrh	r3, [r7, #24]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	84fb      	strh	r3, [r7, #38]	; 0x26
  for (; x0 <= x1; x0++) {
 8000ca2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	3301      	adds	r3, #1
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	817b      	strh	r3, [r7, #10]
 8000cae:	e7ca      	b.n	8000c46 <_ZN7ILI94889writeLineEsssst+0xce>
    }
  }
}
 8000cb0:	bf00      	nop
 8000cb2:	3728      	adds	r7, #40	; 0x28
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <_ZN7ILI94888fillRectEsssst>:
void ILI9488::fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b087      	sub	sp, #28
 8000cbc:	af02      	add	r7, sp, #8
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	4608      	mov	r0, r1
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	817b      	strh	r3, [r7, #10]
 8000cca:	460b      	mov	r3, r1
 8000ccc:	813b      	strh	r3, [r7, #8]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	80fb      	strh	r3, [r7, #6]
	if ((x >= _width) || (y >= _height))
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8000cd8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	da6f      	bge.n	8000dc0 <_ZN7ILI94888fillRectEsssst+0x108>
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8000ce6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	da68      	bge.n	8000dc0 <_ZN7ILI94888fillRectEsssst+0x108>
		return;
	if ((x + w - 1) >= _width)
 8000cee:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	f9b2 2024 	ldrsh.w	r2, [r2, #36]	; 0x24
 8000d00:	4293      	cmp	r3, r2
 8000d02:	db07      	blt.n	8000d14 <_ZN7ILI94888fillRectEsssst+0x5c>
		w = _width - x;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	897b      	ldrh	r3, [r7, #10]
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	80fb      	strh	r3, [r7, #6]
	if ((y + h - 1) >= _height)
 8000d14:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000d18:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	68fa      	ldr	r2, [r7, #12]
 8000d22:	f9b2 2026 	ldrsh.w	r2, [r2, #38]	; 0x26
 8000d26:	4293      	cmp	r3, r2
 8000d28:	db07      	blt.n	8000d3a <_ZN7ILI94888fillRectEsssst+0x82>
		h = _height - y;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	893b      	ldrh	r3, [r7, #8]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	843b      	strh	r3, [r7, #32]

	setAddrWindow(x, y, x + w - 1, y + h - 1);
 8000d3a:	8979      	ldrh	r1, [r7, #10]
 8000d3c:	8938      	ldrh	r0, [r7, #8]
 8000d3e:	897a      	ldrh	r2, [r7, #10]
 8000d40:	88fb      	ldrh	r3, [r7, #6]
 8000d42:	4413      	add	r3, r2
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	3b01      	subs	r3, #1
 8000d48:	b29c      	uxth	r4, r3
 8000d4a:	893a      	ldrh	r2, [r7, #8]
 8000d4c:	8c3b      	ldrh	r3, [r7, #32]
 8000d4e:	4413      	add	r3, r2
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	3b01      	subs	r3, #1
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	4623      	mov	r3, r4
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	68f8      	ldr	r0, [r7, #12]
 8000d5e:	f7ff fd28 	bl	80007b2 <_ZN7ILI948813setAddrWindowEtttt>

	_dc->setHigh();
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 fa2e 	bl	80011c8 <_ZN9PortmapIO7setHighEv>
	_cs->setLow();
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	691b      	ldr	r3, [r3, #16]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 fa16 	bl	80011a2 <_ZN9PortmapIO6setLowEv>

	for (y = h; y > 0; y--) {
 8000d76:	8c3b      	ldrh	r3, [r7, #32]
 8000d78:	813b      	strh	r3, [r7, #8]
 8000d7a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	dd18      	ble.n	8000db4 <_ZN7ILI94888fillRectEsssst+0xfc>
		for (x = w; x > 0; x--) {
 8000d82:	88fb      	ldrh	r3, [r7, #6]
 8000d84:	817b      	strh	r3, [r7, #10]
 8000d86:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	dd0b      	ble.n	8000da6 <_ZN7ILI94888fillRectEsssst+0xee>

			write16BitColor(color);
 8000d8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d90:	4619      	mov	r1, r3
 8000d92:	68f8      	ldr	r0, [r7, #12]
 8000d94:	f000 f83c 	bl	8000e10 <_ZN7ILI948815write16BitColorEt>
		for (x = w; x > 0; x--) {
 8000d98:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	817b      	strh	r3, [r7, #10]
 8000da4:	e7ef      	b.n	8000d86 <_ZN7ILI94888fillRectEsssst+0xce>
	for (y = h; y > 0; y--) {
 8000da6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	3b01      	subs	r3, #1
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	813b      	strh	r3, [r7, #8]
 8000db2:	e7e2      	b.n	8000d7a <_ZN7ILI94888fillRectEsssst+0xc2>
		}
	}

	_cs->setHigh();
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	691b      	ldr	r3, [r3, #16]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 fa05 	bl	80011c8 <_ZN9PortmapIO7setHighEv>
 8000dbe:	e000      	b.n	8000dc2 <_ZN7ILI94888fillRectEsssst+0x10a>
		return;
 8000dc0:	bf00      	nop

}
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd90      	pop	{r4, r7, pc}

08000dc8 <_ZN7ILI948812writecommandEh>:
	uint8_t d=data;
	_spi->send(&d);

}
void ILI9488::writecommand(uint8_t c)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	70fb      	strb	r3, [r7, #3]
	uint8_t d=c;
 8000dd4:	78fb      	ldrb	r3, [r7, #3]
 8000dd6:	73fb      	strb	r3, [r7, #15]
	_dc->setLow();
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	695b      	ldr	r3, [r3, #20]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 f9e0 	bl	80011a2 <_ZN9PortmapIO6setLowEv>

	//  digitalWrite(_sclk, LOW);
	_cs->setLow();
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	691b      	ldr	r3, [r3, #16]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f9db 	bl	80011a2 <_ZN9PortmapIO6setLowEv>

	_spi->send(&d);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	69db      	ldr	r3, [r3, #28]
 8000df0:	f107 020f 	add.w	r2, r7, #15
 8000df4:	4611      	mov	r1, r2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 fa13 	bl	8001222 <_ZN10PortmapSPI4sendEPh>
	//HAL_SPI_Transmit(_spi.getHandler(), &d,1,100);

	_cs->setHigh();
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	691b      	ldr	r3, [r3, #16]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f000 f9e1 	bl	80011c8 <_ZN9PortmapIO7setHighEv>

}
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <_ZN7ILI948815write16BitColorEt>:
void ILI9488::write16BitColor(uint16_t color)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	460b      	mov	r3, r1
 8000e1a:	807b      	strh	r3, [r7, #2]

	  uint8_t r = (color & 0xF800) >> 11;
 8000e1c:	887b      	ldrh	r3, [r7, #2]
 8000e1e:	0adb      	lsrs	r3, r3, #11
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	73fb      	strb	r3, [r7, #15]
	  uint8_t g = (color & 0x07E0) >> 5;
 8000e26:	887b      	ldrh	r3, [r7, #2]
 8000e28:	115b      	asrs	r3, r3, #5
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	73bb      	strb	r3, [r7, #14]
	  uint8_t b = color & 0x001F;
 8000e34:	887b      	ldrh	r3, [r7, #2]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	f003 031f 	and.w	r3, r3, #31
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	737b      	strb	r3, [r7, #13]

	  r = (r * 255) / 31;
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
 8000e42:	461a      	mov	r2, r3
 8000e44:	4613      	mov	r3, r2
 8000e46:	021b      	lsls	r3, r3, #8
 8000e48:	1a9b      	subs	r3, r3, r2
 8000e4a:	4a20      	ldr	r2, [pc, #128]	; (8000ecc <_ZN7ILI948815write16BitColorEt+0xbc>)
 8000e4c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e50:	441a      	add	r2, r3
 8000e52:	1112      	asrs	r2, r2, #4
 8000e54:	17db      	asrs	r3, r3, #31
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	73fb      	strb	r3, [r7, #15]
	  g = (g * 255) / 63;
 8000e5c:	7bbb      	ldrb	r3, [r7, #14]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4613      	mov	r3, r2
 8000e62:	021b      	lsls	r3, r3, #8
 8000e64:	1a9b      	subs	r3, r3, r2
 8000e66:	4a1a      	ldr	r2, [pc, #104]	; (8000ed0 <_ZN7ILI948815write16BitColorEt+0xc0>)
 8000e68:	fb82 1203 	smull	r1, r2, r2, r3
 8000e6c:	441a      	add	r2, r3
 8000e6e:	1152      	asrs	r2, r2, #5
 8000e70:	17db      	asrs	r3, r3, #31
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	73bb      	strb	r3, [r7, #14]
	  b = (b * 255) / 31;
 8000e78:	7b7b      	ldrb	r3, [r7, #13]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	021b      	lsls	r3, r3, #8
 8000e80:	1a9b      	subs	r3, r3, r2
 8000e82:	4a12      	ldr	r2, [pc, #72]	; (8000ecc <_ZN7ILI948815write16BitColorEt+0xbc>)
 8000e84:	fb82 1203 	smull	r1, r2, r2, r3
 8000e88:	441a      	add	r2, r3
 8000e8a:	1112      	asrs	r2, r2, #4
 8000e8c:	17db      	asrs	r3, r3, #31
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	737b      	strb	r3, [r7, #13]

	  _spi->send(&r);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	69db      	ldr	r3, [r3, #28]
 8000e98:	f107 020f 	add.w	r2, r7, #15
 8000e9c:	4611      	mov	r1, r2
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 f9bf 	bl	8001222 <_ZN10PortmapSPI4sendEPh>
	  _spi->send(&g);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	69db      	ldr	r3, [r3, #28]
 8000ea8:	f107 020e 	add.w	r2, r7, #14
 8000eac:	4611      	mov	r1, r2
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 f9b7 	bl	8001222 <_ZN10PortmapSPI4sendEPh>
	  _spi->send(&b);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	69db      	ldr	r3, [r3, #28]
 8000eb8:	f107 020d 	add.w	r2, r7, #13
 8000ebc:	4611      	mov	r1, r2
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f9af 	bl	8001222 <_ZN10PortmapSPI4sendEPh>

}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	84210843 	.word	0x84210843
 8000ed0:	82082083 	.word	0x82082083

08000ed4 <_ZN7ILI94889writedataEh>:
void ILI9488::writedata(uint8_t d)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	460b      	mov	r3, r1
 8000ede:	70fb      	strb	r3, [r7, #3]

	uint8_t tmp=d;
 8000ee0:	78fb      	ldrb	r3, [r7, #3]
 8000ee2:	73fb      	strb	r3, [r7, #15]
	_dc->setHigh();
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	695b      	ldr	r3, [r3, #20]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 f96d 	bl	80011c8 <_ZN9PortmapIO7setHighEv>
	_cs->setLow();
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	691b      	ldr	r3, [r3, #16]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 f955 	bl	80011a2 <_ZN9PortmapIO6setLowEv>
	_spi->send(&tmp);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	69db      	ldr	r3, [r3, #28]
 8000efc:	f107 020f 	add.w	r2, r7, #15
 8000f00:	4611      	mov	r1, r2
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f98d 	bl	8001222 <_ZN10PortmapSPI4sendEPh>
	//HAL_SPI_Transmit(_spi.getHandler(), &tmp,1,100);
	_cs->setHigh();
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	691b      	ldr	r3, [r3, #16]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 f95b 	bl	80011c8 <_ZN9PortmapIO7setHighEv>

}
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <_ZN7ILI94889testLinesEh>:
void ILI9488::testLines(uint8_t color)
{
 8000f1a:	b590      	push	{r4, r7, lr}
 8000f1c:	b08b      	sub	sp, #44	; 0x2c
 8000f1e:	af02      	add	r7, sp, #8
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	460b      	mov	r3, r1
 8000f24:	70fb      	strb	r3, [r7, #3]

	unsigned long start, t;
	int x1, y1, x2, y2, w = _width, h = _height;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8000f2c:	617b      	str	r3, [r7, #20]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8000f34:	613b      	str	r3, [r7, #16]
	fillScreen(ILI9488_BLACK);
 8000f36:	2100      	movs	r1, #0
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff fc8b 	bl	8000854 <_ZN7ILI948810fillScreenEt>

	x1 = y1 = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	60bb      	str	r3, [r7, #8]
	y2 = h - 1;
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	61bb      	str	r3, [r7, #24]

	for (x2 = 0; x2 < w; x2 += 6)
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61fb      	str	r3, [r7, #28]
 8000f50:	69fa      	ldr	r2, [r7, #28]
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	da14      	bge.n	8000f82 <_ZN7ILI94889testLinesEh+0x68>
		drawLine(x1, y1, x2, y2, color);
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	b219      	sxth	r1, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	b218      	sxth	r0, r3
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	b21c      	sxth	r4, r3
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	b21b      	sxth	r3, r3
 8000f68:	78fa      	ldrb	r2, [r7, #3]
 8000f6a:	b292      	uxth	r2, r2
 8000f6c:	9201      	str	r2, [sp, #4]
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	4623      	mov	r3, r4
 8000f72:	4602      	mov	r2, r0
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff fd97 	bl	8000aa8 <_ZN7ILI94888drawLineEsssst>
	for (x2 = 0; x2 < w; x2 += 6)
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3306      	adds	r3, #6
 8000f7e:	61fb      	str	r3, [r7, #28]
 8000f80:	e7e6      	b.n	8000f50 <_ZN7ILI94889testLinesEh+0x36>
	x2 = w - 1;
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	3b01      	subs	r3, #1
 8000f86:	61fb      	str	r3, [r7, #28]
	for (y2 = 0; y2 < h; y2 += 6)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61bb      	str	r3, [r7, #24]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	da14      	bge.n	8000fbe <_ZN7ILI94889testLinesEh+0xa4>
		drawLine(x1, y1, x2, y2, color);
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	b219      	sxth	r1, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	b218      	sxth	r0, r3
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	b21c      	sxth	r4, r3
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	78fa      	ldrb	r2, [r7, #3]
 8000fa6:	b292      	uxth	r2, r2
 8000fa8:	9201      	str	r2, [sp, #4]
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	4623      	mov	r3, r4
 8000fae:	4602      	mov	r2, r0
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff fd79 	bl	8000aa8 <_ZN7ILI94888drawLineEsssst>
	for (y2 = 0; y2 < h; y2 += 6)
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	3306      	adds	r3, #6
 8000fba:	61bb      	str	r3, [r7, #24]
 8000fbc:	e7e6      	b.n	8000f8c <_ZN7ILI94889testLinesEh+0x72>
	fillScreen(ILI9488_BLACK);
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff fc47 	bl	8000854 <_ZN7ILI948810fillScreenEt>

	x1 = w - 1;
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	60bb      	str	r3, [r7, #8]
	y1 = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
	y2 = h - 1;
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	61bb      	str	r3, [r7, #24]

	for (x2 = 0; x2 < w; x2 += 6)
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
 8000fda:	69fa      	ldr	r2, [r7, #28]
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	da14      	bge.n	800100c <_ZN7ILI94889testLinesEh+0xf2>
		drawLine(x1, y1, x2, y2, color);
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	b219      	sxth	r1, r3
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	b218      	sxth	r0, r3
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	b21c      	sxth	r4, r3
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	78fa      	ldrb	r2, [r7, #3]
 8000ff4:	b292      	uxth	r2, r2
 8000ff6:	9201      	str	r2, [sp, #4]
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	4623      	mov	r3, r4
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff fd52 	bl	8000aa8 <_ZN7ILI94888drawLineEsssst>
	for (x2 = 0; x2 < w; x2 += 6)
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	3306      	adds	r3, #6
 8001008:	61fb      	str	r3, [r7, #28]
 800100a:	e7e6      	b.n	8000fda <_ZN7ILI94889testLinesEh+0xc0>
	x2 = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	61fb      	str	r3, [r7, #28]
	for (y2 = 0; y2 < h; y2 += 6)
 8001010:	2300      	movs	r3, #0
 8001012:	61bb      	str	r3, [r7, #24]
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	429a      	cmp	r2, r3
 800101a:	da14      	bge.n	8001046 <_ZN7ILI94889testLinesEh+0x12c>
		drawLine(x1, y1, x2, y2, color);
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	b219      	sxth	r1, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	b218      	sxth	r0, r3
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	b21c      	sxth	r4, r3
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	b21b      	sxth	r3, r3
 800102c:	78fa      	ldrb	r2, [r7, #3]
 800102e:	b292      	uxth	r2, r2
 8001030:	9201      	str	r2, [sp, #4]
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	4623      	mov	r3, r4
 8001036:	4602      	mov	r2, r0
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff fd35 	bl	8000aa8 <_ZN7ILI94888drawLineEsssst>
	for (y2 = 0; y2 < h; y2 += 6)
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	3306      	adds	r3, #6
 8001042:	61bb      	str	r3, [r7, #24]
 8001044:	e7e6      	b.n	8001014 <_ZN7ILI94889testLinesEh+0xfa>

	fillScreen(ILI9488_BLACK);
 8001046:	2100      	movs	r1, #0
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff fc03 	bl	8000854 <_ZN7ILI948810fillScreenEt>

	x1 = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
	y1 = h - 1;
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	3b01      	subs	r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
	y2 = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	61bb      	str	r3, [r7, #24]

	for (x2 = 0; x2 < w; x2 += 6)
 800105c:	2300      	movs	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]
 8001060:	69fa      	ldr	r2, [r7, #28]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	429a      	cmp	r2, r3
 8001066:	da14      	bge.n	8001092 <_ZN7ILI94889testLinesEh+0x178>
		drawLine(x1, y1, x2, y2, color);
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	b219      	sxth	r1, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	b218      	sxth	r0, r3
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	b21c      	sxth	r4, r3
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	b21b      	sxth	r3, r3
 8001078:	78fa      	ldrb	r2, [r7, #3]
 800107a:	b292      	uxth	r2, r2
 800107c:	9201      	str	r2, [sp, #4]
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	4623      	mov	r3, r4
 8001082:	4602      	mov	r2, r0
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff fd0f 	bl	8000aa8 <_ZN7ILI94888drawLineEsssst>
	for (x2 = 0; x2 < w; x2 += 6)
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3306      	adds	r3, #6
 800108e:	61fb      	str	r3, [r7, #28]
 8001090:	e7e6      	b.n	8001060 <_ZN7ILI94889testLinesEh+0x146>
	x2 = w - 1;
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	3b01      	subs	r3, #1
 8001096:	61fb      	str	r3, [r7, #28]
	for (y2 = 0; y2 < h; y2 += 6)
 8001098:	2300      	movs	r3, #0
 800109a:	61bb      	str	r3, [r7, #24]
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	da14      	bge.n	80010ce <_ZN7ILI94889testLinesEh+0x1b4>
		drawLine(x1, y1, x2, y2, color);
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	b219      	sxth	r1, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	b218      	sxth	r0, r3
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	b21c      	sxth	r4, r3
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	78fa      	ldrb	r2, [r7, #3]
 80010b6:	b292      	uxth	r2, r2
 80010b8:	9201      	str	r2, [sp, #4]
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	4623      	mov	r3, r4
 80010be:	4602      	mov	r2, r0
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff fcf1 	bl	8000aa8 <_ZN7ILI94888drawLineEsssst>
	for (y2 = 0; y2 < h; y2 += 6)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	3306      	adds	r3, #6
 80010ca:	61bb      	str	r3, [r7, #24]
 80010cc:	e7e6      	b.n	800109c <_ZN7ILI94889testLinesEh+0x182>

	fillScreen(ILI9488_BLACK);
 80010ce:	2100      	movs	r1, #0
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff fbbf 	bl	8000854 <_ZN7ILI948810fillScreenEt>

	x1 = w - 1;
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	3b01      	subs	r3, #1
 80010da:	60bb      	str	r3, [r7, #8]
	y1 = h - 1;
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	3b01      	subs	r3, #1
 80010e0:	60fb      	str	r3, [r7, #12]
	y2 = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]

	for (x2 = 0; x2 < w; x2 += 6)
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
 80010ea:	69fa      	ldr	r2, [r7, #28]
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	da14      	bge.n	800111c <_ZN7ILI94889testLinesEh+0x202>
		drawLine(x1, y1, x2, y2, color);
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	b219      	sxth	r1, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	b218      	sxth	r0, r3
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	b21c      	sxth	r4, r3
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	b21b      	sxth	r3, r3
 8001102:	78fa      	ldrb	r2, [r7, #3]
 8001104:	b292      	uxth	r2, r2
 8001106:	9201      	str	r2, [sp, #4]
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	4623      	mov	r3, r4
 800110c:	4602      	mov	r2, r0
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff fcca 	bl	8000aa8 <_ZN7ILI94888drawLineEsssst>
	for (x2 = 0; x2 < w; x2 += 6)
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	3306      	adds	r3, #6
 8001118:	61fb      	str	r3, [r7, #28]
 800111a:	e7e6      	b.n	80010ea <_ZN7ILI94889testLinesEh+0x1d0>
	x2 = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	61fb      	str	r3, [r7, #28]
	for (y2 = 0; y2 < h; y2 += 6)
 8001120:	2300      	movs	r3, #0
 8001122:	61bb      	str	r3, [r7, #24]
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	429a      	cmp	r2, r3
 800112a:	da14      	bge.n	8001156 <_ZN7ILI94889testLinesEh+0x23c>
		drawLine(x1, y1, x2, y2, color);
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	b219      	sxth	r1, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	b218      	sxth	r0, r3
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	b21c      	sxth	r4, r3
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	b21b      	sxth	r3, r3
 800113c:	78fa      	ldrb	r2, [r7, #3]
 800113e:	b292      	uxth	r2, r2
 8001140:	9201      	str	r2, [sp, #4]
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	4623      	mov	r3, r4
 8001146:	4602      	mov	r2, r0
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff fcad 	bl	8000aa8 <_ZN7ILI94888drawLineEsssst>
	for (y2 = 0; y2 < h; y2 += 6)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	3306      	adds	r3, #6
 8001152:	61bb      	str	r3, [r7, #24]
 8001154:	e7e6      	b.n	8001124 <_ZN7ILI94889testLinesEh+0x20a>
}
 8001156:	bf00      	nop
 8001158:	3724      	adds	r7, #36	; 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd90      	pop	{r4, r7, pc}

0800115e <_ZN9PortmapIOC1Ev>:
 *      Author: hydra
 */

#include "PortmapIO.h"

PortmapIO::PortmapIO()
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
{

}
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <_ZN9PortmapIOC1EP12GPIO_TypeDeft>:
PortmapIO::PortmapIO (GPIO_TypeDef * port, uint16_t pin) {
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	4613      	mov	r3, r2
 8001180:	80fb      	strh	r3, [r7, #6]
	_port = port;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	68ba      	ldr	r2, [r7, #8]
 8001186:	601a      	str	r2, [r3, #0]
	_pin=pin;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	88fa      	ldrh	r2, [r7, #6]
 800118c:	809a      	strh	r2, [r3, #4]
	_status=0;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2200      	movs	r2, #0
 8001192:	719a      	strb	r2, [r3, #6]
}
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4618      	mov	r0, r3
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <_ZN9PortmapIO6setLowEv>:

	HAL_GPIO_TogglePin(_port,_pin);
	_status=!_status;
}
void PortmapIO::setLow()
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_port,_pin,GPIO_PIN_RESET);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6818      	ldr	r0, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	889b      	ldrh	r3, [r3, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	4619      	mov	r1, r3
 80011b6:	f001 fa01 	bl	80025bc <HAL_GPIO_WritePin>
	_status=0;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	719a      	strb	r2, [r3, #6]
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <_ZN9PortmapIO7setHighEv>:
void PortmapIO::setHigh()
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_port,_pin,GPIO_PIN_SET);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6818      	ldr	r0, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	889b      	ldrh	r3, [r3, #4]
 80011d8:	2201      	movs	r2, #1
 80011da:	4619      	mov	r1, r3
 80011dc:	f001 f9ee 	bl	80025bc <HAL_GPIO_WritePin>
	_status=1;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2201      	movs	r2, #1
 80011e4:	719a      	strb	r2, [r3, #6]
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <_ZN10PortmapSPIC1Ev>:
 *      Author: hydra
 */

#include "PortmapSPI.h"

PortmapSPI::PortmapSPI()
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
{

}
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4618      	mov	r0, r3
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <_ZN10PortmapSPIC1EP19__SPI_HandleTypeDef>:
PortmapSPI::PortmapSPI(SPI_HandleTypeDef *h)
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
{
	_handler=h;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	601a      	str	r2, [r3, #0]
}
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4618      	mov	r0, r3
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <_ZN10PortmapSPI4sendEPh>:
SPI_HandleTypeDef *PortmapSPI::getHandler()
{
	return _handler;
}
void PortmapSPI::send(uint8_t *d)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(_handler, d,1,1);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6818      	ldr	r0, [r3, #0]
 8001230:	2301      	movs	r3, #1
 8001232:	2201      	movs	r2, #1
 8001234:	6839      	ldr	r1, [r7, #0]
 8001236:	f002 fb63 	bl	8003900 <HAL_SPI_Transmit>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
		HAL_Delay(1);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	}*/
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001244:	b590      	push	{r4, r7, lr}
 8001246:	b097      	sub	sp, #92	; 0x5c
 8001248:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124a:	f000 fb94 	bl	8001976 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124e:	f000 f869 	bl	8001324 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001252:	f000 f9a1 	bl	8001598 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001256:	f000 f981 	bl	800155c <_ZL11MX_DMA_Initv>
  MX_SPI1_Init();
 800125a:	f000 f907 	bl	800146c <_ZL12MX_SPI1_Initv>
  MX_USART3_UART_Init();
 800125e:	f000 f947 	bl	80014f0 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */
  PortmapSPI lcd_spi =PortmapSPI(&hspi1);
 8001262:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001266:	492c      	ldr	r1, [pc, #176]	; (8001318 <main+0xd4>)
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ffcb 	bl	8001204 <_ZN10PortmapSPIC1EP19__SPI_HandleTypeDef>
     PortmapIO lcd_dc = PortmapIO(GPIOG,GPIO_PIN_3);
 800126e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001272:	2208      	movs	r2, #8
 8001274:	4929      	ldr	r1, [pc, #164]	; (800131c <main+0xd8>)
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff7c 	bl	8001174 <_ZN9PortmapIOC1EP12GPIO_TypeDeft>
     PortmapIO lcd_cs = PortmapIO(GPIOG,GPIO_PIN_2);
 800127c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001280:	2204      	movs	r2, #4
 8001282:	4926      	ldr	r1, [pc, #152]	; (800131c <main+0xd8>)
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff75 	bl	8001174 <_ZN9PortmapIOC1EP12GPIO_TypeDeft>
     PortmapIO lcd_rst = PortmapIO(GPIOF,GPIO_PIN_12);
 800128a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800128e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001292:	4923      	ldr	r1, [pc, #140]	; (8001320 <main+0xdc>)
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff6d 	bl	8001174 <_ZN9PortmapIOC1EP12GPIO_TypeDeft>

     ILI9488 rpi_lcd = ILI9488(&lcd_cs,&lcd_dc, &lcd_rst, &lcd_spi);
 800129a:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800129e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80012a2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80012a6:	4638      	mov	r0, r7
 80012a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	4623      	mov	r3, r4
 80012b0:	f7ff f942 	bl	8000538 <_ZN7ILI9488C1EP9PortmapIOS1_S1_P10PortmapSPI>
     rpi_lcd.begin();
 80012b4:	463b      	mov	r3, r7
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f95f 	bl	800057a <_ZN7ILI94885beginEv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
     while (1)
     {
   	  rpi_lcd.fillScreen(ILI9488_BLACK);
 80012bc:	463b      	mov	r3, r7
 80012be:	2100      	movs	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fac7 	bl	8000854 <_ZN7ILI948810fillScreenEt>
   	  rpi_lcd.fillScreen(ILI9488_RED);
 80012c6:	463b      	mov	r3, r7
 80012c8:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fac1 	bl	8000854 <_ZN7ILI948810fillScreenEt>
   	   rpi_lcd.fillScreen(ILI9488_GREEN);
 80012d2:	463b      	mov	r3, r7
 80012d4:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fabb 	bl	8000854 <_ZN7ILI948810fillScreenEt>
   	   rpi_lcd.fillScreen(ILI9488_BLUE);
 80012de:	463b      	mov	r3, r7
 80012e0:	211f      	movs	r1, #31
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fab6 	bl	8000854 <_ZN7ILI948810fillScreenEt>
   	   rpi_lcd.fillScreen(ILI9488_BLACK);
 80012e8:	463b      	mov	r3, r7
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fab1 	bl	8000854 <_ZN7ILI948810fillScreenEt>
   	  HAL_Delay(1000);
 80012f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012f6:	f000 fb9b 	bl	8001a30 <HAL_Delay>
   	rpi_lcd.testLines(ILI9488_GREEN);
 80012fa:	463b      	mov	r3, r7
 80012fc:	21e0      	movs	r1, #224	; 0xe0
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fe0b 	bl	8000f1a <_ZN7ILI94889testLinesEh>
   	HAL_Delay(1000);
 8001304:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001308:	f000 fb92 	bl	8001a30 <HAL_Delay>
   	rpi_lcd.testLines(ILI9488_GREENYELLOW);
 800130c:	463b      	mov	r3, r7
 800130e:	21e5      	movs	r1, #229	; 0xe5
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fe02 	bl	8000f1a <_ZN7ILI94889testLinesEh>
   	  rpi_lcd.fillScreen(ILI9488_BLACK);
 8001316:	e7d1      	b.n	80012bc <main+0x78>
 8001318:	20000028 	.word	0x20000028
 800131c:	40021800 	.word	0x40021800
 8001320:	40021400 	.word	0x40021400

08001324 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b0b8      	sub	sp, #224	; 0xe0
 8001328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800132e:	2234      	movs	r2, #52	; 0x34
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f003 fa02 	bl	800473c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001338:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001348:	f107 0308 	add.w	r3, r7, #8
 800134c:	2290      	movs	r2, #144	; 0x90
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f003 f9f3 	bl	800473c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001356:	4b43      	ldr	r3, [pc, #268]	; (8001464 <_Z18SystemClock_Configv+0x140>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	4a42      	ldr	r2, [pc, #264]	; (8001464 <_Z18SystemClock_Configv+0x140>)
 800135c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001360:	6413      	str	r3, [r2, #64]	; 0x40
 8001362:	4b40      	ldr	r3, [pc, #256]	; (8001464 <_Z18SystemClock_Configv+0x140>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800136e:	4b3e      	ldr	r3, [pc, #248]	; (8001468 <_Z18SystemClock_Configv+0x144>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a3d      	ldr	r2, [pc, #244]	; (8001468 <_Z18SystemClock_Configv+0x144>)
 8001374:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	4b3b      	ldr	r3, [pc, #236]	; (8001468 <_Z18SystemClock_Configv+0x144>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001386:	2302      	movs	r3, #2
 8001388:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800138c:	2301      	movs	r3, #1
 800138e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001392:	2310      	movs	r3, #16
 8001394:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001398:	2302      	movs	r3, #2
 800139a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800139e:	2300      	movs	r3, #0
 80013a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013a4:	2308      	movs	r3, #8
 80013a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80013aa:	23d8      	movs	r3, #216	; 0xd8
 80013ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013b0:	2302      	movs	r3, #2
 80013b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013b6:	2302      	movs	r3, #2
 80013b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013c0:	4618      	mov	r0, r3
 80013c2:	f001 f965 	bl	8002690 <HAL_RCC_OscConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	bf14      	ite	ne
 80013cc:	2301      	movne	r3, #1
 80013ce:	2300      	moveq	r3, #0
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 80013d6:	f000 f96f 	bl	80016b8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80013da:	f001 f909 	bl	80025f0 <HAL_PWREx_EnableOverDrive>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	bf14      	ite	ne
 80013e4:	2301      	movne	r3, #1
 80013e6:	2300      	moveq	r3, #0
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 80013ee:	f000 f963 	bl	80016b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f2:	230f      	movs	r3, #15
 80013f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f8:	2302      	movs	r3, #2
 80013fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013fe:	2300      	movs	r3, #0
 8001400:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001404:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001408:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800140c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001410:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001414:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001418:	2107      	movs	r1, #7
 800141a:	4618      	mov	r0, r3
 800141c:	f001 fbe6 	bl	8002bec <HAL_RCC_ClockConfig>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	bf14      	ite	ne
 8001426:	2301      	movne	r3, #1
 8001428:	2300      	moveq	r3, #0
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <_Z18SystemClock_Configv+0x110>
  {
    Error_Handler();
 8001430:	f000 f942 	bl	80016b8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001434:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001438:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800143a:	2300      	movs	r3, #0
 800143c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800143e:	f107 0308 	add.w	r3, r7, #8
 8001442:	4618      	mov	r0, r3
 8001444:	f001 fda4 	bl	8002f90 <HAL_RCCEx_PeriphCLKConfig>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	bf14      	ite	ne
 800144e:	2301      	movne	r3, #1
 8001450:	2300      	moveq	r3, #0
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <_Z18SystemClock_Configv+0x138>
  {
    Error_Handler();
 8001458:	f000 f92e 	bl	80016b8 <Error_Handler>
  }
}
 800145c:	bf00      	nop
 800145e:	37e0      	adds	r7, #224	; 0xe0
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40023800 	.word	0x40023800
 8001468:	40007000 	.word	0x40007000

0800146c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001470:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <_ZL12MX_SPI1_Initv+0x7c>)
 8001472:	4a1e      	ldr	r2, [pc, #120]	; (80014ec <_ZL12MX_SPI1_Initv+0x80>)
 8001474:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001476:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <_ZL12MX_SPI1_Initv+0x7c>)
 8001478:	f44f 7282 	mov.w	r2, #260	; 0x104
 800147c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800147e:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <_ZL12MX_SPI1_Initv+0x7c>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001484:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <_ZL12MX_SPI1_Initv+0x7c>)
 8001486:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800148a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800148c:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <_ZL12MX_SPI1_Initv+0x7c>)
 800148e:	2200      	movs	r2, #0
 8001490:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <_ZL12MX_SPI1_Initv+0x7c>)
 8001494:	2200      	movs	r2, #0
 8001496:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001498:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <_ZL12MX_SPI1_Initv+0x7c>)
 800149a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800149e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <_ZL12MX_SPI1_Initv+0x7c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <_ZL12MX_SPI1_Initv+0x7c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ac:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <_ZL12MX_SPI1_Initv+0x7c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014b2:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <_ZL12MX_SPI1_Initv+0x7c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80014b8:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <_ZL12MX_SPI1_Initv+0x7c>)
 80014ba:	2207      	movs	r2, #7
 80014bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <_ZL12MX_SPI1_Initv+0x7c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <_ZL12MX_SPI1_Initv+0x7c>)
 80014c6:	2208      	movs	r2, #8
 80014c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014ca:	4807      	ldr	r0, [pc, #28]	; (80014e8 <_ZL12MX_SPI1_Initv+0x7c>)
 80014cc:	f002 f986 	bl	80037dc <HAL_SPI_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	bf14      	ite	ne
 80014d6:	2301      	movne	r3, #1
 80014d8:	2300      	moveq	r3, #0
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 80014e0:	f000 f8ea 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000028 	.word	0x20000028
 80014ec:	40013000 	.word	0x40013000

080014f0 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014f4:	4b17      	ldr	r3, [pc, #92]	; (8001554 <_ZL19MX_USART3_UART_Initv+0x64>)
 80014f6:	4a18      	ldr	r2, [pc, #96]	; (8001558 <_ZL19MX_USART3_UART_Initv+0x68>)
 80014f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014fa:	4b16      	ldr	r3, [pc, #88]	; (8001554 <_ZL19MX_USART3_UART_Initv+0x64>)
 80014fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001500:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001502:	4b14      	ldr	r3, [pc, #80]	; (8001554 <_ZL19MX_USART3_UART_Initv+0x64>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <_ZL19MX_USART3_UART_Initv+0x64>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <_ZL19MX_USART3_UART_Initv+0x64>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <_ZL19MX_USART3_UART_Initv+0x64>)
 8001516:	220c      	movs	r2, #12
 8001518:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151a:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <_ZL19MX_USART3_UART_Initv+0x64>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <_ZL19MX_USART3_UART_Initv+0x64>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <_ZL19MX_USART3_UART_Initv+0x64>)
 8001528:	2200      	movs	r2, #0
 800152a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <_ZL19MX_USART3_UART_Initv+0x64>)
 800152e:	2200      	movs	r2, #0
 8001530:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	4807      	ldr	r0, [pc, #28]	; (8001554 <_ZL19MX_USART3_UART_Initv+0x64>)
 8001538:	f002 fc65 	bl	8003e06 <HAL_MultiProcessor_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	bf14      	ite	ne
 8001542:	2301      	movne	r3, #1
 8001544:	2300      	moveq	r3, #0
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <_ZL19MX_USART3_UART_Initv+0x60>
  {
    Error_Handler();
 800154c:	f000 f8b4 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	200000ec 	.word	0x200000ec
 8001558:	40004800 	.word	0x40004800

0800155c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <_ZL11MX_DMA_Initv+0x38>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a0b      	ldr	r2, [pc, #44]	; (8001594 <_ZL11MX_DMA_Initv+0x38>)
 8001568:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <_ZL11MX_DMA_Initv+0x38>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2100      	movs	r1, #0
 800157e:	203b      	movs	r0, #59	; 0x3b
 8001580:	f000 fb53 	bl	8001c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001584:	203b      	movs	r0, #59	; 0x3b
 8001586:	f000 fb6c 	bl	8001c62 <HAL_NVIC_EnableIRQ>

}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800

08001598 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
 80015ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ae:	4b3e      	ldr	r3, [pc, #248]	; (80016a8 <_ZL12MX_GPIO_Initv+0x110>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a3d      	ldr	r2, [pc, #244]	; (80016a8 <_ZL12MX_GPIO_Initv+0x110>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b3b      	ldr	r3, [pc, #236]	; (80016a8 <_ZL12MX_GPIO_Initv+0x110>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015c6:	4b38      	ldr	r3, [pc, #224]	; (80016a8 <_ZL12MX_GPIO_Initv+0x110>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a37      	ldr	r2, [pc, #220]	; (80016a8 <_ZL12MX_GPIO_Initv+0x110>)
 80015cc:	f043 0320 	orr.w	r3, r3, #32
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b35      	ldr	r3, [pc, #212]	; (80016a8 <_ZL12MX_GPIO_Initv+0x110>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0320 	and.w	r3, r3, #32
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015de:	4b32      	ldr	r3, [pc, #200]	; (80016a8 <_ZL12MX_GPIO_Initv+0x110>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a31      	ldr	r2, [pc, #196]	; (80016a8 <_ZL12MX_GPIO_Initv+0x110>)
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b2f      	ldr	r3, [pc, #188]	; (80016a8 <_ZL12MX_GPIO_Initv+0x110>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f6:	4b2c      	ldr	r3, [pc, #176]	; (80016a8 <_ZL12MX_GPIO_Initv+0x110>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a2b      	ldr	r2, [pc, #172]	; (80016a8 <_ZL12MX_GPIO_Initv+0x110>)
 80015fc:	f043 0308 	orr.w	r3, r3, #8
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b29      	ldr	r3, [pc, #164]	; (80016a8 <_ZL12MX_GPIO_Initv+0x110>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0308 	and.w	r3, r3, #8
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800160e:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <_ZL12MX_GPIO_Initv+0x110>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a25      	ldr	r2, [pc, #148]	; (80016a8 <_ZL12MX_GPIO_Initv+0x110>)
 8001614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <_ZL12MX_GPIO_Initv+0x110>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800162c:	481f      	ldr	r0, [pc, #124]	; (80016ac <_ZL12MX_GPIO_Initv+0x114>)
 800162e:	f000 ffc5 	bl	80025bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001638:	481d      	ldr	r0, [pc, #116]	; (80016b0 <_ZL12MX_GPIO_Initv+0x118>)
 800163a:	f000 ffbf 	bl	80025bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_CS_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	210c      	movs	r1, #12
 8001642:	481c      	ldr	r0, [pc, #112]	; (80016b4 <_ZL12MX_GPIO_Initv+0x11c>)
 8001644:	f000 ffba 	bl	80025bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8001648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164e:	2301      	movs	r3, #1
 8001650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	4619      	mov	r1, r3
 8001660:	4812      	ldr	r0, [pc, #72]	; (80016ac <_ZL12MX_GPIO_Initv+0x114>)
 8001662:	f000 fe01 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin BLUE_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|BLUE_LED_Pin;
 8001666:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800166a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166c:	2301      	movs	r3, #1
 800166e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	4619      	mov	r1, r3
 800167e:	480c      	ldr	r0, [pc, #48]	; (80016b0 <_ZL12MX_GPIO_Initv+0x118>)
 8001680:	f000 fdf2 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin;
 8001684:	230c      	movs	r3, #12
 8001686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001688:	2301      	movs	r3, #1
 800168a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2300      	movs	r3, #0
 8001692:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4619      	mov	r1, r3
 800169a:	4806      	ldr	r0, [pc, #24]	; (80016b4 <_ZL12MX_GPIO_Initv+0x11c>)
 800169c:	f000 fde4 	bl	8002268 <HAL_GPIO_Init>

}
 80016a0:	bf00      	nop
 80016a2:	3728      	adds	r7, #40	; 0x28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40021400 	.word	0x40021400
 80016b0:	40020400 	.word	0x40020400
 80016b4:	40021800 	.word	0x40021800

080016b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016bc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016be:	e7fe      	b.n	80016be <Error_Handler+0x6>

080016c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016c6:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <HAL_MspInit+0x44>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <HAL_MspInit+0x44>)
 80016cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d0:	6413      	str	r3, [r2, #64]	; 0x40
 80016d2:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <HAL_MspInit+0x44>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <HAL_MspInit+0x44>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	4a08      	ldr	r2, [pc, #32]	; (8001704 <HAL_MspInit+0x44>)
 80016e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_MspInit+0x44>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800

08001708 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	; 0x28
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a33      	ldr	r2, [pc, #204]	; (80017f4 <HAL_SPI_MspInit+0xec>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d15f      	bne.n	80017ea <HAL_SPI_MspInit+0xe2>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800172a:	4b33      	ldr	r3, [pc, #204]	; (80017f8 <HAL_SPI_MspInit+0xf0>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172e:	4a32      	ldr	r2, [pc, #200]	; (80017f8 <HAL_SPI_MspInit+0xf0>)
 8001730:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001734:	6453      	str	r3, [r2, #68]	; 0x44
 8001736:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <HAL_SPI_MspInit+0xf0>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <HAL_SPI_MspInit+0xf0>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a2c      	ldr	r2, [pc, #176]	; (80017f8 <HAL_SPI_MspInit+0xf0>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b2a      	ldr	r3, [pc, #168]	; (80017f8 <HAL_SPI_MspInit+0xf0>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800175a:	23a0      	movs	r3, #160	; 0xa0
 800175c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001766:	2303      	movs	r3, #3
 8001768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800176a:	2305      	movs	r3, #5
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	4619      	mov	r1, r3
 8001774:	4821      	ldr	r0, [pc, #132]	; (80017fc <HAL_SPI_MspInit+0xf4>)
 8001776:	f000 fd77 	bl	8002268 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800177a:	4b21      	ldr	r3, [pc, #132]	; (8001800 <HAL_SPI_MspInit+0xf8>)
 800177c:	4a21      	ldr	r2, [pc, #132]	; (8001804 <HAL_SPI_MspInit+0xfc>)
 800177e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001780:	4b1f      	ldr	r3, [pc, #124]	; (8001800 <HAL_SPI_MspInit+0xf8>)
 8001782:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001786:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001788:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <HAL_SPI_MspInit+0xf8>)
 800178a:	2240      	movs	r2, #64	; 0x40
 800178c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800178e:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <HAL_SPI_MspInit+0xf8>)
 8001790:	2200      	movs	r2, #0
 8001792:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001794:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <HAL_SPI_MspInit+0xf8>)
 8001796:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800179a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800179c:	4b18      	ldr	r3, [pc, #96]	; (8001800 <HAL_SPI_MspInit+0xf8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017a2:	4b17      	ldr	r3, [pc, #92]	; (8001800 <HAL_SPI_MspInit+0xf8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80017a8:	4b15      	ldr	r3, [pc, #84]	; (8001800 <HAL_SPI_MspInit+0xf8>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80017ae:	4b14      	ldr	r3, [pc, #80]	; (8001800 <HAL_SPI_MspInit+0xf8>)
 80017b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017b4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80017b6:	4b12      	ldr	r3, [pc, #72]	; (8001800 <HAL_SPI_MspInit+0xf8>)
 80017b8:	2204      	movs	r2, #4
 80017ba:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80017bc:	4b10      	ldr	r3, [pc, #64]	; (8001800 <HAL_SPI_MspInit+0xf8>)
 80017be:	2203      	movs	r2, #3
 80017c0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80017c2:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <HAL_SPI_MspInit+0xf8>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80017c8:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <HAL_SPI_MspInit+0xf8>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80017ce:	480c      	ldr	r0, [pc, #48]	; (8001800 <HAL_SPI_MspInit+0xf8>)
 80017d0:	f000 fa62 	bl	8001c98 <HAL_DMA_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_SPI_MspInit+0xd6>
    {
      Error_Handler();
 80017da:	f7ff ff6d 	bl	80016b8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a07      	ldr	r2, [pc, #28]	; (8001800 <HAL_SPI_MspInit+0xf8>)
 80017e2:	655a      	str	r2, [r3, #84]	; 0x54
 80017e4:	4a06      	ldr	r2, [pc, #24]	; (8001800 <HAL_SPI_MspInit+0xf8>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017ea:	bf00      	nop
 80017ec:	3728      	adds	r7, #40	; 0x28
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40013000 	.word	0x40013000
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40020000 	.word	0x40020000
 8001800:	2000008c 	.word	0x2000008c
 8001804:	40026458 	.word	0x40026458

08001808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08a      	sub	sp, #40	; 0x28
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a17      	ldr	r2, [pc, #92]	; (8001884 <HAL_UART_MspInit+0x7c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d128      	bne.n	800187c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800182a:	4b17      	ldr	r3, [pc, #92]	; (8001888 <HAL_UART_MspInit+0x80>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	4a16      	ldr	r2, [pc, #88]	; (8001888 <HAL_UART_MspInit+0x80>)
 8001830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001834:	6413      	str	r3, [r2, #64]	; 0x40
 8001836:	4b14      	ldr	r3, [pc, #80]	; (8001888 <HAL_UART_MspInit+0x80>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001842:	4b11      	ldr	r3, [pc, #68]	; (8001888 <HAL_UART_MspInit+0x80>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a10      	ldr	r2, [pc, #64]	; (8001888 <HAL_UART_MspInit+0x80>)
 8001848:	f043 0308 	orr.w	r3, r3, #8
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <HAL_UART_MspInit+0x80>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800185a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800185e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001860:	2312      	movs	r3, #18
 8001862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001868:	2303      	movs	r3, #3
 800186a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800186c:	2307      	movs	r3, #7
 800186e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	4619      	mov	r1, r3
 8001876:	4805      	ldr	r0, [pc, #20]	; (800188c <HAL_UART_MspInit+0x84>)
 8001878:	f000 fcf6 	bl	8002268 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800187c:	bf00      	nop
 800187e:	3728      	adds	r7, #40	; 0x28
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40004800 	.word	0x40004800
 8001888:	40023800 	.word	0x40023800
 800188c:	40020c00 	.word	0x40020c00

08001890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <NMI_Handler+0x4>

08001896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800189a:	e7fe      	b.n	800189a <HardFault_Handler+0x4>

0800189c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <MemManage_Handler+0x4>

080018a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a6:	e7fe      	b.n	80018a6 <BusFault_Handler+0x4>

080018a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018ac:	e7fe      	b.n	80018ac <UsageFault_Handler+0x4>

080018ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018dc:	f000 f888 	bl	80019f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80018e8:	4802      	ldr	r0, [pc, #8]	; (80018f4 <DMA2_Stream3_IRQHandler+0x10>)
 80018ea:	f000 fa83 	bl	8001df4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	2000008c 	.word	0x2000008c

080018f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <SystemInit+0x28>)
 80018fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001902:	4a07      	ldr	r2, [pc, #28]	; (8001920 <SystemInit+0x28>)
 8001904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800190c:	4b04      	ldr	r3, [pc, #16]	; (8001920 <SystemInit+0x28>)
 800190e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001912:	609a      	str	r2, [r3, #8]
#endif
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001924:	f8df d034 	ldr.w	sp, [pc, #52]	; 800195c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001928:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800192a:	e003      	b.n	8001934 <LoopCopyDataInit>

0800192c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800192e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001930:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001932:	3104      	adds	r1, #4

08001934 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001934:	480b      	ldr	r0, [pc, #44]	; (8001964 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001938:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800193a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800193c:	d3f6      	bcc.n	800192c <CopyDataInit>
  ldr  r2, =_sbss
 800193e:	4a0b      	ldr	r2, [pc, #44]	; (800196c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001940:	e002      	b.n	8001948 <LoopFillZerobss>

08001942 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001942:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001944:	f842 3b04 	str.w	r3, [r2], #4

08001948 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001948:	4b09      	ldr	r3, [pc, #36]	; (8001970 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800194a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800194c:	d3f9      	bcc.n	8001942 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800194e:	f7ff ffd3 	bl	80018f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001952:	f002 fecf 	bl	80046f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001956:	f7ff fc75 	bl	8001244 <main>
  bx  lr    
 800195a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800195c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001960:	08004794 	.word	0x08004794
  ldr  r0, =_sdata
 8001964:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001968:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800196c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001970:	20000170 	.word	0x20000170

08001974 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001974:	e7fe      	b.n	8001974 <ADC_IRQHandler>

08001976 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800197a:	2003      	movs	r0, #3
 800197c:	f000 f94a 	bl	8001c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001980:	2000      	movs	r0, #0
 8001982:	f000 f805 	bl	8001990 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001986:	f7ff fe9b 	bl	80016c0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_InitTick+0x54>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_InitTick+0x58>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	4619      	mov	r1, r3
 80019a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 f965 	bl	8001c7e <HAL_SYSTICK_Config>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e00e      	b.n	80019dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b0f      	cmp	r3, #15
 80019c2:	d80a      	bhi.n	80019da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c4:	2200      	movs	r2, #0
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	f04f 30ff 	mov.w	r0, #4294967295
 80019cc:	f000 f92d 	bl	8001c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d0:	4a06      	ldr	r2, [pc, #24]	; (80019ec <HAL_InitTick+0x5c>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
 80019d8:	e000      	b.n	80019dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000000 	.word	0x20000000
 80019e8:	20000008 	.word	0x20000008
 80019ec:	20000004 	.word	0x20000004

080019f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <HAL_IncTick+0x20>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_IncTick+0x24>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4413      	add	r3, r2
 8001a00:	4a04      	ldr	r2, [pc, #16]	; (8001a14 <HAL_IncTick+0x24>)
 8001a02:	6013      	str	r3, [r2, #0]
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	20000008 	.word	0x20000008
 8001a14:	2000016c 	.word	0x2000016c

08001a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <HAL_GetTick+0x14>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	2000016c 	.word	0x2000016c

08001a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a38:	f7ff ffee 	bl	8001a18 <HAL_GetTick>
 8001a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a48:	d005      	beq.n	8001a56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <HAL_Delay+0x40>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4413      	add	r3, r2
 8001a54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a56:	bf00      	nop
 8001a58:	f7ff ffde 	bl	8001a18 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d8f7      	bhi.n	8001a58 <HAL_Delay+0x28>
  {
  }
}
 8001a68:	bf00      	nop
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000008 	.word	0x20000008

08001a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a84:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <__NVIC_SetPriorityGrouping+0x40>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a90:	4013      	ands	r3, r2
 8001a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aa2:	4a04      	ldr	r2, [pc, #16]	; (8001ab4 <__NVIC_SetPriorityGrouping+0x40>)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	60d3      	str	r3, [r2, #12]
}
 8001aa8:	bf00      	nop
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	e000ed00 	.word	0xe000ed00
 8001ab8:	05fa0000 	.word	0x05fa0000

08001abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac0:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	0a1b      	lsrs	r3, r3, #8
 8001ac6:	f003 0307 	and.w	r3, r3, #7
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	db0b      	blt.n	8001b02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	f003 021f 	and.w	r2, r3, #31
 8001af0:	4907      	ldr	r1, [pc, #28]	; (8001b10 <__NVIC_EnableIRQ+0x38>)
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	095b      	lsrs	r3, r3, #5
 8001af8:	2001      	movs	r0, #1
 8001afa:	fa00 f202 	lsl.w	r2, r0, r2
 8001afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000e100 	.word	0xe000e100

08001b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	6039      	str	r1, [r7, #0]
 8001b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	db0a      	blt.n	8001b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	490c      	ldr	r1, [pc, #48]	; (8001b60 <__NVIC_SetPriority+0x4c>)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	0112      	lsls	r2, r2, #4
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	440b      	add	r3, r1
 8001b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b3c:	e00a      	b.n	8001b54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4908      	ldr	r1, [pc, #32]	; (8001b64 <__NVIC_SetPriority+0x50>)
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	3b04      	subs	r3, #4
 8001b4c:	0112      	lsls	r2, r2, #4
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	440b      	add	r3, r1
 8001b52:	761a      	strb	r2, [r3, #24]
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000e100 	.word	0xe000e100
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b089      	sub	sp, #36	; 0x24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f1c3 0307 	rsb	r3, r3, #7
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	bf28      	it	cs
 8001b86:	2304      	movcs	r3, #4
 8001b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	2b06      	cmp	r3, #6
 8001b90:	d902      	bls.n	8001b98 <NVIC_EncodePriority+0x30>
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3b03      	subs	r3, #3
 8001b96:	e000      	b.n	8001b9a <NVIC_EncodePriority+0x32>
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43da      	mvns	r2, r3
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	401a      	ands	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bba:	43d9      	mvns	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc0:	4313      	orrs	r3, r2
         );
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3724      	adds	r7, #36	; 0x24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be0:	d301      	bcc.n	8001be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001be2:	2301      	movs	r3, #1
 8001be4:	e00f      	b.n	8001c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001be6:	4a0a      	ldr	r2, [pc, #40]	; (8001c10 <SysTick_Config+0x40>)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bee:	210f      	movs	r1, #15
 8001bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf4:	f7ff ff8e 	bl	8001b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <SysTick_Config+0x40>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bfe:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <SysTick_Config+0x40>)
 8001c00:	2207      	movs	r2, #7
 8001c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	e000e010 	.word	0xe000e010

08001c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff ff29 	bl	8001a74 <__NVIC_SetPriorityGrouping>
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b086      	sub	sp, #24
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	4603      	mov	r3, r0
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	607a      	str	r2, [r7, #4]
 8001c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c3c:	f7ff ff3e 	bl	8001abc <__NVIC_GetPriorityGrouping>
 8001c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	68b9      	ldr	r1, [r7, #8]
 8001c46:	6978      	ldr	r0, [r7, #20]
 8001c48:	f7ff ff8e 	bl	8001b68 <NVIC_EncodePriority>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c52:	4611      	mov	r1, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff5d 	bl	8001b14 <__NVIC_SetPriority>
}
 8001c5a:	bf00      	nop
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	4603      	mov	r3, r0
 8001c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff31 	bl	8001ad8 <__NVIC_EnableIRQ>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff ffa2 	bl	8001bd0 <SysTick_Config>
 8001c8c:	4603      	mov	r3, r0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ca4:	f7ff feb8 	bl	8001a18 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e099      	b.n	8001de8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 0201 	bic.w	r2, r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cd4:	e00f      	b.n	8001cf6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cd6:	f7ff fe9f 	bl	8001a18 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b05      	cmp	r3, #5
 8001ce2:	d908      	bls.n	8001cf6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2203      	movs	r2, #3
 8001cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e078      	b.n	8001de8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1e8      	bne.n	8001cd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	4b38      	ldr	r3, [pc, #224]	; (8001df0 <HAL_DMA_Init+0x158>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d107      	bne.n	8001d60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f023 0307 	bic.w	r3, r3, #7
 8001d76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d117      	bne.n	8001dba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00e      	beq.n	8001dba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f9e9 	bl	8002174 <DMA_CheckFifoParam>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d008      	beq.n	8001dba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2240      	movs	r2, #64	; 0x40
 8001dac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001db6:	2301      	movs	r3, #1
 8001db8:	e016      	b.n	8001de8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f9a0 	bl	8002108 <DMA_CalcBaseAndBitshift>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd0:	223f      	movs	r2, #63	; 0x3f
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	e010803f 	.word	0xe010803f

08001df4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001e00:	4b92      	ldr	r3, [pc, #584]	; (800204c <HAL_DMA_IRQHandler+0x258>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a92      	ldr	r2, [pc, #584]	; (8002050 <HAL_DMA_IRQHandler+0x25c>)
 8001e06:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0a:	0a9b      	lsrs	r3, r3, #10
 8001e0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1e:	2208      	movs	r2, #8
 8001e20:	409a      	lsls	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d01a      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d013      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0204 	bic.w	r2, r2, #4
 8001e46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4c:	2208      	movs	r2, #8
 8001e4e:	409a      	lsls	r2, r3
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e58:	f043 0201 	orr.w	r2, r3, #1
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e64:	2201      	movs	r2, #1
 8001e66:	409a      	lsls	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d012      	beq.n	8001e96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00b      	beq.n	8001e96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e82:	2201      	movs	r2, #1
 8001e84:	409a      	lsls	r2, r3
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8e:	f043 0202 	orr.w	r2, r3, #2
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9a:	2204      	movs	r2, #4
 8001e9c:	409a      	lsls	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d012      	beq.n	8001ecc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00b      	beq.n	8001ecc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb8:	2204      	movs	r2, #4
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec4:	f043 0204 	orr.w	r2, r3, #4
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed0:	2210      	movs	r2, #16
 8001ed2:	409a      	lsls	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d043      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d03c      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eee:	2210      	movs	r2, #16
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d018      	beq.n	8001f36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d108      	bne.n	8001f24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d024      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	4798      	blx	r3
 8001f22:	e01f      	b.n	8001f64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d01b      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	4798      	blx	r3
 8001f34:	e016      	b.n	8001f64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d107      	bne.n	8001f54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0208 	bic.w	r2, r2, #8
 8001f52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f68:	2220      	movs	r2, #32
 8001f6a:	409a      	lsls	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 808e 	beq.w	8002092 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0310 	and.w	r3, r3, #16
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 8086 	beq.w	8002092 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	409a      	lsls	r2, r3
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b05      	cmp	r3, #5
 8001f9c:	d136      	bne.n	800200c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0216 	bic.w	r2, r2, #22
 8001fac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	695a      	ldr	r2, [r3, #20]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fbc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d103      	bne.n	8001fce <HAL_DMA_IRQHandler+0x1da>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d007      	beq.n	8001fde <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0208 	bic.w	r2, r2, #8
 8001fdc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe2:	223f      	movs	r2, #63	; 0x3f
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d07d      	beq.n	80020fe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	4798      	blx	r3
        }
        return;
 800200a:	e078      	b.n	80020fe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d01c      	beq.n	8002054 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d108      	bne.n	800203a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202c:	2b00      	cmp	r3, #0
 800202e:	d030      	beq.n	8002092 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	4798      	blx	r3
 8002038:	e02b      	b.n	8002092 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203e:	2b00      	cmp	r3, #0
 8002040:	d027      	beq.n	8002092 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	4798      	blx	r3
 800204a:	e022      	b.n	8002092 <HAL_DMA_IRQHandler+0x29e>
 800204c:	20000000 	.word	0x20000000
 8002050:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10f      	bne.n	8002082 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0210 	bic.w	r2, r2, #16
 8002070:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002096:	2b00      	cmp	r3, #0
 8002098:	d032      	beq.n	8002100 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d022      	beq.n	80020ec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2205      	movs	r2, #5
 80020aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 0201 	bic.w	r2, r2, #1
 80020bc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	3301      	adds	r3, #1
 80020c2:	60bb      	str	r3, [r7, #8]
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d307      	bcc.n	80020da <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1f2      	bne.n	80020be <HAL_DMA_IRQHandler+0x2ca>
 80020d8:	e000      	b.n	80020dc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80020da:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d005      	beq.n	8002100 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	4798      	blx	r3
 80020fc:	e000      	b.n	8002100 <HAL_DMA_IRQHandler+0x30c>
        return;
 80020fe:	bf00      	nop
    }
  }
}
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop

08002108 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	3b10      	subs	r3, #16
 8002118:	4a13      	ldr	r2, [pc, #76]	; (8002168 <DMA_CalcBaseAndBitshift+0x60>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	091b      	lsrs	r3, r3, #4
 8002120:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002122:	4a12      	ldr	r2, [pc, #72]	; (800216c <DMA_CalcBaseAndBitshift+0x64>)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4413      	add	r3, r2
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b03      	cmp	r3, #3
 8002134:	d908      	bls.n	8002148 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	461a      	mov	r2, r3
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <DMA_CalcBaseAndBitshift+0x68>)
 800213e:	4013      	ands	r3, r2
 8002140:	1d1a      	adds	r2, r3, #4
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	659a      	str	r2, [r3, #88]	; 0x58
 8002146:	e006      	b.n	8002156 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	461a      	mov	r2, r3
 800214e:	4b08      	ldr	r3, [pc, #32]	; (8002170 <DMA_CalcBaseAndBitshift+0x68>)
 8002150:	4013      	ands	r3, r2
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800215a:	4618      	mov	r0, r3
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	aaaaaaab 	.word	0xaaaaaaab
 800216c:	0800477c 	.word	0x0800477c
 8002170:	fffffc00 	.word	0xfffffc00

08002174 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800217c:	2300      	movs	r3, #0
 800217e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002184:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d11f      	bne.n	80021ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2b03      	cmp	r3, #3
 8002192:	d855      	bhi.n	8002240 <DMA_CheckFifoParam+0xcc>
 8002194:	a201      	add	r2, pc, #4	; (adr r2, 800219c <DMA_CheckFifoParam+0x28>)
 8002196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800219a:	bf00      	nop
 800219c:	080021ad 	.word	0x080021ad
 80021a0:	080021bf 	.word	0x080021bf
 80021a4:	080021ad 	.word	0x080021ad
 80021a8:	08002241 	.word	0x08002241
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d045      	beq.n	8002244 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021bc:	e042      	b.n	8002244 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021c6:	d13f      	bne.n	8002248 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021cc:	e03c      	b.n	8002248 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021d6:	d121      	bne.n	800221c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d836      	bhi.n	800224c <DMA_CheckFifoParam+0xd8>
 80021de:	a201      	add	r2, pc, #4	; (adr r2, 80021e4 <DMA_CheckFifoParam+0x70>)
 80021e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e4:	080021f5 	.word	0x080021f5
 80021e8:	080021fb 	.word	0x080021fb
 80021ec:	080021f5 	.word	0x080021f5
 80021f0:	0800220d 	.word	0x0800220d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
      break;
 80021f8:	e02f      	b.n	800225a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d024      	beq.n	8002250 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800220a:	e021      	b.n	8002250 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002210:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002214:	d11e      	bne.n	8002254 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800221a:	e01b      	b.n	8002254 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d902      	bls.n	8002228 <DMA_CheckFifoParam+0xb4>
 8002222:	2b03      	cmp	r3, #3
 8002224:	d003      	beq.n	800222e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002226:	e018      	b.n	800225a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
      break;
 800222c:	e015      	b.n	800225a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002232:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00e      	beq.n	8002258 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	73fb      	strb	r3, [r7, #15]
      break;
 800223e:	e00b      	b.n	8002258 <DMA_CheckFifoParam+0xe4>
      break;
 8002240:	bf00      	nop
 8002242:	e00a      	b.n	800225a <DMA_CheckFifoParam+0xe6>
      break;
 8002244:	bf00      	nop
 8002246:	e008      	b.n	800225a <DMA_CheckFifoParam+0xe6>
      break;
 8002248:	bf00      	nop
 800224a:	e006      	b.n	800225a <DMA_CheckFifoParam+0xe6>
      break;
 800224c:	bf00      	nop
 800224e:	e004      	b.n	800225a <DMA_CheckFifoParam+0xe6>
      break;
 8002250:	bf00      	nop
 8002252:	e002      	b.n	800225a <DMA_CheckFifoParam+0xe6>
      break;   
 8002254:	bf00      	nop
 8002256:	e000      	b.n	800225a <DMA_CheckFifoParam+0xe6>
      break;
 8002258:	bf00      	nop
    }
  } 
  
  return status; 
 800225a:	7bfb      	ldrb	r3, [r7, #15]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002268:	b480      	push	{r7}
 800226a:	b089      	sub	sp, #36	; 0x24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800227a:	2300      	movs	r3, #0
 800227c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800227e:	2300      	movs	r3, #0
 8002280:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
 8002286:	e175      	b.n	8002574 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002288:	2201      	movs	r2, #1
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	4013      	ands	r3, r2
 800229a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	f040 8164 	bne.w	800256e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d00b      	beq.n	80022c6 <HAL_GPIO_Init+0x5e>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d007      	beq.n	80022c6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022ba:	2b11      	cmp	r3, #17
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b12      	cmp	r3, #18
 80022c4:	d130      	bne.n	8002328 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	2203      	movs	r2, #3
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022fc:	2201      	movs	r2, #1
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	091b      	lsrs	r3, r3, #4
 8002312:	f003 0201 	and.w	r2, r3, #1
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	2203      	movs	r2, #3
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b02      	cmp	r3, #2
 800235e:	d003      	beq.n	8002368 <HAL_GPIO_Init+0x100>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b12      	cmp	r3, #18
 8002366:	d123      	bne.n	80023b0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	08da      	lsrs	r2, r3, #3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3208      	adds	r2, #8
 8002370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	220f      	movs	r2, #15
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	08da      	lsrs	r2, r3, #3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3208      	adds	r2, #8
 80023aa:	69b9      	ldr	r1, [r7, #24]
 80023ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	2203      	movs	r2, #3
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0203 	and.w	r2, r3, #3
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 80be 	beq.w	800256e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f2:	4b65      	ldr	r3, [pc, #404]	; (8002588 <HAL_GPIO_Init+0x320>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	4a64      	ldr	r2, [pc, #400]	; (8002588 <HAL_GPIO_Init+0x320>)
 80023f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023fc:	6453      	str	r3, [r2, #68]	; 0x44
 80023fe:	4b62      	ldr	r3, [pc, #392]	; (8002588 <HAL_GPIO_Init+0x320>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800240a:	4a60      	ldr	r2, [pc, #384]	; (800258c <HAL_GPIO_Init+0x324>)
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	089b      	lsrs	r3, r3, #2
 8002410:	3302      	adds	r3, #2
 8002412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	220f      	movs	r2, #15
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4013      	ands	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a57      	ldr	r2, [pc, #348]	; (8002590 <HAL_GPIO_Init+0x328>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d037      	beq.n	80024a6 <HAL_GPIO_Init+0x23e>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a56      	ldr	r2, [pc, #344]	; (8002594 <HAL_GPIO_Init+0x32c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d031      	beq.n	80024a2 <HAL_GPIO_Init+0x23a>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a55      	ldr	r2, [pc, #340]	; (8002598 <HAL_GPIO_Init+0x330>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d02b      	beq.n	800249e <HAL_GPIO_Init+0x236>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a54      	ldr	r2, [pc, #336]	; (800259c <HAL_GPIO_Init+0x334>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d025      	beq.n	800249a <HAL_GPIO_Init+0x232>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a53      	ldr	r2, [pc, #332]	; (80025a0 <HAL_GPIO_Init+0x338>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d01f      	beq.n	8002496 <HAL_GPIO_Init+0x22e>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a52      	ldr	r2, [pc, #328]	; (80025a4 <HAL_GPIO_Init+0x33c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d019      	beq.n	8002492 <HAL_GPIO_Init+0x22a>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a51      	ldr	r2, [pc, #324]	; (80025a8 <HAL_GPIO_Init+0x340>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d013      	beq.n	800248e <HAL_GPIO_Init+0x226>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a50      	ldr	r2, [pc, #320]	; (80025ac <HAL_GPIO_Init+0x344>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d00d      	beq.n	800248a <HAL_GPIO_Init+0x222>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a4f      	ldr	r2, [pc, #316]	; (80025b0 <HAL_GPIO_Init+0x348>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d007      	beq.n	8002486 <HAL_GPIO_Init+0x21e>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a4e      	ldr	r2, [pc, #312]	; (80025b4 <HAL_GPIO_Init+0x34c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d101      	bne.n	8002482 <HAL_GPIO_Init+0x21a>
 800247e:	2309      	movs	r3, #9
 8002480:	e012      	b.n	80024a8 <HAL_GPIO_Init+0x240>
 8002482:	230a      	movs	r3, #10
 8002484:	e010      	b.n	80024a8 <HAL_GPIO_Init+0x240>
 8002486:	2308      	movs	r3, #8
 8002488:	e00e      	b.n	80024a8 <HAL_GPIO_Init+0x240>
 800248a:	2307      	movs	r3, #7
 800248c:	e00c      	b.n	80024a8 <HAL_GPIO_Init+0x240>
 800248e:	2306      	movs	r3, #6
 8002490:	e00a      	b.n	80024a8 <HAL_GPIO_Init+0x240>
 8002492:	2305      	movs	r3, #5
 8002494:	e008      	b.n	80024a8 <HAL_GPIO_Init+0x240>
 8002496:	2304      	movs	r3, #4
 8002498:	e006      	b.n	80024a8 <HAL_GPIO_Init+0x240>
 800249a:	2303      	movs	r3, #3
 800249c:	e004      	b.n	80024a8 <HAL_GPIO_Init+0x240>
 800249e:	2302      	movs	r3, #2
 80024a0:	e002      	b.n	80024a8 <HAL_GPIO_Init+0x240>
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <HAL_GPIO_Init+0x240>
 80024a6:	2300      	movs	r3, #0
 80024a8:	69fa      	ldr	r2, [r7, #28]
 80024aa:	f002 0203 	and.w	r2, r2, #3
 80024ae:	0092      	lsls	r2, r2, #2
 80024b0:	4093      	lsls	r3, r2
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80024b8:	4934      	ldr	r1, [pc, #208]	; (800258c <HAL_GPIO_Init+0x324>)
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	089b      	lsrs	r3, r3, #2
 80024be:	3302      	adds	r3, #2
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024c6:	4b3c      	ldr	r3, [pc, #240]	; (80025b8 <HAL_GPIO_Init+0x350>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	43db      	mvns	r3, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4013      	ands	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024ea:	4a33      	ldr	r2, [pc, #204]	; (80025b8 <HAL_GPIO_Init+0x350>)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024f0:	4b31      	ldr	r3, [pc, #196]	; (80025b8 <HAL_GPIO_Init+0x350>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002514:	4a28      	ldr	r2, [pc, #160]	; (80025b8 <HAL_GPIO_Init+0x350>)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800251a:	4b27      	ldr	r3, [pc, #156]	; (80025b8 <HAL_GPIO_Init+0x350>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800253e:	4a1e      	ldr	r2, [pc, #120]	; (80025b8 <HAL_GPIO_Init+0x350>)
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002544:	4b1c      	ldr	r3, [pc, #112]	; (80025b8 <HAL_GPIO_Init+0x350>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002568:	4a13      	ldr	r2, [pc, #76]	; (80025b8 <HAL_GPIO_Init+0x350>)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3301      	adds	r3, #1
 8002572:	61fb      	str	r3, [r7, #28]
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	2b0f      	cmp	r3, #15
 8002578:	f67f ae86 	bls.w	8002288 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800257c:	bf00      	nop
 800257e:	3724      	adds	r7, #36	; 0x24
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	40023800 	.word	0x40023800
 800258c:	40013800 	.word	0x40013800
 8002590:	40020000 	.word	0x40020000
 8002594:	40020400 	.word	0x40020400
 8002598:	40020800 	.word	0x40020800
 800259c:	40020c00 	.word	0x40020c00
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40021400 	.word	0x40021400
 80025a8:	40021800 	.word	0x40021800
 80025ac:	40021c00 	.word	0x40021c00
 80025b0:	40022000 	.word	0x40022000
 80025b4:	40022400 	.word	0x40022400
 80025b8:	40013c00 	.word	0x40013c00

080025bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	807b      	strh	r3, [r7, #2]
 80025c8:	4613      	mov	r3, r2
 80025ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025cc:	787b      	ldrb	r3, [r7, #1]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025d2:	887a      	ldrh	r2, [r7, #2]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80025d8:	e003      	b.n	80025e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80025da:	887b      	ldrh	r3, [r7, #2]
 80025dc:	041a      	lsls	r2, r3, #16
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	619a      	str	r2, [r3, #24]
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
	...

080025f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80025fa:	4b23      	ldr	r3, [pc, #140]	; (8002688 <HAL_PWREx_EnableOverDrive+0x98>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	4a22      	ldr	r2, [pc, #136]	; (8002688 <HAL_PWREx_EnableOverDrive+0x98>)
 8002600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002604:	6413      	str	r3, [r2, #64]	; 0x40
 8002606:	4b20      	ldr	r3, [pc, #128]	; (8002688 <HAL_PWREx_EnableOverDrive+0x98>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260e:	603b      	str	r3, [r7, #0]
 8002610:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002612:	4b1e      	ldr	r3, [pc, #120]	; (800268c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a1d      	ldr	r2, [pc, #116]	; (800268c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800261e:	f7ff f9fb 	bl	8001a18 <HAL_GetTick>
 8002622:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002624:	e009      	b.n	800263a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002626:	f7ff f9f7 	bl	8001a18 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002634:	d901      	bls.n	800263a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e022      	b.n	8002680 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800263a:	4b14      	ldr	r3, [pc, #80]	; (800268c <HAL_PWREx_EnableOverDrive+0x9c>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002646:	d1ee      	bne.n	8002626 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002648:	4b10      	ldr	r3, [pc, #64]	; (800268c <HAL_PWREx_EnableOverDrive+0x9c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a0f      	ldr	r2, [pc, #60]	; (800268c <HAL_PWREx_EnableOverDrive+0x9c>)
 800264e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002652:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002654:	f7ff f9e0 	bl	8001a18 <HAL_GetTick>
 8002658:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800265a:	e009      	b.n	8002670 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800265c:	f7ff f9dc 	bl	8001a18 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800266a:	d901      	bls.n	8002670 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e007      	b.n	8002680 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002678:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800267c:	d1ee      	bne.n	800265c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40023800 	.word	0x40023800
 800268c:	40007000 	.word	0x40007000

08002690 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002698:	2300      	movs	r3, #0
 800269a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e29b      	b.n	8002bde <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 8087 	beq.w	80027c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026b4:	4b96      	ldr	r3, [pc, #600]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 030c 	and.w	r3, r3, #12
 80026bc:	2b04      	cmp	r3, #4
 80026be:	d00c      	beq.n	80026da <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026c0:	4b93      	ldr	r3, [pc, #588]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 030c 	and.w	r3, r3, #12
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d112      	bne.n	80026f2 <HAL_RCC_OscConfig+0x62>
 80026cc:	4b90      	ldr	r3, [pc, #576]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026d8:	d10b      	bne.n	80026f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026da:	4b8d      	ldr	r3, [pc, #564]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d06c      	beq.n	80027c0 <HAL_RCC_OscConfig+0x130>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d168      	bne.n	80027c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e275      	b.n	8002bde <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026fa:	d106      	bne.n	800270a <HAL_RCC_OscConfig+0x7a>
 80026fc:	4b84      	ldr	r3, [pc, #528]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a83      	ldr	r2, [pc, #524]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 8002702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002706:	6013      	str	r3, [r2, #0]
 8002708:	e02e      	b.n	8002768 <HAL_RCC_OscConfig+0xd8>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10c      	bne.n	800272c <HAL_RCC_OscConfig+0x9c>
 8002712:	4b7f      	ldr	r3, [pc, #508]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a7e      	ldr	r2, [pc, #504]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 8002718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	4b7c      	ldr	r3, [pc, #496]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a7b      	ldr	r2, [pc, #492]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 8002724:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	e01d      	b.n	8002768 <HAL_RCC_OscConfig+0xd8>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002734:	d10c      	bne.n	8002750 <HAL_RCC_OscConfig+0xc0>
 8002736:	4b76      	ldr	r3, [pc, #472]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a75      	ldr	r2, [pc, #468]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 800273c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	4b73      	ldr	r3, [pc, #460]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a72      	ldr	r2, [pc, #456]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 8002748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	e00b      	b.n	8002768 <HAL_RCC_OscConfig+0xd8>
 8002750:	4b6f      	ldr	r3, [pc, #444]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a6e      	ldr	r2, [pc, #440]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 8002756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800275a:	6013      	str	r3, [r2, #0]
 800275c:	4b6c      	ldr	r3, [pc, #432]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a6b      	ldr	r2, [pc, #428]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 8002762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d013      	beq.n	8002798 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002770:	f7ff f952 	bl	8001a18 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002778:	f7ff f94e 	bl	8001a18 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b64      	cmp	r3, #100	; 0x64
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e229      	b.n	8002bde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278a:	4b61      	ldr	r3, [pc, #388]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0xe8>
 8002796:	e014      	b.n	80027c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002798:	f7ff f93e 	bl	8001a18 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a0:	f7ff f93a 	bl	8001a18 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b64      	cmp	r3, #100	; 0x64
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e215      	b.n	8002bde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027b2:	4b57      	ldr	r3, [pc, #348]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0x110>
 80027be:	e000      	b.n	80027c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d069      	beq.n	80028a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027ce:	4b50      	ldr	r3, [pc, #320]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 030c 	and.w	r3, r3, #12
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00b      	beq.n	80027f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027da:	4b4d      	ldr	r3, [pc, #308]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 030c 	and.w	r3, r3, #12
 80027e2:	2b08      	cmp	r3, #8
 80027e4:	d11c      	bne.n	8002820 <HAL_RCC_OscConfig+0x190>
 80027e6:	4b4a      	ldr	r3, [pc, #296]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d116      	bne.n	8002820 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f2:	4b47      	ldr	r3, [pc, #284]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d005      	beq.n	800280a <HAL_RCC_OscConfig+0x17a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d001      	beq.n	800280a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e1e9      	b.n	8002bde <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280a:	4b41      	ldr	r3, [pc, #260]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	493d      	ldr	r1, [pc, #244]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 800281a:	4313      	orrs	r3, r2
 800281c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800281e:	e040      	b.n	80028a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d023      	beq.n	8002870 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002828:	4b39      	ldr	r3, [pc, #228]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a38      	ldr	r2, [pc, #224]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002834:	f7ff f8f0 	bl	8001a18 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800283c:	f7ff f8ec 	bl	8001a18 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e1c7      	b.n	8002bde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284e:	4b30      	ldr	r3, [pc, #192]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f0      	beq.n	800283c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285a:	4b2d      	ldr	r3, [pc, #180]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	4929      	ldr	r1, [pc, #164]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 800286a:	4313      	orrs	r3, r2
 800286c:	600b      	str	r3, [r1, #0]
 800286e:	e018      	b.n	80028a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002870:	4b27      	ldr	r3, [pc, #156]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a26      	ldr	r2, [pc, #152]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 8002876:	f023 0301 	bic.w	r3, r3, #1
 800287a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287c:	f7ff f8cc 	bl	8001a18 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002884:	f7ff f8c8 	bl	8001a18 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e1a3      	b.n	8002bde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002896:	4b1e      	ldr	r3, [pc, #120]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f0      	bne.n	8002884 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d038      	beq.n	8002920 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d019      	beq.n	80028ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028b6:	4b16      	ldr	r3, [pc, #88]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 80028b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ba:	4a15      	ldr	r2, [pc, #84]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c2:	f7ff f8a9 	bl	8001a18 <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ca:	f7ff f8a5 	bl	8001a18 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e180      	b.n	8002bde <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028dc:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 80028de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0f0      	beq.n	80028ca <HAL_RCC_OscConfig+0x23a>
 80028e8:	e01a      	b.n	8002920 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ea:	4b09      	ldr	r3, [pc, #36]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 80028ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ee:	4a08      	ldr	r2, [pc, #32]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f6:	f7ff f88f 	bl	8001a18 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028fc:	e00a      	b.n	8002914 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028fe:	f7ff f88b 	bl	8001a18 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d903      	bls.n	8002914 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e166      	b.n	8002bde <HAL_RCC_OscConfig+0x54e>
 8002910:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002914:	4b92      	ldr	r3, [pc, #584]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 8002916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1ee      	bne.n	80028fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 80a4 	beq.w	8002a76 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800292e:	4b8c      	ldr	r3, [pc, #560]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10d      	bne.n	8002956 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800293a:	4b89      	ldr	r3, [pc, #548]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	4a88      	ldr	r2, [pc, #544]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 8002940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002944:	6413      	str	r3, [r2, #64]	; 0x40
 8002946:	4b86      	ldr	r3, [pc, #536]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294e:	60bb      	str	r3, [r7, #8]
 8002950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002952:	2301      	movs	r3, #1
 8002954:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002956:	4b83      	ldr	r3, [pc, #524]	; (8002b64 <HAL_RCC_OscConfig+0x4d4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295e:	2b00      	cmp	r3, #0
 8002960:	d118      	bne.n	8002994 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002962:	4b80      	ldr	r3, [pc, #512]	; (8002b64 <HAL_RCC_OscConfig+0x4d4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a7f      	ldr	r2, [pc, #508]	; (8002b64 <HAL_RCC_OscConfig+0x4d4>)
 8002968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800296c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800296e:	f7ff f853 	bl	8001a18 <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002976:	f7ff f84f 	bl	8001a18 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b64      	cmp	r3, #100	; 0x64
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e12a      	b.n	8002bde <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002988:	4b76      	ldr	r3, [pc, #472]	; (8002b64 <HAL_RCC_OscConfig+0x4d4>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0f0      	beq.n	8002976 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d106      	bne.n	80029aa <HAL_RCC_OscConfig+0x31a>
 800299c:	4b70      	ldr	r3, [pc, #448]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 800299e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a0:	4a6f      	ldr	r2, [pc, #444]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	6713      	str	r3, [r2, #112]	; 0x70
 80029a8:	e02d      	b.n	8002a06 <HAL_RCC_OscConfig+0x376>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10c      	bne.n	80029cc <HAL_RCC_OscConfig+0x33c>
 80029b2:	4b6b      	ldr	r3, [pc, #428]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 80029b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b6:	4a6a      	ldr	r2, [pc, #424]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 80029b8:	f023 0301 	bic.w	r3, r3, #1
 80029bc:	6713      	str	r3, [r2, #112]	; 0x70
 80029be:	4b68      	ldr	r3, [pc, #416]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c2:	4a67      	ldr	r2, [pc, #412]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 80029c4:	f023 0304 	bic.w	r3, r3, #4
 80029c8:	6713      	str	r3, [r2, #112]	; 0x70
 80029ca:	e01c      	b.n	8002a06 <HAL_RCC_OscConfig+0x376>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	2b05      	cmp	r3, #5
 80029d2:	d10c      	bne.n	80029ee <HAL_RCC_OscConfig+0x35e>
 80029d4:	4b62      	ldr	r3, [pc, #392]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 80029d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d8:	4a61      	ldr	r2, [pc, #388]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 80029da:	f043 0304 	orr.w	r3, r3, #4
 80029de:	6713      	str	r3, [r2, #112]	; 0x70
 80029e0:	4b5f      	ldr	r3, [pc, #380]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e4:	4a5e      	ldr	r2, [pc, #376]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	6713      	str	r3, [r2, #112]	; 0x70
 80029ec:	e00b      	b.n	8002a06 <HAL_RCC_OscConfig+0x376>
 80029ee:	4b5c      	ldr	r3, [pc, #368]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 80029f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f2:	4a5b      	ldr	r2, [pc, #364]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 80029f4:	f023 0301 	bic.w	r3, r3, #1
 80029f8:	6713      	str	r3, [r2, #112]	; 0x70
 80029fa:	4b59      	ldr	r3, [pc, #356]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 80029fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fe:	4a58      	ldr	r2, [pc, #352]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 8002a00:	f023 0304 	bic.w	r3, r3, #4
 8002a04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d015      	beq.n	8002a3a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0e:	f7ff f803 	bl	8001a18 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a14:	e00a      	b.n	8002a2c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a16:	f7fe ffff 	bl	8001a18 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e0d8      	b.n	8002bde <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a2c:	4b4c      	ldr	r3, [pc, #304]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0ee      	beq.n	8002a16 <HAL_RCC_OscConfig+0x386>
 8002a38:	e014      	b.n	8002a64 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3a:	f7fe ffed 	bl	8001a18 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a40:	e00a      	b.n	8002a58 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a42:	f7fe ffe9 	bl	8001a18 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e0c2      	b.n	8002bde <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a58:	4b41      	ldr	r3, [pc, #260]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 8002a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1ee      	bne.n	8002a42 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a64:	7dfb      	ldrb	r3, [r7, #23]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d105      	bne.n	8002a76 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a6a:	4b3d      	ldr	r3, [pc, #244]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	4a3c      	ldr	r2, [pc, #240]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 8002a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 80ae 	beq.w	8002bdc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a80:	4b37      	ldr	r3, [pc, #220]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 030c 	and.w	r3, r3, #12
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d06d      	beq.n	8002b68 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d14b      	bne.n	8002b2c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a94:	4b32      	ldr	r3, [pc, #200]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a31      	ldr	r2, [pc, #196]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 8002a9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa0:	f7fe ffba 	bl	8001a18 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa8:	f7fe ffb6 	bl	8001a18 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e091      	b.n	8002bde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aba:	4b29      	ldr	r3, [pc, #164]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f0      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69da      	ldr	r2, [r3, #28]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	019b      	lsls	r3, r3, #6
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002adc:	085b      	lsrs	r3, r3, #1
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	041b      	lsls	r3, r3, #16
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	061b      	lsls	r3, r3, #24
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af0:	071b      	lsls	r3, r3, #28
 8002af2:	491b      	ldr	r1, [pc, #108]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002af8:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a18      	ldr	r2, [pc, #96]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 8002afe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b04:	f7fe ff88 	bl	8001a18 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b0c:	f7fe ff84 	bl	8001a18 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e05f      	b.n	8002bde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1e:	4b10      	ldr	r3, [pc, #64]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0f0      	beq.n	8002b0c <HAL_RCC_OscConfig+0x47c>
 8002b2a:	e057      	b.n	8002bdc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b2c:	4b0c      	ldr	r3, [pc, #48]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a0b      	ldr	r2, [pc, #44]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 8002b32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b38:	f7fe ff6e 	bl	8001a18 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b40:	f7fe ff6a 	bl	8001a18 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e045      	b.n	8002bde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b52:	4b03      	ldr	r3, [pc, #12]	; (8002b60 <HAL_RCC_OscConfig+0x4d0>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1f0      	bne.n	8002b40 <HAL_RCC_OscConfig+0x4b0>
 8002b5e:	e03d      	b.n	8002bdc <HAL_RCC_OscConfig+0x54c>
 8002b60:	40023800 	.word	0x40023800
 8002b64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002b68:	4b1f      	ldr	r3, [pc, #124]	; (8002be8 <HAL_RCC_OscConfig+0x558>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d030      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d129      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d122      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b98:	4013      	ands	r3, r2
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b9e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d119      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bae:	085b      	lsrs	r3, r3, #1
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d10f      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d107      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d001      	beq.n	8002bdc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e000      	b.n	8002bde <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40023800 	.word	0x40023800

08002bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e0d0      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c04:	4b6a      	ldr	r3, [pc, #424]	; (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 030f 	and.w	r3, r3, #15
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d910      	bls.n	8002c34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c12:	4b67      	ldr	r3, [pc, #412]	; (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f023 020f 	bic.w	r2, r3, #15
 8002c1a:	4965      	ldr	r1, [pc, #404]	; (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c22:	4b63      	ldr	r3, [pc, #396]	; (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d001      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e0b8      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d020      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d005      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c4c:	4b59      	ldr	r3, [pc, #356]	; (8002db4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	4a58      	ldr	r2, [pc, #352]	; (8002db4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0308 	and.w	r3, r3, #8
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c64:	4b53      	ldr	r3, [pc, #332]	; (8002db4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	4a52      	ldr	r2, [pc, #328]	; (8002db4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c70:	4b50      	ldr	r3, [pc, #320]	; (8002db4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	494d      	ldr	r1, [pc, #308]	; (8002db4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d040      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d107      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c96:	4b47      	ldr	r3, [pc, #284]	; (8002db4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d115      	bne.n	8002cce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e07f      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d107      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cae:	4b41      	ldr	r3, [pc, #260]	; (8002db4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d109      	bne.n	8002cce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e073      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cbe:	4b3d      	ldr	r3, [pc, #244]	; (8002db4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e06b      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cce:	4b39      	ldr	r3, [pc, #228]	; (8002db4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f023 0203 	bic.w	r2, r3, #3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	4936      	ldr	r1, [pc, #216]	; (8002db4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ce0:	f7fe fe9a 	bl	8001a18 <HAL_GetTick>
 8002ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce6:	e00a      	b.n	8002cfe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce8:	f7fe fe96 	bl	8001a18 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e053      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfe:	4b2d      	ldr	r3, [pc, #180]	; (8002db4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 020c 	and.w	r2, r3, #12
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d1eb      	bne.n	8002ce8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d10:	4b27      	ldr	r3, [pc, #156]	; (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 030f 	and.w	r3, r3, #15
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d210      	bcs.n	8002d40 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1e:	4b24      	ldr	r3, [pc, #144]	; (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f023 020f 	bic.w	r2, r3, #15
 8002d26:	4922      	ldr	r1, [pc, #136]	; (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2e:	4b20      	ldr	r3, [pc, #128]	; (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d001      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e032      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d4c:	4b19      	ldr	r3, [pc, #100]	; (8002db4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	4916      	ldr	r1, [pc, #88]	; (8002db4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d009      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d6a:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	490e      	ldr	r1, [pc, #56]	; (8002db4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d7e:	f000 f821 	bl	8002dc4 <HAL_RCC_GetSysClockFreq>
 8002d82:	4601      	mov	r1, r0
 8002d84:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	091b      	lsrs	r3, r3, #4
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	4a0a      	ldr	r2, [pc, #40]	; (8002db8 <HAL_RCC_ClockConfig+0x1cc>)
 8002d90:	5cd3      	ldrb	r3, [r2, r3]
 8002d92:	fa21 f303 	lsr.w	r3, r1, r3
 8002d96:	4a09      	ldr	r2, [pc, #36]	; (8002dbc <HAL_RCC_ClockConfig+0x1d0>)
 8002d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d9a:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <HAL_RCC_ClockConfig+0x1d4>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fe fdf6 	bl	8001990 <HAL_InitTick>

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40023c00 	.word	0x40023c00
 8002db4:	40023800 	.word	0x40023800
 8002db8:	08004764 	.word	0x08004764
 8002dbc:	20000000 	.word	0x20000000
 8002dc0:	20000004 	.word	0x20000004

08002dc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	607b      	str	r3, [r7, #4]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dda:	4b50      	ldr	r3, [pc, #320]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x158>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 030c 	and.w	r3, r3, #12
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d007      	beq.n	8002df6 <HAL_RCC_GetSysClockFreq+0x32>
 8002de6:	2b08      	cmp	r3, #8
 8002de8:	d008      	beq.n	8002dfc <HAL_RCC_GetSysClockFreq+0x38>
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f040 808d 	bne.w	8002f0a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002df0:	4b4b      	ldr	r3, [pc, #300]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002df2:	60bb      	str	r3, [r7, #8]
      break;
 8002df4:	e08c      	b.n	8002f10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002df6:	4b4b      	ldr	r3, [pc, #300]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x160>)
 8002df8:	60bb      	str	r3, [r7, #8]
      break;
 8002dfa:	e089      	b.n	8002f10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dfc:	4b47      	ldr	r3, [pc, #284]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x158>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e04:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002e06:	4b45      	ldr	r3, [pc, #276]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x158>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d023      	beq.n	8002e5a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e12:	4b42      	ldr	r3, [pc, #264]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x158>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	099b      	lsrs	r3, r3, #6
 8002e18:	f04f 0400 	mov.w	r4, #0
 8002e1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	ea03 0501 	and.w	r5, r3, r1
 8002e28:	ea04 0602 	and.w	r6, r4, r2
 8002e2c:	4a3d      	ldr	r2, [pc, #244]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e2e:	fb02 f106 	mul.w	r1, r2, r6
 8002e32:	2200      	movs	r2, #0
 8002e34:	fb02 f205 	mul.w	r2, r2, r5
 8002e38:	440a      	add	r2, r1
 8002e3a:	493a      	ldr	r1, [pc, #232]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e3c:	fba5 0101 	umull	r0, r1, r5, r1
 8002e40:	1853      	adds	r3, r2, r1
 8002e42:	4619      	mov	r1, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f04f 0400 	mov.w	r4, #0
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	4623      	mov	r3, r4
 8002e4e:	f7fd f9f3 	bl	8000238 <__aeabi_uldivmod>
 8002e52:	4603      	mov	r3, r0
 8002e54:	460c      	mov	r4, r1
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	e049      	b.n	8002eee <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e5a:	4b30      	ldr	r3, [pc, #192]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x158>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	099b      	lsrs	r3, r3, #6
 8002e60:	f04f 0400 	mov.w	r4, #0
 8002e64:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	ea03 0501 	and.w	r5, r3, r1
 8002e70:	ea04 0602 	and.w	r6, r4, r2
 8002e74:	4629      	mov	r1, r5
 8002e76:	4632      	mov	r2, r6
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	f04f 0400 	mov.w	r4, #0
 8002e80:	0154      	lsls	r4, r2, #5
 8002e82:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e86:	014b      	lsls	r3, r1, #5
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4622      	mov	r2, r4
 8002e8c:	1b49      	subs	r1, r1, r5
 8002e8e:	eb62 0206 	sbc.w	r2, r2, r6
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	f04f 0400 	mov.w	r4, #0
 8002e9a:	0194      	lsls	r4, r2, #6
 8002e9c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ea0:	018b      	lsls	r3, r1, #6
 8002ea2:	1a5b      	subs	r3, r3, r1
 8002ea4:	eb64 0402 	sbc.w	r4, r4, r2
 8002ea8:	f04f 0100 	mov.w	r1, #0
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	00e2      	lsls	r2, r4, #3
 8002eb2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002eb6:	00d9      	lsls	r1, r3, #3
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4614      	mov	r4, r2
 8002ebc:	195b      	adds	r3, r3, r5
 8002ebe:	eb44 0406 	adc.w	r4, r4, r6
 8002ec2:	f04f 0100 	mov.w	r1, #0
 8002ec6:	f04f 0200 	mov.w	r2, #0
 8002eca:	02a2      	lsls	r2, r4, #10
 8002ecc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ed0:	0299      	lsls	r1, r3, #10
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4614      	mov	r4, r2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	4621      	mov	r1, r4
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f04f 0400 	mov.w	r4, #0
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4623      	mov	r3, r4
 8002ee4:	f7fd f9a8 	bl	8000238 <__aeabi_uldivmod>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	460c      	mov	r4, r1
 8002eec:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002eee:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x158>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	0c1b      	lsrs	r3, r3, #16
 8002ef4:	f003 0303 	and.w	r3, r3, #3
 8002ef8:	3301      	adds	r3, #1
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f06:	60bb      	str	r3, [r7, #8]
      break;
 8002f08:	e002      	b.n	8002f10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f0a:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002f0c:	60bb      	str	r3, [r7, #8]
      break;
 8002f0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f10:	68bb      	ldr	r3, [r7, #8]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	00f42400 	.word	0x00f42400
 8002f24:	017d7840 	.word	0x017d7840

08002f28 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f2c:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	20000000 	.word	0x20000000

08002f40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f44:	f7ff fff0 	bl	8002f28 <HAL_RCC_GetHCLKFreq>
 8002f48:	4601      	mov	r1, r0
 8002f4a:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	0a9b      	lsrs	r3, r3, #10
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	4a03      	ldr	r2, [pc, #12]	; (8002f64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f56:	5cd3      	ldrb	r3, [r2, r3]
 8002f58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40023800 	.word	0x40023800
 8002f64:	08004774 	.word	0x08004774

08002f68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f6c:	f7ff ffdc 	bl	8002f28 <HAL_RCC_GetHCLKFreq>
 8002f70:	4601      	mov	r1, r0
 8002f72:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	0b5b      	lsrs	r3, r3, #13
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	4a03      	ldr	r2, [pc, #12]	; (8002f8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f7e:	5cd3      	ldrb	r3, [r2, r3]
 8002f80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	08004774 	.word	0x08004774

08002f90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b088      	sub	sp, #32
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d012      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002fb8:	4b69      	ldr	r3, [pc, #420]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	4a68      	ldr	r2, [pc, #416]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fbe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002fc2:	6093      	str	r3, [r2, #8]
 8002fc4:	4b66      	ldr	r3, [pc, #408]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fcc:	4964      	ldr	r1, [pc, #400]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d017      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fea:	4b5d      	ldr	r3, [pc, #372]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ff0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff8:	4959      	ldr	r1, [pc, #356]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003004:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003008:	d101      	bne.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800300a:	2301      	movs	r3, #1
 800300c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003016:	2301      	movs	r3, #1
 8003018:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d017      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003026:	4b4e      	ldr	r3, [pc, #312]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003028:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800302c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	494a      	ldr	r1, [pc, #296]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003044:	d101      	bne.n	800304a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003046:	2301      	movs	r3, #1
 8003048:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003052:	2301      	movs	r3, #1
 8003054:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003062:	2301      	movs	r3, #1
 8003064:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0320 	and.w	r3, r3, #32
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 808b 	beq.w	800318a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003074:	4b3a      	ldr	r3, [pc, #232]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	4a39      	ldr	r2, [pc, #228]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800307a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800307e:	6413      	str	r3, [r2, #64]	; 0x40
 8003080:	4b37      	ldr	r3, [pc, #220]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003088:	60bb      	str	r3, [r7, #8]
 800308a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800308c:	4b35      	ldr	r3, [pc, #212]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a34      	ldr	r2, [pc, #208]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003096:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003098:	f7fe fcbe 	bl	8001a18 <HAL_GetTick>
 800309c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a0:	f7fe fcba 	bl	8001a18 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b64      	cmp	r3, #100	; 0x64
 80030ac:	d901      	bls.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e38d      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80030b2:	4b2c      	ldr	r3, [pc, #176]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f0      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030be:	4b28      	ldr	r3, [pc, #160]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d035      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d02e      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030dc:	4b20      	ldr	r3, [pc, #128]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030e6:	4b1e      	ldr	r3, [pc, #120]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ea:	4a1d      	ldr	r2, [pc, #116]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030f2:	4b1b      	ldr	r3, [pc, #108]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f6:	4a1a      	ldr	r2, [pc, #104]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80030fe:	4a18      	ldr	r2, [pc, #96]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003104:	4b16      	ldr	r3, [pc, #88]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b01      	cmp	r3, #1
 800310e:	d114      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003110:	f7fe fc82 	bl	8001a18 <HAL_GetTick>
 8003114:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003116:	e00a      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003118:	f7fe fc7e 	bl	8001a18 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	f241 3288 	movw	r2, #5000	; 0x1388
 8003126:	4293      	cmp	r3, r2
 8003128:	d901      	bls.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e34f      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800312e:	4b0c      	ldr	r3, [pc, #48]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0ee      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003142:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003146:	d111      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003148:	4b05      	ldr	r3, [pc, #20]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003154:	4b04      	ldr	r3, [pc, #16]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003156:	400b      	ands	r3, r1
 8003158:	4901      	ldr	r1, [pc, #4]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800315a:	4313      	orrs	r3, r2
 800315c:	608b      	str	r3, [r1, #8]
 800315e:	e00b      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003160:	40023800 	.word	0x40023800
 8003164:	40007000 	.word	0x40007000
 8003168:	0ffffcff 	.word	0x0ffffcff
 800316c:	4bb3      	ldr	r3, [pc, #716]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	4ab2      	ldr	r2, [pc, #712]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003172:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003176:	6093      	str	r3, [r2, #8]
 8003178:	4bb0      	ldr	r3, [pc, #704]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800317a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003184:	49ad      	ldr	r1, [pc, #692]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003186:	4313      	orrs	r3, r2
 8003188:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0310 	and.w	r3, r3, #16
 8003192:	2b00      	cmp	r3, #0
 8003194:	d010      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003196:	4ba9      	ldr	r3, [pc, #676]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003198:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800319c:	4aa7      	ldr	r2, [pc, #668]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800319e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80031a6:	4ba5      	ldr	r3, [pc, #660]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b0:	49a2      	ldr	r1, [pc, #648]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00a      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031c4:	4b9d      	ldr	r3, [pc, #628]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031d2:	499a      	ldr	r1, [pc, #616]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031e6:	4b95      	ldr	r3, [pc, #596]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031f4:	4991      	ldr	r1, [pc, #580]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00a      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003208:	4b8c      	ldr	r3, [pc, #560]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800320a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003216:	4989      	ldr	r1, [pc, #548]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003218:	4313      	orrs	r3, r2
 800321a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00a      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800322a:	4b84      	ldr	r3, [pc, #528]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800322c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003230:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003238:	4980      	ldr	r1, [pc, #512]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00a      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800324c:	4b7b      	ldr	r3, [pc, #492]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800324e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003252:	f023 0203 	bic.w	r2, r3, #3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325a:	4978      	ldr	r1, [pc, #480]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800325c:	4313      	orrs	r3, r2
 800325e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00a      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800326e:	4b73      	ldr	r3, [pc, #460]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003274:	f023 020c 	bic.w	r2, r3, #12
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800327c:	496f      	ldr	r1, [pc, #444]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00a      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003290:	4b6a      	ldr	r3, [pc, #424]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003296:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329e:	4967      	ldr	r1, [pc, #412]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032b2:	4b62      	ldr	r3, [pc, #392]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c0:	495e      	ldr	r1, [pc, #376]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00a      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032d4:	4b59      	ldr	r3, [pc, #356]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e2:	4956      	ldr	r1, [pc, #344]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80032f6:	4b51      	ldr	r3, [pc, #324]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003304:	494d      	ldr	r1, [pc, #308]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00a      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003318:	4b48      	ldr	r3, [pc, #288]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800331a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003326:	4945      	ldr	r1, [pc, #276]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003328:	4313      	orrs	r3, r2
 800332a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800333a:	4b40      	ldr	r3, [pc, #256]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800333c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003340:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003348:	493c      	ldr	r1, [pc, #240]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800334a:	4313      	orrs	r3, r2
 800334c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00a      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800335c:	4b37      	ldr	r3, [pc, #220]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800335e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003362:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800336a:	4934      	ldr	r1, [pc, #208]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800336c:	4313      	orrs	r3, r2
 800336e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d011      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800337e:	4b2f      	ldr	r3, [pc, #188]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003384:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800338c:	492b      	ldr	r1, [pc, #172]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800338e:	4313      	orrs	r3, r2
 8003390:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003398:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800339c:	d101      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800339e:	2301      	movs	r3, #1
 80033a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80033ae:	2301      	movs	r3, #1
 80033b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033be:	4b1f      	ldr	r3, [pc, #124]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033cc:	491b      	ldr	r1, [pc, #108]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00b      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033e0:	4b16      	ldr	r3, [pc, #88]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033f0:	4912      	ldr	r1, [pc, #72]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00b      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003404:	4b0d      	ldr	r3, [pc, #52]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003414:	4909      	ldr	r1, [pc, #36]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003416:	4313      	orrs	r3, r2
 8003418:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00f      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003428:	4b04      	ldr	r3, [pc, #16]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800342a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800342e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003438:	e002      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800343a:	bf00      	nop
 800343c:	40023800 	.word	0x40023800
 8003440:	4985      	ldr	r1, [pc, #532]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00b      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003454:	4b80      	ldr	r3, [pc, #512]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003456:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800345a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003464:	497c      	ldr	r1, [pc, #496]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d005      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800347a:	f040 80d6 	bne.w	800362a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800347e:	4b76      	ldr	r3, [pc, #472]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a75      	ldr	r2, [pc, #468]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003484:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003488:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800348a:	f7fe fac5 	bl	8001a18 <HAL_GetTick>
 800348e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003490:	e008      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003492:	f7fe fac1 	bl	8001a18 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b64      	cmp	r3, #100	; 0x64
 800349e:	d901      	bls.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e194      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034a4:	4b6c      	ldr	r3, [pc, #432]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1f0      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d021      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d11d      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80034c4:	4b64      	ldr	r3, [pc, #400]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034ca:	0c1b      	lsrs	r3, r3, #16
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80034d2:	4b61      	ldr	r3, [pc, #388]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034d8:	0e1b      	lsrs	r3, r3, #24
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	019a      	lsls	r2, r3, #6
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	041b      	lsls	r3, r3, #16
 80034ea:	431a      	orrs	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	061b      	lsls	r3, r3, #24
 80034f0:	431a      	orrs	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	071b      	lsls	r3, r3, #28
 80034f8:	4957      	ldr	r1, [pc, #348]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d004      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003510:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003514:	d00a      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800351e:	2b00      	cmp	r3, #0
 8003520:	d02e      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800352a:	d129      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800352c:	4b4a      	ldr	r3, [pc, #296]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800352e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003532:	0c1b      	lsrs	r3, r3, #16
 8003534:	f003 0303 	and.w	r3, r3, #3
 8003538:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800353a:	4b47      	ldr	r3, [pc, #284]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800353c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003540:	0f1b      	lsrs	r3, r3, #28
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	019a      	lsls	r2, r3, #6
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	041b      	lsls	r3, r3, #16
 8003552:	431a      	orrs	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	061b      	lsls	r3, r3, #24
 800355a:	431a      	orrs	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	071b      	lsls	r3, r3, #28
 8003560:	493d      	ldr	r1, [pc, #244]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003568:	4b3b      	ldr	r3, [pc, #236]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800356a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800356e:	f023 021f 	bic.w	r2, r3, #31
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	3b01      	subs	r3, #1
 8003578:	4937      	ldr	r1, [pc, #220]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d01d      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800358c:	4b32      	ldr	r3, [pc, #200]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800358e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003592:	0e1b      	lsrs	r3, r3, #24
 8003594:	f003 030f 	and.w	r3, r3, #15
 8003598:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800359a:	4b2f      	ldr	r3, [pc, #188]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800359c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035a0:	0f1b      	lsrs	r3, r3, #28
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	019a      	lsls	r2, r3, #6
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	041b      	lsls	r3, r3, #16
 80035b4:	431a      	orrs	r2, r3
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	061b      	lsls	r3, r3, #24
 80035ba:	431a      	orrs	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	071b      	lsls	r3, r3, #28
 80035c0:	4925      	ldr	r1, [pc, #148]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d011      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	019a      	lsls	r2, r3, #6
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	041b      	lsls	r3, r3, #16
 80035e0:	431a      	orrs	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	061b      	lsls	r3, r3, #24
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	071b      	lsls	r3, r3, #28
 80035f0:	4919      	ldr	r1, [pc, #100]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80035f8:	4b17      	ldr	r3, [pc, #92]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a16      	ldr	r2, [pc, #88]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003602:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003604:	f7fe fa08 	bl	8001a18 <HAL_GetTick>
 8003608:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800360a:	e008      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800360c:	f7fe fa04 	bl	8001a18 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b64      	cmp	r3, #100	; 0x64
 8003618:	d901      	bls.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e0d7      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800361e:	4b0e      	ldr	r3, [pc, #56]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0f0      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	2b01      	cmp	r3, #1
 800362e:	f040 80cd 	bne.w	80037cc <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003632:	4b09      	ldr	r3, [pc, #36]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a08      	ldr	r2, [pc, #32]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003638:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800363c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800363e:	f7fe f9eb 	bl	8001a18 <HAL_GetTick>
 8003642:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003644:	e00a      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003646:	f7fe f9e7 	bl	8001a18 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b64      	cmp	r3, #100	; 0x64
 8003652:	d903      	bls.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e0ba      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003658:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800365c:	4b5e      	ldr	r3, [pc, #376]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003664:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003668:	d0ed      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367a:	2b00      	cmp	r3, #0
 800367c:	d009      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003686:	2b00      	cmp	r3, #0
 8003688:	d02e      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	2b00      	cmp	r3, #0
 8003690:	d12a      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003692:	4b51      	ldr	r3, [pc, #324]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003698:	0c1b      	lsrs	r3, r3, #16
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036a0:	4b4d      	ldr	r3, [pc, #308]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80036a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a6:	0f1b      	lsrs	r3, r3, #28
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	019a      	lsls	r2, r3, #6
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	041b      	lsls	r3, r3, #16
 80036b8:	431a      	orrs	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	061b      	lsls	r3, r3, #24
 80036c0:	431a      	orrs	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	071b      	lsls	r3, r3, #28
 80036c6:	4944      	ldr	r1, [pc, #272]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80036ce:	4b42      	ldr	r3, [pc, #264]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80036d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036dc:	3b01      	subs	r3, #1
 80036de:	021b      	lsls	r3, r3, #8
 80036e0:	493d      	ldr	r1, [pc, #244]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d022      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036fc:	d11d      	bne.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80036fe:	4b36      	ldr	r3, [pc, #216]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003704:	0e1b      	lsrs	r3, r3, #24
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800370c:	4b32      	ldr	r3, [pc, #200]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800370e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003712:	0f1b      	lsrs	r3, r3, #28
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	019a      	lsls	r2, r3, #6
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	041b      	lsls	r3, r3, #16
 8003726:	431a      	orrs	r2, r3
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	061b      	lsls	r3, r3, #24
 800372c:	431a      	orrs	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	071b      	lsls	r3, r3, #28
 8003732:	4929      	ldr	r1, [pc, #164]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003734:	4313      	orrs	r3, r2
 8003736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	d028      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003746:	4b24      	ldr	r3, [pc, #144]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374c:	0e1b      	lsrs	r3, r3, #24
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003754:	4b20      	ldr	r3, [pc, #128]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375a:	0c1b      	lsrs	r3, r3, #16
 800375c:	f003 0303 	and.w	r3, r3, #3
 8003760:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	019a      	lsls	r2, r3, #6
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	041b      	lsls	r3, r3, #16
 800376c:	431a      	orrs	r2, r3
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	061b      	lsls	r3, r3, #24
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	071b      	lsls	r3, r3, #28
 800377a:	4917      	ldr	r1, [pc, #92]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800377c:	4313      	orrs	r3, r2
 800377e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003782:	4b15      	ldr	r3, [pc, #84]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003784:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003788:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003790:	4911      	ldr	r1, [pc, #68]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003792:	4313      	orrs	r3, r2
 8003794:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003798:	4b0f      	ldr	r3, [pc, #60]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a0e      	ldr	r2, [pc, #56]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800379e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037a4:	f7fe f938 	bl	8001a18 <HAL_GetTick>
 80037a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037ac:	f7fe f934 	bl	8001a18 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b64      	cmp	r3, #100	; 0x64
 80037b8:	d901      	bls.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e007      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037be:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037ca:	d1ef      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3720      	adds	r7, #32
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	40023800 	.word	0x40023800

080037dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e084      	b.n	80038f8 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d106      	bne.n	800380e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7fd ff7d 	bl	8001708 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2202      	movs	r2, #2
 8003812:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003824:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800382e:	d902      	bls.n	8003836 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003830:	2300      	movs	r3, #0
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	e002      	b.n	800383c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800383a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003844:	d007      	beq.n	8003856 <HAL_SPI_Init+0x7a>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800384e:	d002      	beq.n	8003856 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10b      	bne.n	8003876 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003866:	d903      	bls.n	8003870 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2202      	movs	r2, #2
 800386c:	631a      	str	r2, [r3, #48]	; 0x30
 800386e:	e002      	b.n	8003876 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	431a      	orrs	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	431a      	orrs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003894:	431a      	orrs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	ea42 0103 	orr.w	r1, r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	0c1b      	lsrs	r3, r3, #16
 80038b6:	f003 0204 	and.w	r2, r3, #4
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c4:	431a      	orrs	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	ea42 0103 	orr.w	r1, r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	69da      	ldr	r2, [r3, #28]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	603b      	str	r3, [r7, #0]
 800390c:	4613      	mov	r3, r2
 800390e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003910:	2300      	movs	r3, #0
 8003912:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800391a:	2b01      	cmp	r3, #1
 800391c:	d101      	bne.n	8003922 <HAL_SPI_Transmit+0x22>
 800391e:	2302      	movs	r3, #2
 8003920:	e150      	b.n	8003bc4 <HAL_SPI_Transmit+0x2c4>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800392a:	f7fe f875 	bl	8001a18 <HAL_GetTick>
 800392e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003930:	88fb      	ldrh	r3, [r7, #6]
 8003932:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b01      	cmp	r3, #1
 800393e:	d002      	beq.n	8003946 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003940:	2302      	movs	r3, #2
 8003942:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003944:	e135      	b.n	8003bb2 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <HAL_SPI_Transmit+0x52>
 800394c:	88fb      	ldrh	r3, [r7, #6]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d102      	bne.n	8003958 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003956:	e12c      	b.n	8003bb2 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2203      	movs	r2, #3
 800395c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	88fa      	ldrh	r2, [r7, #6]
 8003970:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	88fa      	ldrh	r2, [r7, #6]
 8003976:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039a2:	d107      	bne.n	80039b4 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039be:	2b40      	cmp	r3, #64	; 0x40
 80039c0:	d007      	beq.n	80039d2 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039da:	d94b      	bls.n	8003a74 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <HAL_SPI_Transmit+0xea>
 80039e4:	8afb      	ldrh	r3, [r7, #22]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d13e      	bne.n	8003a68 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ee:	881a      	ldrh	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fa:	1c9a      	adds	r2, r3, #2
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	3b01      	subs	r3, #1
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a0e:	e02b      	b.n	8003a68 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d112      	bne.n	8003a44 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a22:	881a      	ldrh	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2e:	1c9a      	adds	r2, r3, #2
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a42:	e011      	b.n	8003a68 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a44:	f7fd ffe8 	bl	8001a18 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d803      	bhi.n	8003a5c <HAL_SPI_Transmit+0x15c>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5a:	d102      	bne.n	8003a62 <HAL_SPI_Transmit+0x162>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d102      	bne.n	8003a68 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a66:	e0a4      	b.n	8003bb2 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1ce      	bne.n	8003a10 <HAL_SPI_Transmit+0x110>
 8003a72:	e07c      	b.n	8003b6e <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d002      	beq.n	8003a82 <HAL_SPI_Transmit+0x182>
 8003a7c:	8afb      	ldrh	r3, [r7, #22]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d170      	bne.n	8003b64 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d912      	bls.n	8003ab2 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a90:	881a      	ldrh	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9c:	1c9a      	adds	r2, r3, #2
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	3b02      	subs	r3, #2
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ab0:	e058      	b.n	8003b64 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	330c      	adds	r3, #12
 8003abc:	7812      	ldrb	r2, [r2, #0]
 8003abe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac4:	1c5a      	adds	r2, r3, #1
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003ad8:	e044      	b.n	8003b64 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d12b      	bne.n	8003b40 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d912      	bls.n	8003b18 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af6:	881a      	ldrh	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b02:	1c9a      	adds	r2, r3, #2
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	3b02      	subs	r3, #2
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b16:	e025      	b.n	8003b64 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	330c      	adds	r3, #12
 8003b22:	7812      	ldrb	r2, [r2, #0]
 8003b24:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b3e:	e011      	b.n	8003b64 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b40:	f7fd ff6a 	bl	8001a18 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d803      	bhi.n	8003b58 <HAL_SPI_Transmit+0x258>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b56:	d102      	bne.n	8003b5e <HAL_SPI_Transmit+0x25e>
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d102      	bne.n	8003b64 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b62:	e026      	b.n	8003bb2 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1b5      	bne.n	8003ada <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	6839      	ldr	r1, [r7, #0]
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 f901 	bl	8003d7a <SPI_EndRxTxTransaction>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d002      	beq.n	8003b84 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2220      	movs	r2, #32
 8003b82:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10a      	bne.n	8003ba2 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	613b      	str	r3, [r7, #16]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	613b      	str	r3, [r7, #16]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	613b      	str	r3, [r7, #16]
 8003ba0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	77fb      	strb	r3, [r7, #31]
 8003bae:	e000      	b.n	8003bb2 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003bb0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003bc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3720      	adds	r7, #32
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	603b      	str	r3, [r7, #0]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bdc:	e04c      	b.n	8003c78 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be4:	d048      	beq.n	8003c78 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003be6:	f7fd ff17 	bl	8001a18 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d902      	bls.n	8003bfc <SPI_WaitFlagStateUntilTimeout+0x30>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d13d      	bne.n	8003c78 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c0a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c14:	d111      	bne.n	8003c3a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c1e:	d004      	beq.n	8003c2a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c28:	d107      	bne.n	8003c3a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c38:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c42:	d10f      	bne.n	8003c64 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c62:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e00f      	b.n	8003c98 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	4013      	ands	r3, r2
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	bf0c      	ite	eq
 8003c88:	2301      	moveq	r3, #1
 8003c8a:	2300      	movne	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	461a      	mov	r2, r3
 8003c90:	79fb      	ldrb	r3, [r7, #7]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d1a3      	bne.n	8003bde <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
 8003cac:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003cae:	e057      	b.n	8003d60 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003cb6:	d106      	bne.n	8003cc6 <SPI_WaitFifoStateUntilTimeout+0x26>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d103      	bne.n	8003cc6 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	330c      	adds	r3, #12
 8003cc4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ccc:	d048      	beq.n	8003d60 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003cce:	f7fd fea3 	bl	8001a18 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d902      	bls.n	8003ce4 <SPI_WaitFifoStateUntilTimeout+0x44>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d13d      	bne.n	8003d60 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003cf2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cfc:	d111      	bne.n	8003d22 <SPI_WaitFifoStateUntilTimeout+0x82>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d06:	d004      	beq.n	8003d12 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d10:	d107      	bne.n	8003d22 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d20:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d2a:	d10f      	bne.n	8003d4c <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d4a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e008      	b.n	8003d72 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d19f      	bne.n	8003cb0 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b086      	sub	sp, #24
 8003d7e:	af02      	add	r7, sp, #8
 8003d80:	60f8      	str	r0, [r7, #12]
 8003d82:	60b9      	str	r1, [r7, #8]
 8003d84:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f7ff ff84 	bl	8003ca0 <SPI_WaitFifoStateUntilTimeout>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d007      	beq.n	8003dae <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da2:	f043 0220 	orr.w	r2, r3, #32
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e027      	b.n	8003dfe <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2200      	movs	r2, #0
 8003db6:	2180      	movs	r1, #128	; 0x80
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f7ff ff07 	bl	8003bcc <SPI_WaitFlagStateUntilTimeout>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d007      	beq.n	8003dd4 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc8:	f043 0220 	orr.w	r2, r3, #32
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e014      	b.n	8003dfe <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f7ff ff5d 	bl	8003ca0 <SPI_WaitFifoStateUntilTimeout>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d007      	beq.n	8003dfc <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003df0:	f043 0220 	orr.w	r2, r3, #32
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e000      	b.n	8003dfe <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_MultiProcessor_Init>:
  *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
  *        HAL_MultiProcessor_Init().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b084      	sub	sp, #16
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	60f8      	str	r0, [r7, #12]
 8003e0e:	460b      	mov	r3, r1
 8003e10:	607a      	str	r2, [r7, #4]
 8003e12:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e059      	b.n	8003ed2 <HAL_MultiProcessor_Init+0xcc>
  }

  /* Check the wake up method parameter */
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d106      	bne.n	8003e34 <HAL_MultiProcessor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f7fd fcea 	bl	8001808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2224      	movs	r2, #36	; 0x24
 8003e38:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0201 	bic.w	r2, r2, #1
 8003e48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 f846 	bl	8003edc <UART_SetConfig>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d101      	bne.n	8003e5a <HAL_MultiProcessor_Init+0x54>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e03b      	b.n	8003ed2 <HAL_MultiProcessor_Init+0xcc>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <HAL_MultiProcessor_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 fae4 	bl	8004430 <UART_AdvFeatureConfig>
  }

  /* In multiprocessor mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e86:	609a      	str	r2, [r3, #8]

  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e8e:	d10a      	bne.n	8003ea6 <HAL_MultiProcessor_Init+0xa0>
  {
    /* If address mark wake up method is chosen, set the USART address node */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8003e9a:	7afb      	ldrb	r3, [r7, #11]
 8003e9c:	061a      	lsls	r2, r3, #24
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	605a      	str	r2, [r3, #4]
  }

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	601a      	str	r2, [r3, #0]

  __HAL_UART_ENABLE(huart);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f042 0201 	orr.w	r2, r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 fb52 	bl	8004574 <UART_CheckIdleState>
 8003ed0:	4603      	mov	r3, r0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
	...

08003edc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b088      	sub	sp, #32
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	4bb1      	ldr	r3, [pc, #708]	; (80041d0 <UART_SetConfig+0x2f4>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6812      	ldr	r2, [r2, #0]
 8003f12:	6939      	ldr	r1, [r7, #16]
 8003f14:	430b      	orrs	r3, r1
 8003f16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68da      	ldr	r2, [r3, #12]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a9f      	ldr	r2, [pc, #636]	; (80041d4 <UART_SetConfig+0x2f8>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d121      	bne.n	8003fa0 <UART_SetConfig+0xc4>
 8003f5c:	4b9e      	ldr	r3, [pc, #632]	; (80041d8 <UART_SetConfig+0x2fc>)
 8003f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	2b03      	cmp	r3, #3
 8003f68:	d816      	bhi.n	8003f98 <UART_SetConfig+0xbc>
 8003f6a:	a201      	add	r2, pc, #4	; (adr r2, 8003f70 <UART_SetConfig+0x94>)
 8003f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f70:	08003f81 	.word	0x08003f81
 8003f74:	08003f8d 	.word	0x08003f8d
 8003f78:	08003f87 	.word	0x08003f87
 8003f7c:	08003f93 	.word	0x08003f93
 8003f80:	2301      	movs	r3, #1
 8003f82:	77fb      	strb	r3, [r7, #31]
 8003f84:	e151      	b.n	800422a <UART_SetConfig+0x34e>
 8003f86:	2302      	movs	r3, #2
 8003f88:	77fb      	strb	r3, [r7, #31]
 8003f8a:	e14e      	b.n	800422a <UART_SetConfig+0x34e>
 8003f8c:	2304      	movs	r3, #4
 8003f8e:	77fb      	strb	r3, [r7, #31]
 8003f90:	e14b      	b.n	800422a <UART_SetConfig+0x34e>
 8003f92:	2308      	movs	r3, #8
 8003f94:	77fb      	strb	r3, [r7, #31]
 8003f96:	e148      	b.n	800422a <UART_SetConfig+0x34e>
 8003f98:	2310      	movs	r3, #16
 8003f9a:	77fb      	strb	r3, [r7, #31]
 8003f9c:	bf00      	nop
 8003f9e:	e144      	b.n	800422a <UART_SetConfig+0x34e>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a8d      	ldr	r2, [pc, #564]	; (80041dc <UART_SetConfig+0x300>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d134      	bne.n	8004014 <UART_SetConfig+0x138>
 8003faa:	4b8b      	ldr	r3, [pc, #556]	; (80041d8 <UART_SetConfig+0x2fc>)
 8003fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb0:	f003 030c 	and.w	r3, r3, #12
 8003fb4:	2b0c      	cmp	r3, #12
 8003fb6:	d829      	bhi.n	800400c <UART_SetConfig+0x130>
 8003fb8:	a201      	add	r2, pc, #4	; (adr r2, 8003fc0 <UART_SetConfig+0xe4>)
 8003fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbe:	bf00      	nop
 8003fc0:	08003ff5 	.word	0x08003ff5
 8003fc4:	0800400d 	.word	0x0800400d
 8003fc8:	0800400d 	.word	0x0800400d
 8003fcc:	0800400d 	.word	0x0800400d
 8003fd0:	08004001 	.word	0x08004001
 8003fd4:	0800400d 	.word	0x0800400d
 8003fd8:	0800400d 	.word	0x0800400d
 8003fdc:	0800400d 	.word	0x0800400d
 8003fe0:	08003ffb 	.word	0x08003ffb
 8003fe4:	0800400d 	.word	0x0800400d
 8003fe8:	0800400d 	.word	0x0800400d
 8003fec:	0800400d 	.word	0x0800400d
 8003ff0:	08004007 	.word	0x08004007
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	77fb      	strb	r3, [r7, #31]
 8003ff8:	e117      	b.n	800422a <UART_SetConfig+0x34e>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	77fb      	strb	r3, [r7, #31]
 8003ffe:	e114      	b.n	800422a <UART_SetConfig+0x34e>
 8004000:	2304      	movs	r3, #4
 8004002:	77fb      	strb	r3, [r7, #31]
 8004004:	e111      	b.n	800422a <UART_SetConfig+0x34e>
 8004006:	2308      	movs	r3, #8
 8004008:	77fb      	strb	r3, [r7, #31]
 800400a:	e10e      	b.n	800422a <UART_SetConfig+0x34e>
 800400c:	2310      	movs	r3, #16
 800400e:	77fb      	strb	r3, [r7, #31]
 8004010:	bf00      	nop
 8004012:	e10a      	b.n	800422a <UART_SetConfig+0x34e>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a71      	ldr	r2, [pc, #452]	; (80041e0 <UART_SetConfig+0x304>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d120      	bne.n	8004060 <UART_SetConfig+0x184>
 800401e:	4b6e      	ldr	r3, [pc, #440]	; (80041d8 <UART_SetConfig+0x2fc>)
 8004020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004024:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004028:	2b10      	cmp	r3, #16
 800402a:	d00f      	beq.n	800404c <UART_SetConfig+0x170>
 800402c:	2b10      	cmp	r3, #16
 800402e:	d802      	bhi.n	8004036 <UART_SetConfig+0x15a>
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <UART_SetConfig+0x164>
 8004034:	e010      	b.n	8004058 <UART_SetConfig+0x17c>
 8004036:	2b20      	cmp	r3, #32
 8004038:	d005      	beq.n	8004046 <UART_SetConfig+0x16a>
 800403a:	2b30      	cmp	r3, #48	; 0x30
 800403c:	d009      	beq.n	8004052 <UART_SetConfig+0x176>
 800403e:	e00b      	b.n	8004058 <UART_SetConfig+0x17c>
 8004040:	2300      	movs	r3, #0
 8004042:	77fb      	strb	r3, [r7, #31]
 8004044:	e0f1      	b.n	800422a <UART_SetConfig+0x34e>
 8004046:	2302      	movs	r3, #2
 8004048:	77fb      	strb	r3, [r7, #31]
 800404a:	e0ee      	b.n	800422a <UART_SetConfig+0x34e>
 800404c:	2304      	movs	r3, #4
 800404e:	77fb      	strb	r3, [r7, #31]
 8004050:	e0eb      	b.n	800422a <UART_SetConfig+0x34e>
 8004052:	2308      	movs	r3, #8
 8004054:	77fb      	strb	r3, [r7, #31]
 8004056:	e0e8      	b.n	800422a <UART_SetConfig+0x34e>
 8004058:	2310      	movs	r3, #16
 800405a:	77fb      	strb	r3, [r7, #31]
 800405c:	bf00      	nop
 800405e:	e0e4      	b.n	800422a <UART_SetConfig+0x34e>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a5f      	ldr	r2, [pc, #380]	; (80041e4 <UART_SetConfig+0x308>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d120      	bne.n	80040ac <UART_SetConfig+0x1d0>
 800406a:	4b5b      	ldr	r3, [pc, #364]	; (80041d8 <UART_SetConfig+0x2fc>)
 800406c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004070:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004074:	2b40      	cmp	r3, #64	; 0x40
 8004076:	d00f      	beq.n	8004098 <UART_SetConfig+0x1bc>
 8004078:	2b40      	cmp	r3, #64	; 0x40
 800407a:	d802      	bhi.n	8004082 <UART_SetConfig+0x1a6>
 800407c:	2b00      	cmp	r3, #0
 800407e:	d005      	beq.n	800408c <UART_SetConfig+0x1b0>
 8004080:	e010      	b.n	80040a4 <UART_SetConfig+0x1c8>
 8004082:	2b80      	cmp	r3, #128	; 0x80
 8004084:	d005      	beq.n	8004092 <UART_SetConfig+0x1b6>
 8004086:	2bc0      	cmp	r3, #192	; 0xc0
 8004088:	d009      	beq.n	800409e <UART_SetConfig+0x1c2>
 800408a:	e00b      	b.n	80040a4 <UART_SetConfig+0x1c8>
 800408c:	2300      	movs	r3, #0
 800408e:	77fb      	strb	r3, [r7, #31]
 8004090:	e0cb      	b.n	800422a <UART_SetConfig+0x34e>
 8004092:	2302      	movs	r3, #2
 8004094:	77fb      	strb	r3, [r7, #31]
 8004096:	e0c8      	b.n	800422a <UART_SetConfig+0x34e>
 8004098:	2304      	movs	r3, #4
 800409a:	77fb      	strb	r3, [r7, #31]
 800409c:	e0c5      	b.n	800422a <UART_SetConfig+0x34e>
 800409e:	2308      	movs	r3, #8
 80040a0:	77fb      	strb	r3, [r7, #31]
 80040a2:	e0c2      	b.n	800422a <UART_SetConfig+0x34e>
 80040a4:	2310      	movs	r3, #16
 80040a6:	77fb      	strb	r3, [r7, #31]
 80040a8:	bf00      	nop
 80040aa:	e0be      	b.n	800422a <UART_SetConfig+0x34e>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a4d      	ldr	r2, [pc, #308]	; (80041e8 <UART_SetConfig+0x30c>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d124      	bne.n	8004100 <UART_SetConfig+0x224>
 80040b6:	4b48      	ldr	r3, [pc, #288]	; (80041d8 <UART_SetConfig+0x2fc>)
 80040b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040c4:	d012      	beq.n	80040ec <UART_SetConfig+0x210>
 80040c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ca:	d802      	bhi.n	80040d2 <UART_SetConfig+0x1f6>
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d007      	beq.n	80040e0 <UART_SetConfig+0x204>
 80040d0:	e012      	b.n	80040f8 <UART_SetConfig+0x21c>
 80040d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040d6:	d006      	beq.n	80040e6 <UART_SetConfig+0x20a>
 80040d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040dc:	d009      	beq.n	80040f2 <UART_SetConfig+0x216>
 80040de:	e00b      	b.n	80040f8 <UART_SetConfig+0x21c>
 80040e0:	2300      	movs	r3, #0
 80040e2:	77fb      	strb	r3, [r7, #31]
 80040e4:	e0a1      	b.n	800422a <UART_SetConfig+0x34e>
 80040e6:	2302      	movs	r3, #2
 80040e8:	77fb      	strb	r3, [r7, #31]
 80040ea:	e09e      	b.n	800422a <UART_SetConfig+0x34e>
 80040ec:	2304      	movs	r3, #4
 80040ee:	77fb      	strb	r3, [r7, #31]
 80040f0:	e09b      	b.n	800422a <UART_SetConfig+0x34e>
 80040f2:	2308      	movs	r3, #8
 80040f4:	77fb      	strb	r3, [r7, #31]
 80040f6:	e098      	b.n	800422a <UART_SetConfig+0x34e>
 80040f8:	2310      	movs	r3, #16
 80040fa:	77fb      	strb	r3, [r7, #31]
 80040fc:	bf00      	nop
 80040fe:	e094      	b.n	800422a <UART_SetConfig+0x34e>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a39      	ldr	r2, [pc, #228]	; (80041ec <UART_SetConfig+0x310>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d124      	bne.n	8004154 <UART_SetConfig+0x278>
 800410a:	4b33      	ldr	r3, [pc, #204]	; (80041d8 <UART_SetConfig+0x2fc>)
 800410c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004110:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004118:	d012      	beq.n	8004140 <UART_SetConfig+0x264>
 800411a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800411e:	d802      	bhi.n	8004126 <UART_SetConfig+0x24a>
 8004120:	2b00      	cmp	r3, #0
 8004122:	d007      	beq.n	8004134 <UART_SetConfig+0x258>
 8004124:	e012      	b.n	800414c <UART_SetConfig+0x270>
 8004126:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800412a:	d006      	beq.n	800413a <UART_SetConfig+0x25e>
 800412c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004130:	d009      	beq.n	8004146 <UART_SetConfig+0x26a>
 8004132:	e00b      	b.n	800414c <UART_SetConfig+0x270>
 8004134:	2301      	movs	r3, #1
 8004136:	77fb      	strb	r3, [r7, #31]
 8004138:	e077      	b.n	800422a <UART_SetConfig+0x34e>
 800413a:	2302      	movs	r3, #2
 800413c:	77fb      	strb	r3, [r7, #31]
 800413e:	e074      	b.n	800422a <UART_SetConfig+0x34e>
 8004140:	2304      	movs	r3, #4
 8004142:	77fb      	strb	r3, [r7, #31]
 8004144:	e071      	b.n	800422a <UART_SetConfig+0x34e>
 8004146:	2308      	movs	r3, #8
 8004148:	77fb      	strb	r3, [r7, #31]
 800414a:	e06e      	b.n	800422a <UART_SetConfig+0x34e>
 800414c:	2310      	movs	r3, #16
 800414e:	77fb      	strb	r3, [r7, #31]
 8004150:	bf00      	nop
 8004152:	e06a      	b.n	800422a <UART_SetConfig+0x34e>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a25      	ldr	r2, [pc, #148]	; (80041f0 <UART_SetConfig+0x314>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d124      	bne.n	80041a8 <UART_SetConfig+0x2cc>
 800415e:	4b1e      	ldr	r3, [pc, #120]	; (80041d8 <UART_SetConfig+0x2fc>)
 8004160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004164:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800416c:	d012      	beq.n	8004194 <UART_SetConfig+0x2b8>
 800416e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004172:	d802      	bhi.n	800417a <UART_SetConfig+0x29e>
 8004174:	2b00      	cmp	r3, #0
 8004176:	d007      	beq.n	8004188 <UART_SetConfig+0x2ac>
 8004178:	e012      	b.n	80041a0 <UART_SetConfig+0x2c4>
 800417a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800417e:	d006      	beq.n	800418e <UART_SetConfig+0x2b2>
 8004180:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004184:	d009      	beq.n	800419a <UART_SetConfig+0x2be>
 8004186:	e00b      	b.n	80041a0 <UART_SetConfig+0x2c4>
 8004188:	2300      	movs	r3, #0
 800418a:	77fb      	strb	r3, [r7, #31]
 800418c:	e04d      	b.n	800422a <UART_SetConfig+0x34e>
 800418e:	2302      	movs	r3, #2
 8004190:	77fb      	strb	r3, [r7, #31]
 8004192:	e04a      	b.n	800422a <UART_SetConfig+0x34e>
 8004194:	2304      	movs	r3, #4
 8004196:	77fb      	strb	r3, [r7, #31]
 8004198:	e047      	b.n	800422a <UART_SetConfig+0x34e>
 800419a:	2308      	movs	r3, #8
 800419c:	77fb      	strb	r3, [r7, #31]
 800419e:	e044      	b.n	800422a <UART_SetConfig+0x34e>
 80041a0:	2310      	movs	r3, #16
 80041a2:	77fb      	strb	r3, [r7, #31]
 80041a4:	bf00      	nop
 80041a6:	e040      	b.n	800422a <UART_SetConfig+0x34e>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a11      	ldr	r2, [pc, #68]	; (80041f4 <UART_SetConfig+0x318>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d139      	bne.n	8004226 <UART_SetConfig+0x34a>
 80041b2:	4b09      	ldr	r3, [pc, #36]	; (80041d8 <UART_SetConfig+0x2fc>)
 80041b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80041bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041c0:	d027      	beq.n	8004212 <UART_SetConfig+0x336>
 80041c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041c6:	d817      	bhi.n	80041f8 <UART_SetConfig+0x31c>
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d01c      	beq.n	8004206 <UART_SetConfig+0x32a>
 80041cc:	e027      	b.n	800421e <UART_SetConfig+0x342>
 80041ce:	bf00      	nop
 80041d0:	efff69f3 	.word	0xefff69f3
 80041d4:	40011000 	.word	0x40011000
 80041d8:	40023800 	.word	0x40023800
 80041dc:	40004400 	.word	0x40004400
 80041e0:	40004800 	.word	0x40004800
 80041e4:	40004c00 	.word	0x40004c00
 80041e8:	40005000 	.word	0x40005000
 80041ec:	40011400 	.word	0x40011400
 80041f0:	40007800 	.word	0x40007800
 80041f4:	40007c00 	.word	0x40007c00
 80041f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041fc:	d006      	beq.n	800420c <UART_SetConfig+0x330>
 80041fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004202:	d009      	beq.n	8004218 <UART_SetConfig+0x33c>
 8004204:	e00b      	b.n	800421e <UART_SetConfig+0x342>
 8004206:	2300      	movs	r3, #0
 8004208:	77fb      	strb	r3, [r7, #31]
 800420a:	e00e      	b.n	800422a <UART_SetConfig+0x34e>
 800420c:	2302      	movs	r3, #2
 800420e:	77fb      	strb	r3, [r7, #31]
 8004210:	e00b      	b.n	800422a <UART_SetConfig+0x34e>
 8004212:	2304      	movs	r3, #4
 8004214:	77fb      	strb	r3, [r7, #31]
 8004216:	e008      	b.n	800422a <UART_SetConfig+0x34e>
 8004218:	2308      	movs	r3, #8
 800421a:	77fb      	strb	r3, [r7, #31]
 800421c:	e005      	b.n	800422a <UART_SetConfig+0x34e>
 800421e:	2310      	movs	r3, #16
 8004220:	77fb      	strb	r3, [r7, #31]
 8004222:	bf00      	nop
 8004224:	e001      	b.n	800422a <UART_SetConfig+0x34e>
 8004226:	2310      	movs	r3, #16
 8004228:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004232:	d17f      	bne.n	8004334 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8004234:	7ffb      	ldrb	r3, [r7, #31]
 8004236:	2b08      	cmp	r3, #8
 8004238:	d85c      	bhi.n	80042f4 <UART_SetConfig+0x418>
 800423a:	a201      	add	r2, pc, #4	; (adr r2, 8004240 <UART_SetConfig+0x364>)
 800423c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004240:	08004265 	.word	0x08004265
 8004244:	08004285 	.word	0x08004285
 8004248:	080042a5 	.word	0x080042a5
 800424c:	080042f5 	.word	0x080042f5
 8004250:	080042bd 	.word	0x080042bd
 8004254:	080042f5 	.word	0x080042f5
 8004258:	080042f5 	.word	0x080042f5
 800425c:	080042f5 	.word	0x080042f5
 8004260:	080042dd 	.word	0x080042dd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004264:	f7fe fe6c 	bl	8002f40 <HAL_RCC_GetPCLK1Freq>
 8004268:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	005a      	lsls	r2, r3, #1
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	085b      	lsrs	r3, r3, #1
 8004274:	441a      	add	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	fbb2 f3f3 	udiv	r3, r2, r3
 800427e:	b29b      	uxth	r3, r3
 8004280:	61bb      	str	r3, [r7, #24]
        break;
 8004282:	e03a      	b.n	80042fa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004284:	f7fe fe70 	bl	8002f68 <HAL_RCC_GetPCLK2Freq>
 8004288:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	005a      	lsls	r2, r3, #1
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	085b      	lsrs	r3, r3, #1
 8004294:	441a      	add	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	fbb2 f3f3 	udiv	r3, r2, r3
 800429e:	b29b      	uxth	r3, r3
 80042a0:	61bb      	str	r3, [r7, #24]
        break;
 80042a2:	e02a      	b.n	80042fa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	085a      	lsrs	r2, r3, #1
 80042aa:	4b5f      	ldr	r3, [pc, #380]	; (8004428 <UART_SetConfig+0x54c>)
 80042ac:	4413      	add	r3, r2
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6852      	ldr	r2, [r2, #4]
 80042b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	61bb      	str	r3, [r7, #24]
        break;
 80042ba:	e01e      	b.n	80042fa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042bc:	f7fe fd82 	bl	8002dc4 <HAL_RCC_GetSysClockFreq>
 80042c0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	005a      	lsls	r2, r3, #1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	085b      	lsrs	r3, r3, #1
 80042cc:	441a      	add	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	61bb      	str	r3, [r7, #24]
        break;
 80042da:	e00e      	b.n	80042fa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	085b      	lsrs	r3, r3, #1
 80042e2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	61bb      	str	r3, [r7, #24]
        break;
 80042f2:	e002      	b.n	80042fa <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	75fb      	strb	r3, [r7, #23]
        break;
 80042f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	2b0f      	cmp	r3, #15
 80042fe:	d916      	bls.n	800432e <UART_SetConfig+0x452>
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004306:	d212      	bcs.n	800432e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	b29b      	uxth	r3, r3
 800430c:	f023 030f 	bic.w	r3, r3, #15
 8004310:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	085b      	lsrs	r3, r3, #1
 8004316:	b29b      	uxth	r3, r3
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	b29a      	uxth	r2, r3
 800431e:	897b      	ldrh	r3, [r7, #10]
 8004320:	4313      	orrs	r3, r2
 8004322:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	897a      	ldrh	r2, [r7, #10]
 800432a:	60da      	str	r2, [r3, #12]
 800432c:	e070      	b.n	8004410 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	75fb      	strb	r3, [r7, #23]
 8004332:	e06d      	b.n	8004410 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8004334:	7ffb      	ldrb	r3, [r7, #31]
 8004336:	2b08      	cmp	r3, #8
 8004338:	d859      	bhi.n	80043ee <UART_SetConfig+0x512>
 800433a:	a201      	add	r2, pc, #4	; (adr r2, 8004340 <UART_SetConfig+0x464>)
 800433c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004340:	08004365 	.word	0x08004365
 8004344:	08004383 	.word	0x08004383
 8004348:	080043a1 	.word	0x080043a1
 800434c:	080043ef 	.word	0x080043ef
 8004350:	080043b9 	.word	0x080043b9
 8004354:	080043ef 	.word	0x080043ef
 8004358:	080043ef 	.word	0x080043ef
 800435c:	080043ef 	.word	0x080043ef
 8004360:	080043d7 	.word	0x080043d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004364:	f7fe fdec 	bl	8002f40 <HAL_RCC_GetPCLK1Freq>
 8004368:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	085a      	lsrs	r2, r3, #1
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	441a      	add	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	fbb2 f3f3 	udiv	r3, r2, r3
 800437c:	b29b      	uxth	r3, r3
 800437e:	61bb      	str	r3, [r7, #24]
        break;
 8004380:	e038      	b.n	80043f4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004382:	f7fe fdf1 	bl	8002f68 <HAL_RCC_GetPCLK2Freq>
 8004386:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	085a      	lsrs	r2, r3, #1
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	441a      	add	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	fbb2 f3f3 	udiv	r3, r2, r3
 800439a:	b29b      	uxth	r3, r3
 800439c:	61bb      	str	r3, [r7, #24]
        break;
 800439e:	e029      	b.n	80043f4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	085a      	lsrs	r2, r3, #1
 80043a6:	4b21      	ldr	r3, [pc, #132]	; (800442c <UART_SetConfig+0x550>)
 80043a8:	4413      	add	r3, r2
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6852      	ldr	r2, [r2, #4]
 80043ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	61bb      	str	r3, [r7, #24]
        break;
 80043b6:	e01d      	b.n	80043f4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043b8:	f7fe fd04 	bl	8002dc4 <HAL_RCC_GetSysClockFreq>
 80043bc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	085a      	lsrs	r2, r3, #1
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	441a      	add	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	61bb      	str	r3, [r7, #24]
        break;
 80043d4:	e00e      	b.n	80043f4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	085b      	lsrs	r3, r3, #1
 80043dc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	61bb      	str	r3, [r7, #24]
        break;
 80043ec:	e002      	b.n	80043f4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	75fb      	strb	r3, [r7, #23]
        break;
 80043f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	2b0f      	cmp	r3, #15
 80043f8:	d908      	bls.n	800440c <UART_SetConfig+0x530>
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004400:	d204      	bcs.n	800440c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	60da      	str	r2, [r3, #12]
 800440a:	e001      	b.n	8004410 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800441c:	7dfb      	ldrb	r3, [r7, #23]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3720      	adds	r7, #32
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	01e84800 	.word	0x01e84800
 800442c:	00f42400 	.word	0x00f42400

08004430 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00a      	beq.n	800447c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	f003 0310 	and.w	r3, r3, #16
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	f003 0320 	and.w	r3, r3, #32
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450c:	2b00      	cmp	r3, #0
 800450e:	d01a      	beq.n	8004546 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800452e:	d10a      	bne.n	8004546 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	605a      	str	r2, [r3, #4]
  }
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af02      	add	r7, sp, #8
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004582:	f7fd fa49 	bl	8001a18 <HAL_GetTick>
 8004586:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b08      	cmp	r3, #8
 8004594:	d10e      	bne.n	80045b4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004596:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f82a 	bl	80045fe <UART_WaitOnFlagUntilTimeout>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e020      	b.n	80045f6 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0304 	and.w	r3, r3, #4
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d10e      	bne.n	80045e0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f814 	bl	80045fe <UART_WaitOnFlagUntilTimeout>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e00a      	b.n	80045f6 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2220      	movs	r2, #32
 80045e4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2220      	movs	r2, #32
 80045ea:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b084      	sub	sp, #16
 8004602:	af00      	add	r7, sp, #0
 8004604:	60f8      	str	r0, [r7, #12]
 8004606:	60b9      	str	r1, [r7, #8]
 8004608:	603b      	str	r3, [r7, #0]
 800460a:	4613      	mov	r3, r2
 800460c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800460e:	e05d      	b.n	80046cc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004616:	d059      	beq.n	80046cc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004618:	f7fd f9fe 	bl	8001a18 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	429a      	cmp	r2, r3
 8004626:	d302      	bcc.n	800462e <UART_WaitOnFlagUntilTimeout+0x30>
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d11b      	bne.n	8004666 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800463c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0201 	bic.w	r2, r2, #1
 800464c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2220      	movs	r2, #32
 8004652:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2220      	movs	r2, #32
 8004658:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e042      	b.n	80046ec <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b00      	cmp	r3, #0
 8004672:	d02b      	beq.n	80046cc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800467e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004682:	d123      	bne.n	80046cc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800468c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800469c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0201 	bic.w	r2, r2, #1
 80046ac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2220      	movs	r2, #32
 80046b2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2220      	movs	r2, #32
 80046b8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2220      	movs	r2, #32
 80046be:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e00f      	b.n	80046ec <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	69da      	ldr	r2, [r3, #28]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	4013      	ands	r3, r2
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	429a      	cmp	r2, r3
 80046da:	bf0c      	ite	eq
 80046dc:	2301      	moveq	r3, #1
 80046de:	2300      	movne	r3, #0
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	461a      	mov	r2, r3
 80046e4:	79fb      	ldrb	r3, [r7, #7]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d092      	beq.n	8004610 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <__libc_init_array>:
 80046f4:	b570      	push	{r4, r5, r6, lr}
 80046f6:	4e0d      	ldr	r6, [pc, #52]	; (800472c <__libc_init_array+0x38>)
 80046f8:	4c0d      	ldr	r4, [pc, #52]	; (8004730 <__libc_init_array+0x3c>)
 80046fa:	1ba4      	subs	r4, r4, r6
 80046fc:	10a4      	asrs	r4, r4, #2
 80046fe:	2500      	movs	r5, #0
 8004700:	42a5      	cmp	r5, r4
 8004702:	d109      	bne.n	8004718 <__libc_init_array+0x24>
 8004704:	4e0b      	ldr	r6, [pc, #44]	; (8004734 <__libc_init_array+0x40>)
 8004706:	4c0c      	ldr	r4, [pc, #48]	; (8004738 <__libc_init_array+0x44>)
 8004708:	f000 f820 	bl	800474c <_init>
 800470c:	1ba4      	subs	r4, r4, r6
 800470e:	10a4      	asrs	r4, r4, #2
 8004710:	2500      	movs	r5, #0
 8004712:	42a5      	cmp	r5, r4
 8004714:	d105      	bne.n	8004722 <__libc_init_array+0x2e>
 8004716:	bd70      	pop	{r4, r5, r6, pc}
 8004718:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800471c:	4798      	blx	r3
 800471e:	3501      	adds	r5, #1
 8004720:	e7ee      	b.n	8004700 <__libc_init_array+0xc>
 8004722:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004726:	4798      	blx	r3
 8004728:	3501      	adds	r5, #1
 800472a:	e7f2      	b.n	8004712 <__libc_init_array+0x1e>
 800472c:	0800478c 	.word	0x0800478c
 8004730:	0800478c 	.word	0x0800478c
 8004734:	0800478c 	.word	0x0800478c
 8004738:	08004790 	.word	0x08004790

0800473c <memset>:
 800473c:	4402      	add	r2, r0
 800473e:	4603      	mov	r3, r0
 8004740:	4293      	cmp	r3, r2
 8004742:	d100      	bne.n	8004746 <memset+0xa>
 8004744:	4770      	bx	lr
 8004746:	f803 1b01 	strb.w	r1, [r3], #1
 800474a:	e7f9      	b.n	8004740 <memset+0x4>

0800474c <_init>:
 800474c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474e:	bf00      	nop
 8004750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004752:	bc08      	pop	{r3}
 8004754:	469e      	mov	lr, r3
 8004756:	4770      	bx	lr

08004758 <_fini>:
 8004758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475a:	bf00      	nop
 800475c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800475e:	bc08      	pop	{r3}
 8004760:	469e      	mov	lr, r3
 8004762:	4770      	bx	lr
